{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/font/Pacifico-Regular.ttf","path":"font/Pacifico-Regular.ttf","modified":0,"renderable":0},{"_id":"source/img/avatar-regex.png","path":"img/avatar-regex.png","modified":0,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/top-tags.png","path":"img/top-tags.png","modified":0,"renderable":0},{"_id":"source/img/top-index.png","path":"img/top-index.png","modified":0,"renderable":0},{"_id":"source/img/01/02/cmake.png","path":"img/01/02/cmake.png","modified":0,"renderable":0},{"_id":"source/img/01/02/linker_input.png","path":"img/01/02/linker_input.png","modified":0,"renderable":0},{"_id":"source/img/01/02/include_directories.png","path":"img/01/02/include_directories.png","modified":0,"renderable":0},{"_id":"source/img/01/02/x64.png","path":"img/01/02/x64.png","modified":0,"renderable":0},{"_id":"source/img/01/02/vc_directories.png","path":"img/01/02/vc_directories.png","modified":0,"renderable":0},{"_id":"source/img/01/01/opengl1.png","path":"img/01/01/opengl1.png","modified":0,"renderable":0},{"_id":"source/img/01/02/opengl2.png","path":"img/01/02/opengl2.png","modified":0,"renderable":0},{"_id":"source/img/01/02/hellowindow2.png","path":"img/01/02/hellowindow2.png","modified":0,"renderable":0},{"_id":"source/img/01/03/hellotriangle.png","path":"img/01/03/hellotriangle.png","modified":0,"renderable":0},{"_id":"source/img/01/03/hellotriangle2.png","path":"img/01/03/hellotriangle2.png","modified":0,"renderable":0},{"_id":"source/img/01/03/ndc.png","path":"img/01/03/ndc.png","modified":0,"renderable":0},{"_id":"source/img/01/03/opengl3.jpg","path":"img/01/03/opengl3.jpg","modified":0,"renderable":0},{"_id":"source/img/01/03/pipeline.png","path":"img/01/03/pipeline.png","modified":0,"renderable":0},{"_id":"source/img/01/03/vertex_array_objects.png","path":"img/01/03/vertex_array_objects.png","modified":0,"renderable":0},{"_id":"source/img/01/03/vertex_array_objects_ebo.png","path":"img/01/03/vertex_array_objects_ebo.png","modified":0,"renderable":0},{"_id":"source/img/01/03/vertex_attribute_pointer.png","path":"img/01/03/vertex_attribute_pointer.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/css/fps.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1748401134000},{"_id":"source/_drafts/cf-wkrs-vless.md","hash":"5e53b2df834c3588695b8dcdc8ae6e52d9442d3e","modified":1748401134000},{"_id":"source/about/index.md","hash":"58fe63fc0a34978ccbd4a8b6cc15c574b9ba5058","modified":1749021838575},{"_id":"source/categories/index.md","hash":"bd9995bbeaefc467cc056ad52d75520b5d49dffb","modified":1749021838575},{"_id":"source/_posts/1-Kubernetes一主二从集群搭建准备工作.md","hash":"09d91e452b819dd203c9243359d651f5e607bea9","modified":1748401134000},{"_id":"source/_posts/2.位运算操作-取反.md","hash":"53ba46b1ee33d4d103e07666e86f5a84dbd3af33","modified":1748401134000},{"_id":"source/_posts/2020-08-11-leetcode-2-两数相加.md","hash":"8e0914d1b89069192345ee377fd5ca1df44327c9","modified":1748401134000},{"_id":"source/_posts/2020-08-25-python使用位图对数据进行排序.md","hash":"517225d47dd74ff4a9b3cfdab4e34417fd7ce4ae","modified":1748401134000},{"_id":"source/_posts/2020-08-29-leetcode-7-字符串Z字(V字)输出.md","hash":"9f9f34ac3cfd9be262b6620b96234d7f00291779","modified":1748401134000},{"_id":"source/_posts/2020-08-30-leetcode-8-字符串转换整数(atoi).md","hash":"919afa2085ef6c2d07bea6277e474d98cd771f19","modified":1748401134000},{"_id":"source/_posts/2020-08-30-计算机系统知识(一).md","hash":"ccbf4a862e0aa6b35644e63354dd9314dfcf9891","modified":1748401134000},{"_id":"source/_posts/2020-08-31-leetcode-15-三数之和.md","hash":"51e37d296f58573610e97ae4c5da2b48de2a4bbc","modified":1748401134000},{"_id":"source/_posts/2020-09-01-Mac-Application快捷键神器.md","hash":"5b9442db9f653c6b50359d64c68a5bb71cd18ded","modified":1748401134000},{"_id":"source/_posts/AIToolsSet-Napkin实现文本可视化.md","hash":"f412aa57f0caae3a5c236b314c0d3d5d95e65e4d","modified":1748401134000},{"_id":"source/_posts/Go-IoC与委托.md","hash":"ece5761f5ec21c69cab8ce0147c7c5913353d6a8","modified":1748401134000},{"_id":"source/_posts/20250306_日记_梦搂记.md","hash":"bf56ba53b21bc75a739b871f545326b21dea83ab","modified":1748401134000},{"_id":"source/_posts/Go-chapter1-gRPC概述与发展.md","hash":"11d3bdc5aa1183e08be52cba8493700a4c1af778","modified":1748401134000},{"_id":"source/_posts/Go-protoc使用生成文件.md","hash":"2aee644d157ef3b7d0dcafc989740c9b1760133d","modified":1748401134000},{"_id":"source/_posts/Go-模版方法模式.md","hash":"995218927ffc2d123edbbb41cf160a0321102c50","modified":1748401134000},{"_id":"source/_posts/Go-设计模式-门面模式.md","hash":"eac8c5822f6413dc158662303d59718d1301ea34","modified":1748401134000},{"_id":"source/_posts/Go-项目工程态Kratos初始化项目脚手架.md","hash":"1181becb119dd28d54bf88d4014c44b8e1a544c6","modified":1748401134000},{"_id":"source/_posts/Golang-GC 三色回收机制与混合读写屏障.md","hash":"ee1126e1bd6ae9d4f272aaa7aa49cb8e21846094","modified":1748401134000},{"_id":"source/_posts/Golang调度器GMP原理与调度全分析.md","hash":"a7ffdab222f55d8cb7dbc30ae406663aabd7facf","modified":1748401134000},{"_id":"source/_posts/Go可选参数的使用技巧.md","hash":"a67d81492147c5addd2cfa8776f314c9dc217a6f","modified":1748401134000},{"_id":"source/_posts/Go性能分析工具.md","hash":"dc888ce1b3d41ef9fb10cacc07a194b6feb81e82","modified":1748401134000},{"_id":"source/_posts/Redis分布式锁.md","hash":"bf79a548ecf49e4deb7fc5151f7543d7d549691e","modified":1748401134000},{"_id":"source/_posts/InfluxDB基础概念与应用(一).md","hash":"88676265b947ce18db661db4484a6acd1948afd0","modified":1748401134000},{"_id":"source/_posts/Redis延时队列.md","hash":"20834829f6bc728100c528c73e608b2794d723a1","modified":1748401134000},{"_id":"source/_posts/Redis的基础数据结构.md","hash":"14652609373e5be0269a8a72def26cf6e5c24016","modified":1748401134000},{"_id":"source/_posts/babel.md","hash":"e271307c8f651b526ad4b9c703c819872746c504","modified":1748401134000},{"_id":"source/_posts/blog.md","hash":"981301b6d2518feec6a9a92434576614348410b3","modified":1748401134000},{"_id":"source/_posts/canvas-geojson.md","hash":"ce32a947402cf30eb20a9393b3bb92437a5ed992","modified":1748401134000},{"_id":"source/_posts/canvas.md","hash":"11258767321b672e22dadc2e7250c37fd048c767","modified":1748401134000},{"_id":"source/_posts/celery.md","hash":"37472d8093b2c7d01b6d77cc316330c68d9c7262","modified":1748401134000},{"_id":"source/_posts/cf-wkrs-node.md","hash":"8df5e65099af0766a16a639927017ded35f807bc","modified":1748401134000},{"_id":"source/_posts/code.md","hash":"8ee16b11c6a19e1d2d510dbcc920da1856a42ed4","modified":1748401134000},{"_id":"source/_posts/commitizen.md","hash":"09e6449280a58935df06b2ba246c68058ebc4183","modified":1748401134000},{"_id":"source/_posts/deepseek本地安装.md","hash":"abd816a528a7ef9e37a5b043d58b0db7421cdb22","modified":1748401134000},{"_id":"source/_posts/deploy.md","hash":"909831fbf65213a24214ec94e15f60c1ae1532d8","modified":1748401134000},{"_id":"source/_posts/docker.md","hash":"1ea82ca284cce577efca90e66b457de60f9b0d0a","modified":1748401134000},{"_id":"source/_posts/docker镜像优化.md","hash":"63d42804a1dde94feb144f3d1c4d189dcc58ca4e","modified":1748401134000},{"_id":"source/_posts/frp内网穿透.md","hash":"abb70d966a7152870af6599e971e83976bc9b16e","modified":1748401134000},{"_id":"source/_posts/geojson.md","hash":"900536b4683f252cfa9500c7d174c3c31cf314a1","modified":1748401134000},{"_id":"source/_posts/git-mac.md","hash":"80dacc4be816ab392e5525d909b786a32e5470a6","modified":1748401134000},{"_id":"source/_posts/git-rebase.md","hash":"b8ac8927a6b07bd13c70f0da0f01e17a41d45b21","modified":1748401134000},{"_id":"source/_posts/git.md","hash":"f127d8ec2018c04fbe496fac56e9d4aec375984b","modified":1748401134000},{"_id":"source/_posts/github-webhooks.md","hash":"de1f94772aa0d17d77793a48d646d055e1227179","modified":1748401134000},{"_id":"source/_posts/github-workflow.md","hash":"b908856e16464dcaa9f453f22c57105b312ef846","modified":1748401134000},{"_id":"source/_posts/github.io.md","hash":"19728b1b84a278ca68bfdb2cc93f71d73416117c","modified":1748401134000},{"_id":"source/_posts/go.md","hash":"c05d4aa4d6fdc40d6264cbb288c1c4c803ab9c74","modified":1748401134000},{"_id":"source/_posts/golang-高级函数的使用细节.md","hash":"c9ba778b43117a62c06aa5220c7519448ada00f5","modified":1748401134000},{"_id":"source/_posts/golang中go mod使用解决导包路径.md","hash":"c4bf35d56c17a8349db24fc7494711acc0e6783f","modified":1748401134000},{"_id":"source/_posts/golang反射reflect的使用.md","hash":"eaf1836350086726b0266d907e27cee0f3d7adfa","modified":1748401134000},{"_id":"source/_posts/hash.md","hash":"b56602e25e1704a90a4930ac497b8c352a05dac9","modified":1748401134000},{"_id":"source/_posts/homebrew.md","hash":"52128016ef0af7f265a6b2921a3ef7766b572f87","modified":1748401134000},{"_id":"source/_posts/lerna.md","hash":"bfb6dbc6d0beec6da24082871a9a8e8d1e424eeb","modified":1748401134000},{"_id":"source/_posts/linux-nodejs.md","hash":"e784efcb72e6a7858a88384fda08159343a2b2e0","modified":1748401134000},{"_id":"source/_posts/linux.md","hash":"8f79b6e2bfa935b074d644b0c3d5f9f3b62d98ff","modified":1748401134000},{"_id":"source/_posts/mac安装sshpass工具实现免密操作.md","hash":"a5a5acc9126ab5bd93cf11baab45c65e027f7aa6","modified":1748401134000},{"_id":"source/_posts/nginx.md","hash":"12591cb6080fa18fa5f13276d8d6c211976d6a1b","modified":1748401134000},{"_id":"source/_posts/node-n.md","hash":"bcf51f07697a26dc2ef08680002341c48a533eaf","modified":1748401134000},{"_id":"source/_posts/oauth.md","hash":"8e2f91944356169ea29b5900146cdea6112a569c","modified":1748401134000},{"_id":"source/_posts/pm2.md","hash":"f5438f66467418f69815d61efae8751f6c589e5a","modified":1748401134000},{"_id":"source/_posts/regexp.md","hash":"6d790c76fda6d011a69bca1cc2594799107f58a5","modified":1750745258679},{"_id":"source/_posts/serverless-devs.md","hash":"6497d0b7a1988e90ef263275507625ef8baf7d6b","modified":1748401134000},{"_id":"source/_posts/postgres安装教程.md","hash":"12bdc933f725784ea0cd814d6913593d3700fcd1","modified":1748401134000},{"_id":"source/_posts/switch.md","hash":"4343c0a03f2a55c5236b8cb4600320c6cb0f103f","modified":1748401134000},{"_id":"source/_posts/singularity.md","hash":"f4f67aa868d3161df8c19f1a1bb76d20d573ff29","modified":1748401134000},{"_id":"source/_posts/translate-go内存模型.md","hash":"3029d6cf70623b8c1e683b778f29143c7833c3cd","modified":1748401134000},{"_id":"source/_posts/webgl.md","hash":"181209308eaebe19994b9fb076d1ecac9ef2fe1f","modified":1748401134000},{"_id":"source/_posts/ubuntu20.04.md","hash":"15ec3e81264d2a3dcc542c232dbd0d3ed43f8436","modified":1748401134000},{"_id":"source/_posts/从大语言模型到 LangChain.md","hash":"b46fc6cf19ab3aa583b3e634ccbb901373b77f52","modified":1748401134000},{"_id":"source/_posts/初窥MCP.md","hash":"886cecb185e6493220e3346bdbe35718a3625a4b","modified":1748401134000},{"_id":"source/_posts/双栈实现一个队列.md","hash":"cf5d2318346ee39706d93803b8d668ead5068f47","modified":1748401134000},{"_id":"source/_posts/图床-七牛云和gitbub使用.md","hash":"d28a736b4b7f0b59d223012f2ef37aab61232fbe","modified":1748401134000},{"_id":"source/_posts/将有序数组放入到二叉树中.md","hash":"7fa4f2063cdcd2779b20a2c62278423560450b8e","modified":1748401134000},{"_id":"source/_posts/并发常见问题.md","hash":"ad35169382d5798d5267c3f9cb671d2cfae4137d","modified":1748401134000},{"_id":"source/_posts/并发性能测试工具Jmeter的使用.md","hash":"70d9118df6519540e7aa75fde12af86a82fa4ea1","modified":1748401134000},{"_id":"source/_posts/快速搭建静态文件服务.md","hash":"a74061d7181c07497f4e740a66620de3755cd6c8","modified":1748401134000},{"_id":"source/_posts/求最长公共字串及其起始位置.md","hash":"c360de8c3d3cb35f7cf6ef2f07794074a46d508c","modified":1748401134000},{"_id":"source/_posts/设计一个有getMin功能的栈.md","hash":"e49ec1d4928cbb6ef46644bcfa631049af33c845","modified":1748401134000},{"_id":"source/_posts/递归实现栈逆序.md","hash":"5b2bca9d0585dcfdbd6207b65ca3973420a3fc45","modified":1748401134000},{"_id":"source/_posts/零工经济的崛起.md","hash":"589fc10e9fa560d48ec51a36d82c0c25f61a53a7","modified":1748401134000},{"_id":"source/img/avatar.png","hash":"a86cda98d5bc02e86f94c2ac48bfa0769be9019d","modified":1749017674272},{"_id":"source/img/avatar-regex.png","hash":"3a6daf9a6133b55707303186166bfa0f61371238","modified":1748401134000},{"_id":"source/img/blog.png","hash":"574a3c21f824f3592ec596af128c2c381b26eb44","modified":1748401134000},{"_id":"source/img/canvas-china-demo.png","hash":"90a109dee9dca864cdd9b3d354d2d011152a1012","modified":1748401134000},{"_id":"source/img/canvas-circle.png","hash":"a8e588b86ca4f719914ccce939e92ee824d66c4b","modified":1748401134000},{"_id":"source/img/canvas-grid.png","hash":"c1dd970806c3eff3e55aceaddbd6f9af4e4a655f","modified":1748401134000},{"_id":"source/img/canvas-line.png","hash":"12fb79ef5533a3cc5d71badbc09adf938986aa0e","modified":1748401134000},{"_id":"source/img/canvas-point.png","hash":"802302e483c5ea1b5253a3ac8900481ce4e82ce7","modified":1748401134000},{"_id":"source/img/canvas-rectangle.png","hash":"45989b0b2f0467ec604bae85f35d352add57b0fa","modified":1748401134000},{"_id":"source/img/canvas-text.png","hash":"09fb729d09129b6eacdb4fd203d2d1dc1a7c7ca8","modified":1748401134000},{"_id":"source/img/canvas-triangle.png","hash":"cc6e36a6d2d2b90c3fcfe6830bb8128cfc2c51db","modified":1748401134000},{"_id":"source/img/canvas.png","hash":"8a085cdd2f57c2d0a60139c287b7790697cef604","modified":1748401134000},{"_id":"source/img/celery_512.png","hash":"b833973e834aa1ae4539a17daf1fdc63f64bb0f1","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-9.png","hash":"f20c32166b0b51afc2e8003eb59128c0d32ca650","modified":1748401134000},{"_id":"source/img/cf-wkrs-node.png","hash":"4668fdacb1220af8dfb9d05e17bb556e9e9a3147","modified":1748401134000},{"_id":"source/img/code.png","hash":"f3cb5d8f34b6bca192235ba457361148271ba670","modified":1748401134000},{"_id":"source/img/commitizen-0.png","hash":"4d045a416afb4765742b18e65c19fea4a89249d6","modified":1748401134000},{"_id":"source/img/commitizen-avatar.png","hash":"8c5fd84624a8c8b87ad295dd332d4004d628028d","modified":1748401134000},{"_id":"source/img/cover-ast.png","hash":"802964a966ec3312b2d5c3a876f73a21a985732e","modified":1748401134000},{"_id":"source/img/cover-blog.png","hash":"9d4b7fec6ef089322d561d428a69cbfa2d89e0c3","modified":1748401134000},{"_id":"source/img/cover-docker.png","hash":"3f4ea8b4bf3b1c5f65a0ed96ca62b936d1d95dcc","modified":1748401134000},{"_id":"source/img/cover-github-webhooks.png","hash":"2bcebbf0a984ab98f93f82435b11f7377462e417","modified":1748401134000},{"_id":"source/img/cover-n.png","hash":"d6146e97c5eb4691b3b6d23da76afa68f040b207","modified":1748401134000},{"_id":"source/img/geojson.png","hash":"3a0c8d17457b1509a185d9ad737676031d405482","modified":1748401134000},{"_id":"source/img/git-mac.png","hash":"072214a1469f2df79870489e63aa44f23adbd8b3","modified":1748401134000},{"_id":"source/img/git-merge.gif","hash":"04f48ed0b79dd753d21f9983b07c5ed119afa9c3","modified":1748401134000},{"_id":"source/img/git-rebase-cover.png","hash":"c2948efd9f8c6b27b695003961ba2750e036e0a1","modified":1748401134000},{"_id":"source/img/github-action.png","hash":"cfa29dd23d8d8c84c46fbbd701e68dd3c85a4034","modified":1748401134000},{"_id":"source/img/github-secret-ssh.png","hash":"21de870476134f2ca3ee1bad5a1919c9b9edc415","modified":1748401134000},{"_id":"source/img/github-workflow.png","hash":"29a4012d49bfad285d6bbcea1c89e7793c3151c9","modified":1748401134000},{"_id":"source/img/github.png","hash":"778a3ed8febda0d4ed1620675a5b912a612a787a","modified":1748401134000},{"_id":"source/img/golang.png","hash":"ee7d6741222567743cb0d958a11cc2d355a2caec","modified":1748401134000},{"_id":"source/img/hash-1.png","hash":"5cf2cd0d68d42763dfdb68a58b6b1d3be9fb9c33","modified":1748401134000},{"_id":"source/img/hash-2.png","hash":"2b4698c259f9a68039ec0de0339ac08f2cc7c9a9","modified":1748401134000},{"_id":"source/img/hash-3.png","hash":"697b32246b24cd48ea5be2a89e3948e1fc23d4e9","modified":1748401134000},{"_id":"source/img/hash-4.png","hash":"dd8ccaff184144d9e81d8fa446bf076148dd218d","modified":1748401134000},{"_id":"source/img/hash-5.png","hash":"0a6b8b60b54aa891ca2434d04c14bd2349523833","modified":1748401134000},{"_id":"source/img/hash-6.png","hash":"f2eef993bcebee0370141c86b38d3542230daddc","modified":1748401134000},{"_id":"source/img/hash-7.png","hash":"d364b484bba82e36e0d5556d16a16639eeac3b4d","modified":1748401134000},{"_id":"source/img/hash-8.png","hash":"e27d7cd819b7fc05d20dee7fae50410df5606aa7","modified":1748401134000},{"_id":"source/img/hash.png","hash":"2991cabfac800157879368cbd92762c3e448fcaf","modified":1748401134000},{"_id":"source/img/hexo-server.png","hash":"c4805a1e1de2794845239e22523a03b1d9c64f61","modified":1748401134000},{"_id":"source/img/homebrew.png","hash":"1b59832e5a5cb3c343b1114d1be8456043ca716e","modified":1748401134000},{"_id":"source/img/lerna-publish.png","hash":"c66cd936056719bee8a7710b15ec585c1311cc22","modified":1748401134000},{"_id":"source/img/linux-node-1.jpg","hash":"1b22bc4f3fbcaa2281b0f822bc63cafc5763bf09","modified":1748401134000},{"_id":"source/img/linux.jpg","hash":"87375ca580ff89d295d15d32655af9dd7348eb5e","modified":1748401134000},{"_id":"source/img/mcp_scenarios.png","hash":"1a64f2275508e50b0a935e0c29a32c07bed24414","modified":1748401134000},{"_id":"source/img/my-divination.png","hash":"588128bd63df5ee3dc91af460941a552a682a4e7","modified":1748401134000},{"_id":"source/img/napkin-logo.svg","hash":"f1a25dc8d2240b8c3c9c1c2887d19bf0af0e00d8","modified":1748401134000},{"_id":"source/img/n.png","hash":"e4154238269937fa4cbea612ca09cbe9ba5f1652","modified":1748401134000},{"_id":"source/img/ngrok.png","hash":"b138c06df5dd1812c7cfa8617376b545c5dfad96","modified":1748401134000},{"_id":"source/img/node-git-version.png","hash":"5f9d26f78582a7cfd095a55800625cbf33b6085c","modified":1748401134000},{"_id":"source/img/npm-add-username.png","hash":"57e4552bd023598207eefedda04b0addf813a518","modified":1748401134000},{"_id":"source/img/oauth-app.png","hash":"982ba11648295f1620e06a4e81e78a633061d129","modified":1748401134000},{"_id":"source/img/oauth-cover.png","hash":"b1c80be1b114568f1b16911927c1b11c440f114b","modified":1748401134000},{"_id":"source/img/pm2.jpg","hash":"ad065fe88af074a5c52bc1d9d216fa9dbfbaac22","modified":1748401134000},{"_id":"source/img/shell-code-success.png","hash":"68e1a9cfcfba39bacfc302968fafdeba5914dd95","modified":1748401134000},{"_id":"source/img/shell-code.png","hash":"0314e718c4177d9bd8a8a61f8c86e0fb6fe2256c","modified":1748401134000},{"_id":"source/img/singularity.run.pyhton.1.png","hash":"e6e75282e8284906e25d9b774fbf5ac7c4f8cbf2","modified":1748401134000},{"_id":"source/img/ssh-key.jpg","hash":"269f8bef939b542ed0f5d72f60b54658ee23f01d","modified":1748401134000},{"_id":"source/img/switch-1.png","hash":"e82b5273ae736fdee6f82fc4463e01befb9df7e3","modified":1748401134000},{"_id":"source/img/switch-3.png","hash":"e05431cd539c785ea4c803d61b1a16988f83b243","modified":1748401134000},{"_id":"source/img/switch-guaishou.png","hash":"78350740a784d73285dcd3238d0d5d5e7838fbc8","modified":1748401134000},{"_id":"source/img/switch-feiji.png","hash":"3659f6231fa3afdb095636a8748b68f574ecec8f","modified":1748401134000},{"_id":"source/img/top-artical.png","hash":"1ceeec2791786c37623d01f2c0dca77ed077177a","modified":1748401134000},{"_id":"source/img/top-category.png","hash":"bff609dbaa3a4e4d36987dcdda37c101b8ef9e53","modified":1748401134000},{"_id":"source/img/top-tags.png","hash":"38a6e82f8e5c2f590ddf66af10ee7464f93f94cb","modified":1748401134000},{"_id":"source/img/ubuntu2004.png","hash":"55648f9a5d19304a5a09e7dbad2f55307ffdbded","modified":1748401134000},{"_id":"source/img/webgl.jpg","hash":"cbbb65732beb27b5cac2fdb600916b684184c854","modified":1748401134000},{"_id":"source/img/ubuntu-nginx.png","hash":"2297b506b967c7b4800c5327551563b92ad1d3f8","modified":1748401134000},{"_id":"source/img/软件架构设计与生命周期.svg","hash":"3b964c0bc4599e21486979d8f02eece6a15ca963","modified":1748401134000},{"_id":"source/music/index.md","hash":"4951a1e33174c956c48d31ffdea2aaaeb33020bd","modified":1749623044086},{"_id":"source/tags/index.md","hash":"dad8380bbb704924f901dfdfd146cab1ef280efc","modified":1749021838582},{"_id":"source/img/canvas-china.png","hash":"4bd6344a3e80ccb435b62e7e78b3294dce115623","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-1.png","hash":"4c779b350b06900326029ff6a48be789655fbdf8","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-11.png","hash":"5129635964ac713108abb8c8a7b8ffbc0db15ca1","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-2.png","hash":"e113c46b437b83957fc9a7048e6a15952388375d","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-8.png","hash":"7860ca7be02358f587a522fe67afe49ccc5a241b","modified":1748401134000},{"_id":"source/img/commitizen-1.png","hash":"705765c14de3e64c728e58251e8b150772fe4e2b","modified":1748401134000},{"_id":"source/img/commitizen-2.png","hash":"b167bf4baedc92344f025b23d025fee9ffb1d2f1","modified":1748401134000},{"_id":"source/img/cover-lerna.png","hash":"d903950d83af8fcb4a35bd48363f03168d88a2be","modified":1748401134000},{"_id":"source/img/deepseek-vs-OpenAI.png","hash":"a5fd23445bd855a843ad5cbdcd798483231dcd07","modified":1748401134000},{"_id":"source/img/deepseek.docker.png","hash":"2a9f1e666cd4763113e0de6ddcbdbda5d9a1998d","modified":1748401134000},{"_id":"source/img/deepseek.settings.png","hash":"d125267aaec5a11f2dc6809fb4d661498cd886f8","modified":1748401134000},{"_id":"source/img/deploy-dns.png","hash":"be09fc8c8115ef7eb98979e8a6330ca0839c423c","modified":1748401134000},{"_id":"source/img/dk-github-webhooks.png","hash":"d22647def2c8582e63450d674501dd1d888fa5ea","modified":1748401134000},{"_id":"source/img/dns-record.png","hash":"1b3638a1280bb367182dd49251cd2d9b088207f5","modified":1748401134000},{"_id":"source/img/dns.png","hash":"98044e06b8838313ccdaa21dc4456409de2a196e","modified":1748401134000},{"_id":"source/img/git-avatar.png","hash":"737f26aac596a179b5b83f23628a405c3b826934","modified":1748401134000},{"_id":"source/img/github-webhooks-trigger.png","hash":"71bcbc7a8e7fc9782bd7d0936551a7ac76080cc9","modified":1748401134000},{"_id":"source/img/github-webhooks-add.png","hash":"87c67c1a00e891f93deb36a7c48770160f31d189","modified":1748401134000},{"_id":"source/img/hash-9.png","hash":"af5da7b68976e682543e76f454a145a306b63cee","modified":1748401134000},{"_id":"source/img/hexo-deploy.png","hash":"20592b6d304737f14957d3415d6d297f683df056","modified":1748401134000},{"_id":"source/img/lerna-create.png","hash":"c7431b66ce97205607edfe6834e16b1afae25fdc","modified":1748401134000},{"_id":"source/img/loading.gif","hash":"f3ed6ebb365ad368e2e60baa4c497960b7ffec24","modified":1748401134000},{"_id":"source/img/macbook-01.png","hash":"41f4c9c009f9358536c59c262a0602a643e212d1","modified":1748401134000},{"_id":"source/img/my-squoosh.png","hash":"66b85b8654148b68272429a11e1e060cb4861821","modified":1748401134000},{"_id":"source/img/npm-add-organization.png","hash":"d826b0fc072af49dfae28e54bc6a5d15f9361382","modified":1748401134000},{"_id":"source/img/npm-home.png","hash":"a020640f1569d34b6b6d676b16ccf802bc7fb567","modified":1748401134000},{"_id":"source/img/oauth-github-app.png","hash":"c597ba929300e2a55b6834e982f150393b4e31f7","modified":1748401134000},{"_id":"source/img/pageAssist.png","hash":"4469250f5959f286765e1367f49de55a6702d75e","modified":1748401134000},{"_id":"source/img/racknerd.png","hash":"1cb07f27fc57dd8ef5d90445ab0b56f57204b105","modified":1748401134000},{"_id":"source/img/singularity.run.2.png","hash":"64bc37a542fef70416417fcfc4e53cf21a462f61","modified":1748401134000},{"_id":"source/img/ssl.png","hash":"5de5b146c5e0ec3de0417e8b8c30011ee5ccb7f2","modified":1748401134000},{"_id":"source/img/static_file.png","hash":"d4f7c075336ded3a4b5676fc0839314b8e18a283","modified":1748401134000},{"_id":"source/img/switch-4.png","hash":"35db93064abfdeb69546e6e22444e4de3d363cf7","modified":1748401134000},{"_id":"source/img/oauth-1.png","hash":"450f8e0767fb5bbdea4584a6c45296c5c2373551","modified":1748401134000},{"_id":"source/img/top-index.png","hash":"2616138bb939e929d67b517701724a0c929a8097","modified":1749622555690},{"_id":"source/img/top-tag.png","hash":"ff0f439da47944e54a1a91601658ec439bc97c14","modified":1748401134000},{"_id":"source/img/LangChain框架.png","hash":"e6e08d5bc3f37f82f7603b3a8c1280f146e20c11","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-3.png","hash":"7b1e09abdcb91c144aed9d2bbcf3400992119378","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-4.png","hash":"105ef53b4de6a07043ea1b23196c5bef9d738992","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-5.png","hash":"ff20bd5966b05fbdccd7d05cf5cdd73bfeb217b8","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-6.png","hash":"203c7810965ed318b27a809239bea320c2f63fc8","modified":1748401134000},{"_id":"source/img/deploy-cover.png","hash":"05db2eff87a7aaaab8b29ddac37e6d3fe02ca47a","modified":1748401134000},{"_id":"source/img/deploy-domain.png","hash":"bc2db7a732ba531f8a9c769817f1e83e20a8dadc","modified":1748401134000},{"_id":"source/img/deploy.png","hash":"a5052c3134b121e3ab7db14b4170113ff0638625","modified":1748401134000},{"_id":"source/img/git-rebase.gif","hash":"eb9ddfc624ec1edcdab30c6d6cdfbe8f06ca0a43","modified":1748401134000},{"_id":"source/img/mcp_with_chat.png","hash":"fffa3a414e0013a052e849219f8e9467341eeb95","modified":1748401134000},{"_id":"source/img/ollama.anythingllm.png","hash":"31c803c7c3a2caeb49bf40dd5a56ed776b0757a7","modified":1748401134000},{"_id":"source/img/canvas-animation.gif","hash":"c86745e5b51cda7de315aaa455c97541faf1a8eb","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-10.png","hash":"6c971184c9293eb5187eacbf830f396ae80cb6a0","modified":1748401134000},{"_id":"source/img/cf-wkrs-node-7.png","hash":"e428461ec809f6e3116ddcf80fa1afc68a8f6f29","modified":1748401134000},{"_id":"source/img/frp.icon.png","hash":"7bd743e09f4af5f20a1b017950951047593185e7","modified":1748401134000},{"_id":"source/img/singularity.icon.png","hash":"62c8cbd0b837198896fa3a490d378029c68f8ead","modified":1748401134000},{"_id":"source/img/switch.gif","hash":"fedbfb2558947f02ec022d184974e33b45282233","modified":1748401134000},{"_id":"source/font/Pacifico-Regular.ttf","hash":"baca1fca7fe74b61cb33aa0da48ec1a3a77bcf49","modified":1748401134000},{"_id":"source/img/my-blog.png","hash":"a5b67b4edee0ec98215a411557fbf1833df65728","modified":1748401134000},{"_id":"source/img/my-twitter.png","hash":"e6861a635614368336ef738f14ad4eab95378be1","modified":1748401134000},{"_id":"source/img/top-default.png","hash":"a9f7909ca86049dd002e524ee95f4decd741f5fe","modified":1748401134000},{"_id":"source/img/linux-node-2.jpg","hash":"fb8e80856b3fb2329e73aa0370cf93d591ab0a6a","modified":1748401134000},{"_id":"source/img/yijing.png","hash":"f06ca6084ea5bd776856d275e0e10149ee5bed34","modified":1748401134000},{"_id":"source/img/ri_20250306_mlj001.png","hash":"42fc94b4a74f0f61675abacb0a83c64bbf4bc7b5","modified":1748401134000},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1749021838583},{"_id":"themes/butterfly/README.md","hash":"ca4dc1c20397a4e0be2fc0eff6691b38db081563","modified":1749021838583},{"_id":"themes/butterfly/README_CN.md","hash":"d2a6f8ea7f6b6a22a7d23b2c69dab10539a5e861","modified":1749021838583},{"_id":"themes/butterfly/package.json","hash":"22a6f6c0003cffa9c62e1867fc20e4ec0478b9ff","modified":1749021838595},{"_id":"themes/butterfly/_config.yml","hash":"f9367b43742219541f1f1f9c822d32046ddab12e","modified":1749641537877},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1749021838584},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1749021838584},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"fa18fa6e23c695b0ba47a64dcbde8b366f5b0468","modified":1749021838584},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1749021838584},{"_id":"themes/butterfly/layout/404.pug","hash":"def6b20a33b69f1be87a750a15a34c305d331a67","modified":1749021838584},{"_id":"themes/butterfly/layout/about.pug","hash":"c465e78c1417c686a683d58760cfeff7f1cecd8a","modified":1749021838584},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1749021838585},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1749021838584},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1749021838595},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1749021838595},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1749021838595},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1749021838585},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1749021838585},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1749021838595},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"b0786e4b08231d178b8484e6c5cf01c22633612f","modified":1749021838587},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"bff5ed7e56cce3cd540da40d971393fe7e93085c","modified":1749021838585},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"1dc5c4eebd94cc169853df5848049604d631427a","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"2d62f88f049c907ee2e63ba275b398e87bee98eb","modified":1749021838589},{"_id":"themes/butterfly/scripts/events/404.js","hash":"5f6127ede7d139891208340b5cf5bf9314e4be7d","modified":1749021838595},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1749021838595},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1749021838595},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1749021838595},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1749021838596},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1749021838596},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1749021838596},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"87cefb7d6235744a2448e70df9061c1700169ad6","modified":1749021838596},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"7dd77f751f5cc8c4fe30475a52df632dd85ce49a","modified":1749021838596},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1749021838596},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1749021838596},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1749021838597},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1749021838597},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1749021838597},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1749021838597},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1749021838597},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1749021838597},{"_id":"themes/butterfly/source/css/index.styl","hash":"f02c24b5847e618f9302a7b37deeb7f9f618bed8","modified":1749021838603},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1749021838603},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1748401134000},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1749021838603},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1748401134000},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"15a58c7b3bd913859362bc4627fc342d2e2dccfd","modified":1748401134000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1749021838605},{"_id":"themes/butterfly/source/js/utils.js","hash":"ba7e672a7bed2aefb9174e8122d92a643814272a","modified":1749021838605},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1749021838585},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1749021838585},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1749021838585},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"2913737dc8e3d9d63c22bec637d40c7bced85bfb","modified":1749021838585},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"2eb761a5ed4b0da71ca22c9f00aaf0ee528c14ef","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1749021838586},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1749021838587},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1749021838587},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1749021838587},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1749021838587},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"3e9c45aa4e97650bb8c19fe7c6c0e096a826f95d","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1749021838588},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"c258bc0bd91ba09120b82e76cf3b889cdb8fc904","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"2908b1efb08e23a4ab636f4715ed3b52af2692c0","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"2d8f2ec9c68a65c66793629a59a87e32def22b92","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"cabf9ee6a2886e6ede17f224dfbb161a9b1258e7","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_self.pug","hash":"8318c7c9a6aef966afba44e283111e7ff0b2f04f","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1749021838594},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1749021838595},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8c5b241773597a412dbf3ebaca1f0bf504934a33","modified":1749021838595},{"_id":"themes/butterfly/source/css/_aplayer/index.styl","hash":"19541d78d3957e70f0184136c920642331f790c2","modified":1749021838598},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"349275aab28286f41e5aa709f07dba7d43ddba0e","modified":1749021838598},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"9f3ebf246be94a4f5c1a617f464ec47164741824","modified":1749021838598},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a0e5790eb82b8f551f4161b72f1bec29a4e501be","modified":1749021838598},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1749021838599},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"7730741fa8beb29e3231d397171f312957563e7b","modified":1749021838599},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"5c97a6e72d2597a23c32e64e1c4858c9a716713d","modified":1749021838599},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1749021838599},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1749021838599},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"c9b88388fcb4d8c18074be074bc23829c57a1b5c","modified":1749021838599},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"7e54b6a3c13ee5676a854884e941e00e9f193fcc","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"f5128cd7a435c2c743fac57cb00196f4b2f42b1d","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"78ef182c0f6711c8491a8ee421b708c8f2a63c30","modified":1749021838600},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"257f08063d056bcc9fe385d7913df19b6503d93d","modified":1749021838601},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"b692bd601d80fe1180c253d9edfcb2a96968c313","modified":1749021838601},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"5cc0a4e5c1c063c2d5cc17bfd6ba61825f6a25d6","modified":1749021838601},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1749021838601},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1749021838601},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"ab403bfb1abc12ea5015b123ce412d3177e638d9","modified":1749021838601},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"05269a522a7248d9a77569331481cbe18033c774","modified":1749021838602},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1749021838602},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1749021838602},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"a470029a157fbb8406ff72322a75ef63d6675431","modified":1749021838602},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"202b01db6ef3cca9e5a173e1a0dadfee8854a849","modified":1749021838602},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"92aa84cdec97729c86ba4674a355496eb37c986a","modified":1749021838602},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1749021838602},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1749021838602},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1749021838602},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1749021838602},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1749021838602},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1749021838603},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1749021838603},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1749021838603},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1749021838604},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1749021838604},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"e8dec6fc24af46c4733681a3a25ad8eaad0e8e1a","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1749021838589},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"03a8937c60403252d33bacea947e252e5007eac8","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1749021838590},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"5e85ef16b881cacc9f401c2a20d69a70ad1bd3e2","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"6f92311afe60ca5f44055016db9cecce8fb2dc62","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"407d88e4af099d5f1a3f44623ec276c999219ec3","modified":1749021838591},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"70125dc478ae20d5f6b4b908260fdc451d803c6c","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"35278cfc2dbd92457b1e558b20fcd994eb81259c","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"7935e92db64ca047d94404e5fc390a207e857a87","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"e4f11ee6b2bce37f7a88b2642ff0079e7d98f26f","modified":1749021838592},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1749021838593},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1749021838593},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1749021838598},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1749021838598},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1749021838598},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1749021838598},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1749021838598},{"_id":"themes/butterfly/source/js/main.js","hash":"f55c682e17ba3c901a4aca9c8947e9902e248a02","modified":1749021838604},{"_id":"source/img/my-github.png","hash":"6126057b7750c7f5af93c0425f6df6fc274159bb","modified":1748401134000},{"_id":"source/img/mcp.png","hash":"d70254bbae850902626f241c916f4ff05555ad45","modified":1748401134000},{"_id":"source/img/LangChain-from-zero.png","hash":"ec8a64a8f5beea7e44a5fa21c03dbc2bd5bbfad7","modified":1748401134000},{"_id":"source/img/jj2.png","hash":"71311915c822f366a5787ecae9a93509b683a7b6","modified":1748401134000},{"_id":"source/img/jj.png","hash":"eb6941c85c5d9063f38213c017cbcee0c32c3502","modified":1748401134000},{"_id":"source/img/switch-2.gif","hash":"dff7c92f00c260e620a8618782d91df8eb66c704","modified":1748401134000},{"_id":"source/img/switch-5.gif","hash":"c8dede0016b9f20ab8f0fda1474f19f655190d18","modified":1748401134000},{"_id":"source/img/commitizen-3.gif","hash":"c15f8a930c8f4cca6613be5f216cbea6ebc11de0","modified":1748401134000},{"_id":"source/img/switch-6.gif","hash":"40f1b24a568bbd68440a6874be2e6c0a31d46c32","modified":1748401134000},{"_id":"public/css/fps.css","hash":"a4827c1ddb3005bed59fa079750a97fef739d6b1","modified":1749026336584},{"_id":"public/search.xml","hash":"898f6945022bc623cc24089a8d200a419f7d71ed","modified":1750996045012},{"_id":"public/404.html","hash":"f1783d09e63dffd8a1a6deff2e84052738e0bb78","modified":1750996045012},{"_id":"public/about/index.html","hash":"170d593e4a84026f4dafde6fe9d0fb6e14a2210d","modified":1750996045012},{"_id":"public/categories/index.html","hash":"086e98b7f505ae12b722cafbd6f3463244d76067","modified":1750996045012},{"_id":"public/tags/index.html","hash":"7fe24ee3d72ef4c388d1275059a7dc1028df9744","modified":1750996045012},{"_id":"public/music/index.html","hash":"de4dbd19e1adbb9a7b8e482859e98a2804616f37","modified":1750996045012},{"_id":"public/2025/05/25/从大语言模型到 LangChain/index.html","hash":"13f61bd7e0c930106e497e244079007513adf4fd","modified":1749018223170},{"_id":"public/2025/04/15/零工经济的崛起/index.html","hash":"ced050062e290e783f84458abe0a54e077b59815","modified":1749018223170},{"_id":"public/2025/04/08/初窥MCP/index.html","hash":"89600516d7db31d4d80c9b79f38cd8831fad4969","modified":1749018223170},{"_id":"public/2025/03/26/AIToolsSet-Napkin实现文本可视化/index.html","hash":"38c8dde513ddcbf2e15989c7955e4536fd494374","modified":1749018223170},{"_id":"public/2025/03/06/20250306_日记_梦搂记/index.html","hash":"b225dd858270aaa2a2db0140461be59cbccaafae","modified":1749018223170},{"_id":"public/2025/02/05/deepseek本地安装/index.html","hash":"688712af45102c1f87e1d75b8a8292e68d65ab32","modified":1749018223170},{"_id":"public/2024/11/06/singularity/index.html","hash":"617f3708ca837b0eca8d19d17f394f38385150d4","modified":1749018223170},{"_id":"public/2024/10/24/frp内网穿透/index.html","hash":"f81fa39c0e3bdcc562b0d7c2070ec1e305edb2e7","modified":1749018223170},{"_id":"public/2024/10/22/快速搭建静态文件服务/index.html","hash":"b7d2f48b59d4794b66fa338808b03eed547e023c","modified":1749018223170},{"_id":"public/2024/10/20/git/index.html","hash":"31e69e1b6e7a0591f8838b947b010e7310c37c8d","modified":1749018223170},{"_id":"public/2024/10/19/celery/index.html","hash":"1d0a8b3ae5dc55357c8aecadc157af54fce7ec8d","modified":1749018223170},{"_id":"public/2024/10/19/docker镜像优化/index.html","hash":"74e50e05a72c370e79a357579ffbcc1d77d9fb90","modified":1749018223170},{"_id":"public/2024/09/26/docker/index.html","hash":"d644d797e8dacc8d760c10b2d09b22a4b251ee6d","modified":1749018223170},{"_id":"public/2024/09/20/hash/index.html","hash":"a7a1836038183bbaca8555b39055df9592c930a2","modified":1749018223170},{"_id":"public/2024/09/06/go/index.html","hash":"c89a07a0f36337d7031a6bfc1cbc125e3860cefd","modified":1749018223170},{"_id":"public/2024/05/06/node-n/index.html","hash":"2510704ad23eef6abf7ef1cb64d68fd96d1b15af","modified":1749018223170},{"_id":"public/2023/11/28/pm2/index.html","hash":"703212a7d5a91048dee4dae7d1042a421f1f04dc","modified":1749018223170},{"_id":"public/2023/11/27/linux-nodejs/index.html","hash":"4bffddf3286a5dd85b0ffd34090028050a16f615","modified":1749018223170},{"_id":"public/2023/11/26/linux/index.html","hash":"d8a599ca2a55e4c7397a667bd495e976e46bbbc4","modified":1749018223170},{"_id":"public/2023/10/27/cf-wkrs-node/index.html","hash":"06c8f9e4a2fc01f4cd9b75c72536050ca8f4250e","modified":1749018223170},{"_id":"public/2023/10/24/ubuntu20.04/index.html","hash":"1f7263a017914b8097199eec15d35409935fe1d6","modified":1749018223170},{"_id":"public/2023/10/10/geojson/index.html","hash":"a76ce50a641930339fd1723e97a25952864852f7","modified":1749018223170},{"_id":"public/2023/10/08/canvas-geojson/index.html","hash":"246100921fb6fc04fbdd21f929434a8a74b1e176","modified":1749018223170},{"_id":"public/2023/09/28/canvas/index.html","hash":"19adc33de12a796fff5e99c3c4d7f46e2d3af2a6","modified":1749018223170},{"_id":"public/2023/09/22/switch/index.html","hash":"791d72f3592f18b67484e77dffd1c9f8accd92f1","modified":1749018223170},{"_id":"public/2023/09/07/github-workflow/index.html","hash":"f2b0ad104e1038bd26d8b8c2705a6001b56ec98c","modified":1749018223170},{"_id":"public/2023/09/02/blog/index.html","hash":"e75b7c4948483fdfe16a702557f971ca3aa82dff","modified":1749018223170},{"_id":"public/2023/06/02/webgl/index.html","hash":"7575b0c86d7dcf0f25af6cfdf915132a9347d404","modified":1749018223170},{"_id":"public/2023/03/25/git-mac/index.html","hash":"d09a11329d025db741ccb106113a2fd4c2b04adb","modified":1749018223170},{"_id":"public/2023/03/25/homebrew/index.html","hash":"00acde8c6d2688e6b12f40f5437efae602250d8c","modified":1749018223170},{"_id":"public/2023/02/14/nginx/index.html","hash":"8396c7a4d2b50289959780693134971d0dfa808b","modified":1749018223170},{"_id":"public/2023/01/26/code/index.html","hash":"3ac9d4f2c8a3a33d6b5558bb0f05c36519ff9377","modified":1749018223170},{"_id":"public/2022/12/29/git-rebase/index.html","hash":"fa89b09f4a1726fb39b088ea83b80d55772bcbc8","modified":1749018223170},{"_id":"public/2022/05/31/oauth/index.html","hash":"e210327c64940ef3eb88eae045c696bc8bec5ff3","modified":1749018223170},{"_id":"public/2022/03/16/serverless-devs/index.html","hash":"b20254ec522f03dcd22a8794c59f0a916aa3c9c9","modified":1749018223170},{"_id":"public/2022/03/02/regexp/index.html","hash":"354ab0d21686c7ebc101a986f0cc53fc11dc3ebf","modified":1749539558930},{"_id":"public/2021/08/12/github-webhooks/index.html","hash":"f012492422de44a0dfdbb6875fcb51b373d281ce","modified":1749018223170},{"_id":"public/2021/08/10/babel/index.html","hash":"1ff09b620ba1f96bdfc3aee82614619fb6a3032f","modified":1749018223170},{"_id":"public/2021/06/09/commitizen/index.html","hash":"ea371fb98b5eedfd7448511bc88680822fbc84be","modified":1749018223170},{"_id":"public/2021/06/02/lerna/index.html","hash":"01b580fe5b38947d3004acb808ecc0dcd2645c99","modified":1749018223170},{"_id":"public/2021/06/01/2.位运算操作-取反/index.html","hash":"e95562172ab0e85e7f33521c8aa137eb501641ee","modified":1749018223170},{"_id":"public/2021/05/05/deploy/index.html","hash":"d1b13bbdc33b557ecc4cf01f7b5110ef4169ea57","modified":1749018223170},{"_id":"public/2021/05/04/mac安装sshpass工具实现免密操作/index.html","hash":"5227c110971c78e672cb5fce34ef19a8bf2584ed","modified":1749018223170},{"_id":"public/2021/04/26/github.io/index.html","hash":"26bb57497479269ad2e83d7a1341511962e79b9d","modified":1749018223170},{"_id":"public/2021/04/24/1-Kubernetes一主二从集群搭建准备工作/index.html","hash":"1b3be9415207177e1fcf8d86f24e24c453155251","modified":1749018223170},{"_id":"public/2021/02/19/translate-go内存模型/index.html","hash":"467c7bce003f2844babe07930fc6f1fc42bdbdea","modified":1749018223170},{"_id":"public/2021/01/19/Go-IoC与委托/index.html","hash":"e8ac161f0cf504ac32c44f54a9c4885ff4a2a8db","modified":1749018223170},{"_id":"public/2021/01/17/Go-模版方法模式/index.html","hash":"1e3682e2779adfcbf487f3a2fc8ba3c2446f37d7","modified":1749018223170},{"_id":"public/2021/01/13/Go-设计模式-门面模式/index.html","hash":"a8fbd6d799256af8e86c13435137206a6b8ae946","modified":1749018223170},{"_id":"public/2021/01/07/Go性能分析工具/index.html","hash":"1628e01ed04eafac38d907e82b89342431382d62","modified":1749018223170},{"_id":"public/2020/12/24/Go可选参数的使用技巧/index.html","hash":"c21a6e2bdf6741cd25e782051cdfefca45b21ae3","modified":1749018223170},{"_id":"public/2020/12/16/Go-chapter1-gRPC概述与发展/index.html","hash":"ae29c64466cefa4d0ac1ff998978be3ff5e8a0c9","modified":1749018223170},{"_id":"public/2020/12/15/InfluxDB基础概念与应用(一)/index.html","hash":"7d80732f2fda615f743d77579dc9dc1782eb7548","modified":1749018223170},{"_id":"public/2020/12/12/Go-protoc使用生成文件/index.html","hash":"2b41f2e6cad19c0b380a7544df8fcb0eeb74c57d","modified":1749018223170},{"_id":"public/2020/12/10/Go-项目工程态Kratos初始化项目脚手架/index.html","hash":"a0ca80c90d3feb843297c42e8bc222e7238ace7c","modified":1749018223170},{"_id":"public/2020/12/07/Golang-GC 三色回收机制与混合读写屏障/index.html","hash":"8b047e13a2a88e7bc02dc686a62986e8f6f06062","modified":1749018223170},{"_id":"public/2020/11/24/Redis延时队列/index.html","hash":"952c966165e286e7ce927ac0cf674ff132877f00","modified":1749018223170},{"_id":"public/2020/11/22/Redis分布式锁/index.html","hash":"652b217d7be5765a8675a15b97a989e7f189e4ed","modified":1749018223170},{"_id":"public/2020/11/21/并发性能测试工具Jmeter的使用/index.html","hash":"b72cdcaf306855a56acce8a9d8afdce7543c1a1f","modified":1749018223170},{"_id":"public/2020/11/18/Redis的基础数据结构/index.html","hash":"ab3b76792d2806fb887c2a100d4a230df82618fb","modified":1749018223170},{"_id":"public/2020/11/14/golang-高级函数的使用细节/index.html","hash":"4aa35a596d49edd2df9ed33a053ee4a187a298e3","modified":1749018223170},{"_id":"public/2020/11/13/golang中go mod使用解决导包路径/index.html","hash":"1860cfa3ddba90cb129a78ce2d6f90834e653dbc","modified":1749018223170},{"_id":"public/2020/09/02/2020-08-30-计算机系统知识(一)/index.html","hash":"844387b2c2a34e91b0d83673fe7058360c1072ba","modified":1749018223170},{"_id":"public/2020/09/01/2020-09-01-Mac-Application快捷键神器/index.html","hash":"9c23433197312d98b7007ea5ae59468b55e9f5ff","modified":1749018223170},{"_id":"public/2020/08/31/2020-08-31-leetcode-15-三数之和/index.html","hash":"71b68db56c053c88d3278bfd4be5f6906e97e8fd","modified":1749018223170},{"_id":"public/2020/08/31/图床-七牛云和gitbub使用/index.html","hash":"dba8a20d661e732bdae75eeed556f437ac0a2af1","modified":1749018223170},{"_id":"public/2020/08/30/2020-08-30-leetcode-8-字符串转换整数(atoi)/index.html","hash":"8a58422b9111418d169fb5ec969083d33678712e","modified":1749018223170},{"_id":"public/2020/08/29/2020-08-29-leetcode-7-字符串Z字(V字)输出/index.html","hash":"04e32508c2cfd321c61ca100faa2566dd9501d1b","modified":1749018223170},{"_id":"public/2020/08/26/求最长公共字串及其起始位置/index.html","hash":"1f688063ae25b0ce88fa038d955c7dccba100fe0","modified":1749018223170},{"_id":"public/2020/08/25/2020-08-25-python使用位图对数据进行排序/index.html","hash":"7b13e40e1ddde2ce548aa7f14bed5ce173829cf3","modified":1749018223170},{"_id":"public/2020/08/18/Golang调度器GMP原理与调度全分析/index.html","hash":"69f300b6d8758d6b9f49d8e3b09f92895ca870e7","modified":1749018223170},{"_id":"public/2020/08/13/并发常见问题/index.html","hash":"f748bdfcea8fabd6014b64bd3c2379edf89cbeb1","modified":1749018223170},{"_id":"public/2020/08/11/2020-08-11-leetcode-2-两数相加/index.html","hash":"a23d7ec4304eb66e9cbb47b1adb9021464b00b73","modified":1749018223170},{"_id":"public/2020/07/04/golang反射reflect的使用/index.html","hash":"81eae573a2e9898e33c8d367834cbd2ac6bad90c","modified":1749018223170},{"_id":"public/2020/07/04/将有序数组放入到二叉树中/index.html","hash":"134745a48caef6199d2390dac62e648449d3c55d","modified":1749018223170},{"_id":"public/2020/07/01/递归实现栈逆序/index.html","hash":"27745d88bc6d39cf9f809da804ba8693b683c0d4","modified":1749018223170},{"_id":"public/2020/06/30/双栈实现一个队列/index.html","hash":"99545e9ed149199ef66474317c9fccd8251ffafb","modified":1749018223170},{"_id":"public/2020/06/29/设计一个有getMin功能的栈/index.html","hash":"90763b2999e759f96d5a1fe5bd77687e47b8032a","modified":1749018223170},{"_id":"public/2020/06/17/postgres安装教程/index.html","hash":"c4eae8c16a24374a52c3a324023d67c79f0fecaa","modified":1749018223170},{"_id":"public/categories/云原生/index.html","hash":"89d04d82a9dd3c278e1dae02b9ac6fa06b45719e","modified":1749018223170},{"_id":"public/categories/数据结构与算法/index.html","hash":"d745119fec0126244f2d3f1ba03ed22c6954181c","modified":1749018223170},{"_id":"public/categories/软考基础/index.html","hash":"18cbb48f7698c3c7e43cbd24b752ae53886225f7","modified":1749018223170},{"_id":"public/categories/Python/index.html","hash":"1c735d4ebb6b01c6935af1b66163bd75d4a27507","modified":1749018223170},{"_id":"public/categories/辅助工具类/index.html","hash":"279718bc52918f4db7182a06a944af74c46c03b6","modified":1749018223170},{"_id":"public/categories/日记/index.html","hash":"aee3aec75a765070197dfd7a41103a48cb81d8e8","modified":1749018223170},{"_id":"public/categories/AI工具/index.html","hash":"3573acbbcd3338441b721fb7729348fe7e1b7f87","modified":1749018223170},{"_id":"public/categories/Golang/index.html","hash":"6dcb6037f6aad7d2ae7f46f03cb8175cf409480d","modified":1749018223170},{"_id":"public/categories/Golang/page/2/index.html","hash":"562358898412b650ea2cab67a7ad088118b602da","modified":1749018223170},{"_id":"public/categories/微服务/index.html","hash":"afd439d96b2e9222341268802a302f774300d537","modified":1749018223170},{"_id":"public/categories/设计模式/index.html","hash":"024b99a351ef6ee85d41c2b9fc0e2b4ce95576a5","modified":1749018223170},{"_id":"public/categories/数据库/index.html","hash":"b16ad71138036ea0721f625b258fb57224da2b0a","modified":1749018223170},{"_id":"public/categories/日记/异梦录/index.html","hash":"aa9c75e49fc0ca776ab9f6c71d024eff6acc0f7d","modified":1749018223170},{"_id":"public/categories/Redis/index.html","hash":"50f4f373d1519bb686129ba4422e90eb4adac719","modified":1749018223170},{"_id":"public/categories/AI工具/AI-Tools/index.html","hash":"3ad6f13d7cfba787fb0dbf457845c9841bc413aa","modified":1749018223170},{"_id":"public/categories/学习笔记/index.html","hash":"249357960f44aee9afa57ad8b7799630830ad5b4","modified":1749018223170},{"_id":"public/categories/博客/index.html","hash":"9900232de5d3ef0b37347d712d8061b4595841e7","modified":1749018223170},{"_id":"public/categories/技术研究/index.html","hash":"7061dab0b9952add9f43fb499aa415fdbb4a8523","modified":1749018223170},{"_id":"public/categories/实用教程/index.html","hash":"d464113e72ede43f6ff8279d269d0389e7f33062","modified":1750996045012},{"_id":"public/categories/实用教程/page/2/index.html","hash":"a88c05fdee8dbb944a2eb5279262d741e9827691","modified":1749018223170},{"_id":"public/categories/消息队列/index.html","hash":"c5837b4b1bcd1ab948a0aa26392298fd5f0e5933","modified":1749018223170},{"_id":"public/categories/DeepSeek/index.html","hash":"83ac854e19f8384e61d0c0e02c7d47551aaf8f51","modified":1749018223170},{"_id":"public/categories/FRP/index.html","hash":"0c4e39e9eb74c12ac6fd54ae873964db7956e8b2","modified":1749018223170},{"_id":"public/categories/Linux/index.html","hash":"543a39b81948a440438e7d99164d3558a99d3ed2","modified":1749018223170},{"_id":"public/categories/HPC/index.html","hash":"42d2e8614e38ffeb313940c42b2fcaa9df4bf23e","modified":1749018223170},{"_id":"public/categories/LLM/index.html","hash":"9571d98e63369dcb0ca62e248e9e674bb6ebc7d2","modified":1749018223170},{"_id":"public/categories/LangChain/index.html","hash":"a29c78ae47a828c8e41c63fdbc4bf84f6a7d0587","modified":1749018223170},{"_id":"public/categories/GO语言并发之道/index.html","hash":"002a893add3822ff77670e752381acd4f6a17e18","modified":1749018223170},{"_id":"public/categories/静态文件服务/index.html","hash":"95674843b40bc59a2c20096d37f9dd74c08eb6e1","modified":1749018223170},{"_id":"public/categories/消息队列/Python/index.html","hash":"f439a5c03a9e8f1a69f949ed0e9d3972479d30f1","modified":1749018223170},{"_id":"public/categories/DeepSeek/AI/index.html","hash":"0be4dcbeb2617431add4224ebc29296a0d0b4cc6","modified":1749018223170},{"_id":"public/categories/FRP/网络/index.html","hash":"19d440fcfeae42ba059949b2bdf32e4ced36d165","modified":1749018223170},{"_id":"public/categories/Linux/Git/index.html","hash":"d8cc140e094083f4d4ec4ce927b50764f74029bc","modified":1749018223170},{"_id":"public/categories/HPC/容器/index.html","hash":"b78c597133b8857277bf5bb8a72ffa9e9169f1e1","modified":1749018223170},{"_id":"public/categories/LLM/大模型/index.html","hash":"c34e655aef616b41fede2f4eb84b169e7ec81069","modified":1749018223170},{"_id":"public/categories/LangChain/大语言模型/index.html","hash":"e7d9400ca693aded280fc5ed5270fa3fa495773b","modified":1749018223170},{"_id":"public/categories/静态文件服务/Python/index.html","hash":"b059b44f57f2bebfd2b611967a16ccce98c0ed08","modified":1749018223170},{"_id":"public/categories/LLM/大模型/MCP/index.html","hash":"48b257ff0edcd4beb6e8541d75a3e7eadafdf14e","modified":1749018223170},{"_id":"public/categories/LangChain/大语言模型/LLM/index.html","hash":"b358691e9239a0019f699f13c09863a78166217a","modified":1749018223170},{"_id":"public/categories/静态文件服务/Python/Go/index.html","hash":"165ee27ea536d2e7dfa0e772f5e562c4159c8774","modified":1749018223170},{"_id":"public/categories/LLM/大模型/MCP/AI/index.html","hash":"992efb94e2b2dafe68e8430d4b5ecc261b331d3c","modified":1749018223170},{"_id":"public/categories/经济/index.html","hash":"4d2199970970c22f9f590d01a1484cd231db4634","modified":1749018223170},{"_id":"public/archives/index.html","hash":"da38fd7c6d49189ab90111c28a1560e748171a71","modified":1750996045012},{"_id":"public/archives/page/2/index.html","hash":"110fcb0870deef174635037239e6a713b63f2d05","modified":1749018223170},{"_id":"public/archives/page/3/index.html","hash":"732405bf53b6679e9bbc4fd01b14cb65d57415cd","modified":1749018223170},{"_id":"public/archives/page/4/index.html","hash":"f9bebe637ac2dcab9e66bf7914c80f97305e2baf","modified":1749018223170},{"_id":"public/archives/page/5/index.html","hash":"0f5fe355c6d4d08128ce78daf8700002cc81abda","modified":1749018223170},{"_id":"public/archives/page/6/index.html","hash":"17eb70f90977d5ea35bd25853be53c411296b34e","modified":1749018223170},{"_id":"public/archives/page/7/index.html","hash":"f1aa89ff125b64fab3b5bbb50b820dcf08ca61b0","modified":1749018223170},{"_id":"public/archives/page/8/index.html","hash":"c15247953b52df583d575dfaf56ffe90c5b26042","modified":1749018223170},{"_id":"public/archives/2020/index.html","hash":"f5b1c22c95bc0142ff3788a0037544a8c8ac010b","modified":1749018223170},{"_id":"public/archives/2020/page/2/index.html","hash":"0ee392b50ea36ca30fd2007241cbf16f87e00369","modified":1749018223170},{"_id":"public/archives/2020/page/3/index.html","hash":"bd18290d07ed1f0cd97421161f49de2767128339","modified":1749018223170},{"_id":"public/archives/2020/06/index.html","hash":"25766b49e61e27753da841c91a0d926720867265","modified":1749018223170},{"_id":"public/archives/2020/07/index.html","hash":"e4c19295cdb5ce5969f34abf96b5bcdeed4af8a1","modified":1749018223170},{"_id":"public/archives/2020/08/index.html","hash":"cdc5e5bf8c1475816573cfd46d96476a92c069f4","modified":1749018223170},{"_id":"public/archives/2020/09/index.html","hash":"89589a07334e3c43686dd0e2d1cea354a34efb37","modified":1749018223170},{"_id":"public/archives/2020/11/index.html","hash":"f4a2d35bfa897956ea1a00b628285e35f81521c2","modified":1749018223170},{"_id":"public/archives/2020/12/index.html","hash":"844c22e69ccf800274456827aa2296f20b5d2e0f","modified":1749018223170},{"_id":"public/archives/2021/index.html","hash":"53dca2c4783383ace2281eeaae5750a8ba48e1e2","modified":1750996045012},{"_id":"public/archives/2021/page/2/index.html","hash":"020fcb382b78f4c36f5077b019b8ece78c15b96e","modified":1749018223170},{"_id":"public/archives/2021/01/index.html","hash":"fd3614db21abee157a90bf10bab06d7ab5e82e70","modified":1749018223170},{"_id":"public/archives/2021/02/index.html","hash":"062563c5bf33c435e81378b671c4f4bd96880959","modified":1749018223170},{"_id":"public/archives/2021/04/index.html","hash":"6f1f6f39f2d9420dac282ca1c26d6360b7e7533e","modified":1749018223170},{"_id":"public/archives/2021/05/index.html","hash":"d85cc082025b619a040a9f61754f2ccc3808730a","modified":1749018223170},{"_id":"public/archives/2021/06/index.html","hash":"60f0a44580e500b34b39af959f592150249cf12d","modified":1750996045012},{"_id":"public/archives/2021/08/index.html","hash":"a06fae422bc60c4b8639d585af2ec89dfe48de65","modified":1749018223170},{"_id":"public/archives/2022/index.html","hash":"a48b18c0d7d62076f2998e1992b7e0dee747a07e","modified":1749539558930},{"_id":"public/archives/2022/03/index.html","hash":"b1ed4a9b7f75ea7b6f0ff5748dae71ec3995f398","modified":1749539558930},{"_id":"public/archives/2022/05/index.html","hash":"eb573d3721da3ed694aecc21ddddee2db9df1a76","modified":1749018223170},{"_id":"public/archives/2022/12/index.html","hash":"3fc560d729957ac6c1515e0d761f25a3e25aca4b","modified":1749018223170},{"_id":"public/archives/2023/index.html","hash":"cf625764013802c71572b723a3383c9149b8272d","modified":1749018223170},{"_id":"public/archives/2023/page/2/index.html","hash":"ef860d5fb5d3dacac22c73b73d11baee600fd6ec","modified":1749018223170},{"_id":"public/archives/2023/01/index.html","hash":"767f8ab01f1cdb18b53a92c153d30b55daa9ca03","modified":1749018223170},{"_id":"public/archives/2023/02/index.html","hash":"d24f9c52e888195966b4bbe3b5332d3bc45d0d44","modified":1749018223170},{"_id":"public/archives/2023/03/index.html","hash":"a4e21ec6af8fb8746089f09b8fe1766add13aaeb","modified":1749018223170},{"_id":"public/archives/2023/06/index.html","hash":"af727c5ec96ea131fa0fead3e83c1c53e02642e0","modified":1749018223170},{"_id":"public/archives/2023/09/index.html","hash":"cce49098dccaf5109f4b02b08e41be2293170807","modified":1749018223170},{"_id":"public/archives/2023/10/index.html","hash":"9b8872ee828af77aaaa354da986bc357dd90d8f5","modified":1749018223170},{"_id":"public/archives/2023/11/index.html","hash":"c339cb1000dacd02f28949154b0c3be93901087d","modified":1749018223170},{"_id":"public/archives/2024/index.html","hash":"39bde865dd9cfd2cbed8c3f5942cb4c77d08cbac","modified":1749018223170},{"_id":"public/archives/2024/05/index.html","hash":"6e5085e8a0a2841a90d2d8970bb357c6ea56c708","modified":1749018223170},{"_id":"public/archives/2024/09/index.html","hash":"5894f163727df61fe8b1ad01ba08c4ec28761a00","modified":1749018223170},{"_id":"public/archives/2024/10/index.html","hash":"5c1bb5d2864b279791c760c33da29a2fe3132c90","modified":1749018223170},{"_id":"public/archives/2024/11/index.html","hash":"40db6b564aab0320bbccfedebb0e06612533c495","modified":1749018223170},{"_id":"public/archives/2025/index.html","hash":"4576789f596759d4ed391f2a3052297ad6d27134","modified":1749539558930},{"_id":"public/archives/2025/02/index.html","hash":"236c2e3e8c05bb47ad7d8cd43b4852bbb8b50f84","modified":1749018223170},{"_id":"public/archives/2025/03/index.html","hash":"28a9e941533a5e771d4e13fb6d453e02cc34f9b7","modified":1749018223170},{"_id":"public/archives/2025/04/index.html","hash":"7aeadad35c906a80ed299e5417cbb2c76076afd7","modified":1749018223170},{"_id":"public/archives/2025/05/index.html","hash":"403708ffbc7937a9f583c8407f5e08473953e42b","modified":1749018223170},{"_id":"public/index.html","hash":"127ff0873166e8134714cb2b8fb3b76714a38624","modified":1750996045012},{"_id":"public/page/2/index.html","hash":"99990287c820fd190f34d69b137edf2b152c367f","modified":1749018223170},{"_id":"public/page/3/index.html","hash":"503ae5a67e3c7848ce8efdd39ea23f5df53df903","modified":1749018223170},{"_id":"public/page/4/index.html","hash":"a134b20cdffd7448bb52033458218e6f1a054d03","modified":1749018223170},{"_id":"public/page/5/index.html","hash":"d51aa291eee4d63c2f0ccb0190d793470a11d656","modified":1749018223170},{"_id":"public/page/6/index.html","hash":"9d469025549fc2dd201f23d826058a393ec73b6d","modified":1749018223170},{"_id":"public/page/7/index.html","hash":"4848480ba43fcfb951bdbe4182e48f165e3e03aa","modified":1749018223170},{"_id":"public/page/8/index.html","hash":"956e32ee370eca16057802f9abe6665fc9f907ea","modified":1749018223170},{"_id":"public/tags/Cloudflare/index.html","hash":"bfe0e8b2b4e4ccd656d5a088c9f583ff99cc8efc","modified":1749018223170},{"_id":"public/tags/workers/index.html","hash":"79230c5473f1c94760d72b14fa1914be1e22bc46","modified":1749018223170},{"_id":"public/tags/pages/index.html","hash":"e0284666bdba079d4100e8458c41bc4e64519fd0","modified":1749018223170},{"_id":"public/tags/服务器/index.html","hash":"dbf04a3b2f6a489904adf8f84200c986e095f915","modified":1749018223170},{"_id":"public/tags/某墙/index.html","hash":"0756e04c0c8fb6a404900ba83b46f120a25612dd","modified":1749018223170},{"_id":"public/tags/玄犬/index.html","hash":"5dd762c518240ea5b02222b822d74e0b601ce874","modified":1749018223170},{"_id":"public/tags/悬楼/index.html","hash":"3ccb70c80d347eaa9fe4afe5a7ae8a2082b49ec7","modified":1749018223170},{"_id":"public/tags/Babel/index.html","hash":"cc37939d5f0ac5f28db84e5a0947fb810a6f95e0","modified":1749018223170},{"_id":"public/tags/Blog/index.html","hash":"84c271213549622f4f723c00f1ef583ff8ba5521","modified":1749018223170},{"_id":"public/tags/Canvas/index.html","hash":"14b856b92d929b3c3808d900b96bab547abb8b55","modified":1749018223170},{"_id":"public/tags/GeoJSON/index.html","hash":"f2484f46f5eb2ac9292e29fe01fa8d0a29b6f46a","modified":1749018223170},{"_id":"public/tags/反代节点/index.html","hash":"431eaabe87fe362a3e7aeed8d989cd0c827d2e4e","modified":1749018223170},{"_id":"public/tags/Google/index.html","hash":"d277c544a5cc8173e027717a727a5e6558772a8d","modified":1749018223170},{"_id":"public/tags/Mac/index.html","hash":"48fb087cfed17bdbb8e9e24562b73f8de9605d84","modified":1749018223170},{"_id":"public/tags/VS-Code/index.html","hash":"a02119589311a5ee08c906b065c5c5b5d88c8df2","modified":1749018223170},{"_id":"public/tags/Git/index.html","hash":"6a38f3d202a2c960693ee9efd2679e36b4ea72ea","modified":1749018223170},{"_id":"public/tags/commitizen/index.html","hash":"cd977e81e871c39e8a2fc44652df6d435b671e6a","modified":1749018223170},{"_id":"public/tags/cz/index.html","hash":"92812404500cd81d69d222b753a6b170a6ca8a42","modified":1749018223170},{"_id":"public/tags/Docker/index.html","hash":"17fd6ba281e834e15f5dc76c4bcf7b803717c893","modified":1749018223170},{"_id":"public/tags/Rebase/index.html","hash":"177dc2c083c7aca99a7c14e1db3c9371939819f8","modified":1749018223170},{"_id":"public/tags/Webhook/index.html","hash":"237dbdb98c2bcd7d19e0d22bb45e6c3c8ea1a899","modified":1749018223170},{"_id":"public/tags/git/index.html","hash":"ce107cebc9eddb0a0c088e5a753e49d67709e3ee","modified":1749018223170},{"_id":"public/tags/Go/index.html","hash":"0b2487c4d0697bad28436379ca7000ce58eae1c1","modified":1749018223170},{"_id":"public/tags/Hash/index.html","hash":"716c6ea3f4d5756cd9b43d24dc1f2d449554241e","modified":1749018223170},{"_id":"public/tags/Homebrew/index.html","hash":"d2b255aa5ba10d158777de69cbf7adae8822ecca","modified":1749018223170},{"_id":"public/tags/Lerna/index.html","hash":"75baa6f7d88435c5d14320941ca2324a8374c093","modified":1749018223170},{"_id":"public/tags/Linux/index.html","hash":"351ec7341721e59dbaaa2d69300424414bbe6c01","modified":1749018223170},{"_id":"public/tags/Node/index.html","hash":"318823d8bc7c6f5e2170cb183223f4979a5b061b","modified":1749018223170},{"_id":"public/tags/二进制/index.html","hash":"c3ca52ed2ffb5b7e1a0e404dd45195736b38a1bb","modified":1749018223170},{"_id":"public/tags/n/index.html","hash":"67f54ba30990a165d6b91b94e5d600d4948805ba","modified":1749018223170},{"_id":"public/tags/Nginx/index.html","hash":"029a237cf585f737764eff91697b95c020f9ae43","modified":1749018223170},{"_id":"public/tags/Ubuntu/index.html","hash":"7a8be2b3de27afd69c70e1da8d27305bda533c47","modified":1749018223170},{"_id":"public/tags/Oauth2-0/index.html","hash":"c61fde7540ab4744c477092d39a8b6b05e884c96","modified":1749018223170},{"_id":"public/tags/pm2/index.html","hash":"cba9436f7c62dfd88e9b7605e562400023496f6b","modified":1749018223170},{"_id":"public/tags/RegExp/index.html","hash":"6be7267f57f534edf89aa8560d6a8060e5117dcf","modified":1750996045012},{"_id":"public/tags/Serverless/index.html","hash":"9c9d148dabc428b74ae4e038a2f0fa8bd85439ff","modified":1749018223170},{"_id":"public/tags/CSS/index.html","hash":"8458739b5781436891f5172d059878218b2fd23d","modified":1749018223170},{"_id":"public/tags/WebGL/index.html","hash":"805ebecbf2477dd45cdb65ba02950cb1d5951f82","modified":1749018223170},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1749026336584},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1749026336584},{"_id":"public/img/favicon.ico","hash":"15a58c7b3bd913859362bc4627fc342d2e2dccfd","modified":1749026336584},{"_id":"public/img/avatar-regex.png","hash":"3a6daf9a6133b55707303186166bfa0f61371238","modified":1749026336584},{"_id":"public/img/avatar.png","hash":"a86cda98d5bc02e86f94c2ac48bfa0769be9019d","modified":1749026336584},{"_id":"public/img/blog.png","hash":"574a3c21f824f3592ec596af128c2c381b26eb44","modified":1749004229587},{"_id":"public/img/canvas-circle.png","hash":"a8e588b86ca4f719914ccce939e92ee824d66c4b","modified":1749004229587},{"_id":"public/img/canvas-china-demo.png","hash":"90a109dee9dca864cdd9b3d354d2d011152a1012","modified":1749004229587},{"_id":"public/img/canvas-grid.png","hash":"c1dd970806c3eff3e55aceaddbd6f9af4e4a655f","modified":1749004229587},{"_id":"public/img/canvas-line.png","hash":"12fb79ef5533a3cc5d71badbc09adf938986aa0e","modified":1749004229587},{"_id":"public/img/canvas-point.png","hash":"802302e483c5ea1b5253a3ac8900481ce4e82ce7","modified":1749004229587},{"_id":"public/img/canvas-rectangle.png","hash":"45989b0b2f0467ec604bae85f35d352add57b0fa","modified":1749004229587},{"_id":"public/img/canvas-text.png","hash":"09fb729d09129b6eacdb4fd203d2d1dc1a7c7ca8","modified":1749004229587},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1749026336584},{"_id":"public/img/canvas-triangle.png","hash":"cc6e36a6d2d2b90c3fcfe6830bb8128cfc2c51db","modified":1749004229587},{"_id":"public/img/canvas.png","hash":"8a085cdd2f57c2d0a60139c287b7790697cef604","modified":1749004229587},{"_id":"public/img/celery_512.png","hash":"b833973e834aa1ae4539a17daf1fdc63f64bb0f1","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-9.png","hash":"f20c32166b0b51afc2e8003eb59128c0d32ca650","modified":1749004229587},{"_id":"public/img/cf-wkrs-node.png","hash":"4668fdacb1220af8dfb9d05e17bb556e9e9a3147","modified":1749004229587},{"_id":"public/img/code.png","hash":"f3cb5d8f34b6bca192235ba457361148271ba670","modified":1749004229587},{"_id":"public/img/commitizen-0.png","hash":"4d045a416afb4765742b18e65c19fea4a89249d6","modified":1749004229587},{"_id":"public/img/commitizen-avatar.png","hash":"8c5fd84624a8c8b87ad295dd332d4004d628028d","modified":1749004229587},{"_id":"public/img/cover-blog.png","hash":"9d4b7fec6ef089322d561d428a69cbfa2d89e0c3","modified":1749004229587},{"_id":"public/img/cover-ast.png","hash":"802964a966ec3312b2d5c3a876f73a21a985732e","modified":1749004229587},{"_id":"public/img/cover-github-webhooks.png","hash":"2bcebbf0a984ab98f93f82435b11f7377462e417","modified":1749004229587},{"_id":"public/img/cover-docker.png","hash":"3f4ea8b4bf3b1c5f65a0ed96ca62b936d1d95dcc","modified":1749004229587},{"_id":"public/img/cover-n.png","hash":"d6146e97c5eb4691b3b6d23da76afa68f040b207","modified":1749004229587},{"_id":"public/img/geojson.png","hash":"3a0c8d17457b1509a185d9ad737676031d405482","modified":1749004229587},{"_id":"public/img/git-mac.png","hash":"072214a1469f2df79870489e63aa44f23adbd8b3","modified":1749004229587},{"_id":"public/img/git-merge.gif","hash":"04f48ed0b79dd753d21f9983b07c5ed119afa9c3","modified":1749004229587},{"_id":"public/img/git-rebase-cover.png","hash":"c2948efd9f8c6b27b695003961ba2750e036e0a1","modified":1749004229587},{"_id":"public/img/github-action.png","hash":"cfa29dd23d8d8c84c46fbbd701e68dd3c85a4034","modified":1749004229587},{"_id":"public/img/github-secret-ssh.png","hash":"21de870476134f2ca3ee1bad5a1919c9b9edc415","modified":1749004229587},{"_id":"public/img/github-workflow.png","hash":"29a4012d49bfad285d6bbcea1c89e7793c3151c9","modified":1749004229587},{"_id":"public/img/hash-1.png","hash":"5cf2cd0d68d42763dfdb68a58b6b1d3be9fb9c33","modified":1749004229587},{"_id":"public/img/github.png","hash":"778a3ed8febda0d4ed1620675a5b912a612a787a","modified":1749004229587},{"_id":"public/img/hash-3.png","hash":"697b32246b24cd48ea5be2a89e3948e1fc23d4e9","modified":1749004229587},{"_id":"public/img/hash-6.png","hash":"f2eef993bcebee0370141c86b38d3542230daddc","modified":1749004229587},{"_id":"public/img/golang.png","hash":"ee7d6741222567743cb0d958a11cc2d355a2caec","modified":1749004229587},{"_id":"public/img/hash-2.png","hash":"2b4698c259f9a68039ec0de0339ac08f2cc7c9a9","modified":1749004229587},{"_id":"public/img/hash-4.png","hash":"dd8ccaff184144d9e81d8fa446bf076148dd218d","modified":1749004229587},{"_id":"public/img/hash-5.png","hash":"0a6b8b60b54aa891ca2434d04c14bd2349523833","modified":1749004229587},{"_id":"public/img/hash-7.png","hash":"d364b484bba82e36e0d5556d16a16639eeac3b4d","modified":1749004229587},{"_id":"public/img/hash-8.png","hash":"e27d7cd819b7fc05d20dee7fae50410df5606aa7","modified":1749004229587},{"_id":"public/img/hash.png","hash":"2991cabfac800157879368cbd92762c3e448fcaf","modified":1749004229587},{"_id":"public/img/hexo-server.png","hash":"c4805a1e1de2794845239e22523a03b1d9c64f61","modified":1749004229587},{"_id":"public/img/homebrew.png","hash":"1b59832e5a5cb3c343b1114d1be8456043ca716e","modified":1749004229587},{"_id":"public/img/linux-node-1.jpg","hash":"1b22bc4f3fbcaa2281b0f822bc63cafc5763bf09","modified":1749004229587},{"_id":"public/img/lerna-publish.png","hash":"c66cd936056719bee8a7710b15ec585c1311cc22","modified":1749004229587},{"_id":"public/img/my-divination.png","hash":"588128bd63df5ee3dc91af460941a552a682a4e7","modified":1749004229587},{"_id":"public/img/mcp_scenarios.png","hash":"1a64f2275508e50b0a935e0c29a32c07bed24414","modified":1749004229587},{"_id":"public/img/napkin-logo.svg","hash":"f1a25dc8d2240b8c3c9c1c2887d19bf0af0e00d8","modified":1749004229587},{"_id":"public/img/n.png","hash":"e4154238269937fa4cbea612ca09cbe9ba5f1652","modified":1749004229587},{"_id":"public/img/ngrok.png","hash":"b138c06df5dd1812c7cfa8617376b545c5dfad96","modified":1749004229587},{"_id":"public/img/node-git-version.png","hash":"5f9d26f78582a7cfd095a55800625cbf33b6085c","modified":1749004229587},{"_id":"public/img/npm-add-username.png","hash":"57e4552bd023598207eefedda04b0addf813a518","modified":1749004229587},{"_id":"public/img/oauth-app.png","hash":"982ba11648295f1620e06a4e81e78a633061d129","modified":1749004229587},{"_id":"public/img/oauth-cover.png","hash":"b1c80be1b114568f1b16911927c1b11c440f114b","modified":1749004229587},{"_id":"public/img/pm2.jpg","hash":"ad065fe88af074a5c52bc1d9d216fa9dbfbaac22","modified":1749004229587},{"_id":"public/img/shell-code-success.png","hash":"68e1a9cfcfba39bacfc302968fafdeba5914dd95","modified":1749004229587},{"_id":"public/img/shell-code.png","hash":"0314e718c4177d9bd8a8a61f8c86e0fb6fe2256c","modified":1749004229587},{"_id":"public/img/singularity.run.pyhton.1.png","hash":"e6e75282e8284906e25d9b774fbf5ac7c4f8cbf2","modified":1749004229587},{"_id":"public/img/switch-1.png","hash":"e82b5273ae736fdee6f82fc4463e01befb9df7e3","modified":1749004229587},{"_id":"public/img/switch-3.png","hash":"e05431cd539c785ea4c803d61b1a16988f83b243","modified":1749004229587},{"_id":"public/img/switch-guaishou.png","hash":"78350740a784d73285dcd3238d0d5d5e7838fbc8","modified":1749004229587},{"_id":"public/img/switch-feiji.png","hash":"3659f6231fa3afdb095636a8748b68f574ecec8f","modified":1749004229587},{"_id":"public/img/top-artical.png","hash":"1ceeec2791786c37623d01f2c0dca77ed077177a","modified":1749004229587},{"_id":"public/img/top-category.png","hash":"bff609dbaa3a4e4d36987dcdda37c101b8ef9e53","modified":1749004229587},{"_id":"public/img/ssh-key.jpg","hash":"269f8bef939b542ed0f5d72f60b54658ee23f01d","modified":1749004229587},{"_id":"public/img/linux.jpg","hash":"87375ca580ff89d295d15d32655af9dd7348eb5e","modified":1749004229587},{"_id":"public/img/ubuntu2004.png","hash":"55648f9a5d19304a5a09e7dbad2f55307ffdbded","modified":1749004229587},{"_id":"public/img/top-tags.png","hash":"38a6e82f8e5c2f590ddf66af10ee7464f93f94cb","modified":1749026336584},{"_id":"public/img/ubuntu-nginx.png","hash":"2297b506b967c7b4800c5327551563b92ad1d3f8","modified":1749004229587},{"_id":"public/img/webgl.jpg","hash":"cbbb65732beb27b5cac2fdb600916b684184c854","modified":1749004229587},{"_id":"public/img/软件架构设计与生命周期.svg","hash":"3b964c0bc4599e21486979d8f02eece6a15ca963","modified":1749004229587},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1749026336584},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1749026336584},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1749026336584},{"_id":"public/img/canvas-china.png","hash":"4bd6344a3e80ccb435b62e7e78b3294dce115623","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-11.png","hash":"5129635964ac713108abb8c8a7b8ffbc0db15ca1","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-2.png","hash":"e113c46b437b83957fc9a7048e6a15952388375d","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-8.png","hash":"7860ca7be02358f587a522fe67afe49ccc5a241b","modified":1749004229587},{"_id":"public/img/commitizen-1.png","hash":"705765c14de3e64c728e58251e8b150772fe4e2b","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-1.png","hash":"4c779b350b06900326029ff6a48be789655fbdf8","modified":1749004229587},{"_id":"public/img/commitizen-2.png","hash":"b167bf4baedc92344f025b23d025fee9ffb1d2f1","modified":1749004229587},{"_id":"public/img/cover-lerna.png","hash":"d903950d83af8fcb4a35bd48363f03168d88a2be","modified":1749004229587},{"_id":"public/img/deepseek-vs-OpenAI.png","hash":"a5fd23445bd855a843ad5cbdcd798483231dcd07","modified":1749004229587},{"_id":"public/img/deepseek.docker.png","hash":"2a9f1e666cd4763113e0de6ddcbdbda5d9a1998d","modified":1749004229587},{"_id":"public/img/deepseek.settings.png","hash":"d125267aaec5a11f2dc6809fb4d661498cd886f8","modified":1749004229587},{"_id":"public/img/dk-github-webhooks.png","hash":"d22647def2c8582e63450d674501dd1d888fa5ea","modified":1749004229587},{"_id":"public/img/deploy-dns.png","hash":"be09fc8c8115ef7eb98979e8a6330ca0839c423c","modified":1749004229587},{"_id":"public/img/dns-record.png","hash":"1b3638a1280bb367182dd49251cd2d9b088207f5","modified":1749004229587},{"_id":"public/img/dns.png","hash":"98044e06b8838313ccdaa21dc4456409de2a196e","modified":1749004229587},{"_id":"public/img/git-avatar.png","hash":"737f26aac596a179b5b83f23628a405c3b826934","modified":1749004229587},{"_id":"public/img/github-webhooks-trigger.png","hash":"71bcbc7a8e7fc9782bd7d0936551a7ac76080cc9","modified":1749004229587},{"_id":"public/img/github-webhooks-add.png","hash":"87c67c1a00e891f93deb36a7c48770160f31d189","modified":1749004229587},{"_id":"public/img/hash-9.png","hash":"af5da7b68976e682543e76f454a145a306b63cee","modified":1749004229587},{"_id":"public/img/hexo-deploy.png","hash":"20592b6d304737f14957d3415d6d297f683df056","modified":1749004229587},{"_id":"public/img/lerna-create.png","hash":"c7431b66ce97205607edfe6834e16b1afae25fdc","modified":1749004229587},{"_id":"public/img/loading.gif","hash":"f3ed6ebb365ad368e2e60baa4c497960b7ffec24","modified":1749004229587},{"_id":"public/img/macbook-01.png","hash":"41f4c9c009f9358536c59c262a0602a643e212d1","modified":1749004229587},{"_id":"public/img/my-squoosh.png","hash":"66b85b8654148b68272429a11e1e060cb4861821","modified":1749004229587},{"_id":"public/img/npm-add-organization.png","hash":"d826b0fc072af49dfae28e54bc6a5d15f9361382","modified":1749004229587},{"_id":"public/img/npm-home.png","hash":"a020640f1569d34b6b6d676b16ccf802bc7fb567","modified":1749004229587},{"_id":"public/img/oauth-github-app.png","hash":"c597ba929300e2a55b6834e982f150393b4e31f7","modified":1749004229587},{"_id":"public/img/pageAssist.png","hash":"4469250f5959f286765e1367f49de55a6702d75e","modified":1749004229587},{"_id":"public/img/racknerd.png","hash":"1cb07f27fc57dd8ef5d90445ab0b56f57204b105","modified":1749004229587},{"_id":"public/img/ssl.png","hash":"5de5b146c5e0ec3de0417e8b8c30011ee5ccb7f2","modified":1749004229587},{"_id":"public/img/singularity.run.2.png","hash":"64bc37a542fef70416417fcfc4e53cf21a462f61","modified":1749004229587},{"_id":"public/img/static_file.png","hash":"d4f7c075336ded3a4b5676fc0839314b8e18a283","modified":1749004229587},{"_id":"public/img/switch-4.png","hash":"35db93064abfdeb69546e6e22444e4de3d363cf7","modified":1749004229587},{"_id":"public/img/oauth-1.png","hash":"450f8e0767fb5bbdea4584a6c45296c5c2373551","modified":1749004229587},{"_id":"public/img/top-index.png","hash":"2616138bb939e929d67b517701724a0c929a8097","modified":1749639552816},{"_id":"public/img/top-tag.png","hash":"ff0f439da47944e54a1a91601658ec439bc97c14","modified":1749004229587},{"_id":"public/css/index.css","hash":"c4561838d1dc05dc6f3b52f6ab39a630d27f6a77","modified":1749026336584},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749026336584},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1749026336584},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1749026336584},{"_id":"public/js/main.js","hash":"31467612b20a2009175cd7c423d94718d5c89d41","modified":1749026336584},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1749026336584},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1749026336584},{"_id":"public/img/LangChain框架.png","hash":"e6e08d5bc3f37f82f7603b3a8c1280f146e20c11","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-3.png","hash":"7b1e09abdcb91c144aed9d2bbcf3400992119378","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-5.png","hash":"ff20bd5966b05fbdccd7d05cf5cdd73bfeb217b8","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-4.png","hash":"105ef53b4de6a07043ea1b23196c5bef9d738992","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-6.png","hash":"203c7810965ed318b27a809239bea320c2f63fc8","modified":1749004229587},{"_id":"public/img/deploy-cover.png","hash":"05db2eff87a7aaaab8b29ddac37e6d3fe02ca47a","modified":1749004229587},{"_id":"public/img/deploy-domain.png","hash":"bc2db7a732ba531f8a9c769817f1e83e20a8dadc","modified":1749004229587},{"_id":"public/img/deploy.png","hash":"a5052c3134b121e3ab7db14b4170113ff0638625","modified":1749004229587},{"_id":"public/img/git-rebase.gif","hash":"eb9ddfc624ec1edcdab30c6d6cdfbe8f06ca0a43","modified":1749004229587},{"_id":"public/img/mcp_with_chat.png","hash":"fffa3a414e0013a052e849219f8e9467341eeb95","modified":1749004229587},{"_id":"public/img/ollama.anythingllm.png","hash":"31c803c7c3a2caeb49bf40dd5a56ed776b0757a7","modified":1749004229587},{"_id":"public/img/canvas-animation.gif","hash":"c86745e5b51cda7de315aaa455c97541faf1a8eb","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-10.png","hash":"6c971184c9293eb5187eacbf830f396ae80cb6a0","modified":1749004229587},{"_id":"public/img/cf-wkrs-node-7.png","hash":"e428461ec809f6e3116ddcf80fa1afc68a8f6f29","modified":1749004229587},{"_id":"public/img/frp.icon.png","hash":"7bd743e09f4af5f20a1b017950951047593185e7","modified":1749004229587},{"_id":"public/img/singularity.icon.png","hash":"62c8cbd0b837198896fa3a490d378029c68f8ead","modified":1749004229587},{"_id":"public/img/switch.gif","hash":"fedbfb2558947f02ec022d184974e33b45282233","modified":1749004229587},{"_id":"public/font/Pacifico-Regular.ttf","hash":"baca1fca7fe74b61cb33aa0da48ec1a3a77bcf49","modified":1749026336584},{"_id":"public/img/my-blog.png","hash":"a5b67b4edee0ec98215a411557fbf1833df65728","modified":1749004229587},{"_id":"public/img/my-twitter.png","hash":"e6861a635614368336ef738f14ad4eab95378be1","modified":1749004229587},{"_id":"public/img/top-default.png","hash":"a9f7909ca86049dd002e524ee95f4decd741f5fe","modified":1749004229587},{"_id":"public/img/linux-node-2.jpg","hash":"fb8e80856b3fb2329e73aa0370cf93d591ab0a6a","modified":1749004229587},{"_id":"public/img/yijing.png","hash":"f06ca6084ea5bd776856d275e0e10149ee5bed34","modified":1749004229587},{"_id":"public/img/ri_20250306_mlj001.png","hash":"42fc94b4a74f0f61675abacb0a83c64bbf4bc7b5","modified":1749004229587},{"_id":"public/img/my-github.png","hash":"6126057b7750c7f5af93c0425f6df6fc274159bb","modified":1749004229587},{"_id":"public/img/mcp.png","hash":"d70254bbae850902626f241c916f4ff05555ad45","modified":1749004229587},{"_id":"public/img/LangChain-from-zero.png","hash":"ec8a64a8f5beea7e44a5fa21c03dbc2bd5bbfad7","modified":1749004229587},{"_id":"public/img/jj2.png","hash":"71311915c822f366a5787ecae9a93509b683a7b6","modified":1749004229587},{"_id":"public/img/jj.png","hash":"eb6941c85c5d9063f38213c017cbcee0c32c3502","modified":1749004229587},{"_id":"public/img/switch-2.gif","hash":"dff7c92f00c260e620a8618782d91df8eb66c704","modified":1749004229587},{"_id":"public/img/switch-5.gif","hash":"c8dede0016b9f20ab8f0fda1474f19f655190d18","modified":1749004229587},{"_id":"public/img/commitizen-3.gif","hash":"c15f8a930c8f4cca6613be5f216cbea6ebc11de0","modified":1749004229587},{"_id":"public/img/switch-6.gif","hash":"40f1b24a568bbd68440a6874be2e6c0a31d46c32","modified":1749004229587},{"_id":"source/_posts/LearnOpenGL-Day1.md","hash":"cb27f26655d528e2373c9d910c1bea64ac8dcd38","modified":1749629762795},{"_id":"source/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1749538533867},{"_id":"source/.obsidian/appearance.json","hash":"aa14a83a21073ad47dc41484fa337ad12639dbbc","modified":1749538533868},{"_id":"source/.obsidian/graph.json","hash":"a93bba9a59cf4c87a0b0e2242289276c8b47417f","modified":1749538021848},{"_id":"source/.obsidian/workspace.json","hash":"b6075c91109d9d38c3e48ed5b883e33390403d56","modified":1750996031817},{"_id":"source/.obsidian/core-plugins.json","hash":"2a08642e2455d9db3afbaebcfb27b2884a1fb59e","modified":1749538444108},{"_id":"source/.obsidian/core-plugins-migration.json","hash":"688b44c61ce85d9ac421b1a310a72c1348bc9b51","modified":1749536821301},{"_id":"source/img/openGL1.png","hash":"fd09ddaf5ee287aadc7a870a4a2cd876773fce35","modified":1749539057386},{"_id":"public/2025/06/10/LearnOpenGL-Day1/index.html","hash":"3253c5ba51333182adaa8b8e0efac9e1d1e79071","modified":1749539558930},{"_id":"public/archives/2025/06/index.html","hash":"aa0f3d0019a249d5ee7552000883f4df949d6b39","modified":1749539558930},{"_id":"public/tags/OpenGL/index.html","hash":"4a170904804745447dd5a82ac3c5b4800aa69322","modified":1750996045012},{"_id":"public/img/openGL1.png","hash":"fd09ddaf5ee287aadc7a870a4a2cd876773fce35","modified":1749539558930},{"_id":"source/img/01/step1.png","hash":"389f5fa4a60b3dbe184b27261ba6c447d1043f53","modified":1749625951031},{"_id":"source/img/01/02/cmake.png","hash":"7d7deba02c65bc5f156e9eab604e93d6dca035de","modified":1741407184000},{"_id":"source/img/01/02/linker_input.png","hash":"a2e58de8ead07068c91d6d9ca02d90e7340cb237","modified":1741407184000},{"_id":"source/img/01/02/include_directories.png","hash":"195872c82edb195631683f2bbfcf8511f2402677","modified":1741407184000},{"_id":"source/_posts/LearnOpenGL-Day2.md","hash":"bd5105f5227d30d007de2417c3ff1895aecb68cb","modified":1750995998710},{"_id":"source/img/01/02/hellowindow2.png","hash":"a3e08e27ea166161e1c08fb3287d5a2444755aa5","modified":1741407184000},{"_id":"source/img/01/02/vc_directories.png","hash":"cf3938dae93ab2c17a180c854f01ad452a683b02","modified":1741407184000},{"_id":"source/img/01/02/x64.png","hash":"d280c056321dab663ea664ad380da3810daecd2f","modified":1741407184000},{"_id":"source/img/01/02/opengl2.png","hash":"ddb5882fe37f94e182588b62e042b91d8672b4e0","modified":1749629875132},{"_id":"source/img/01/01/opengl1.png","hash":"fd09ddaf5ee287aadc7a870a4a2cd876773fce35","modified":1749539057386},{"_id":"public/2021/06/13/LearnOpenGL-Day2/index.html","hash":"76f5c4cd2802e9ad224449f3cdc7a7379f55e8af","modified":1750040331131},{"_id":"public/2021/06/10/LearnOpenGL-Day1/index.html","hash":"668a082ecd1e6e230cbb3480e17cc3d124394994","modified":1750996045012},{"_id":"public/2021/03/02/regexp/index.html","hash":"312ae2c6bd5f991d3f897ea16026ae1ddde6590b","modified":1750996045012},{"_id":"public/archives/2021/03/index.html","hash":"9cb8af9a4a35316b8d0043d2118688d8d0177325","modified":1750996045012},{"_id":"public/img/01/02/cmake.png","hash":"7d7deba02c65bc5f156e9eab604e93d6dca035de","modified":1749639552816},{"_id":"public/img/01/02/x64.png","hash":"d280c056321dab663ea664ad380da3810daecd2f","modified":1749639552816},{"_id":"public/img/01/02/include_directories.png","hash":"195872c82edb195631683f2bbfcf8511f2402677","modified":1749639552816},{"_id":"public/img/01/02/vc_directories.png","hash":"cf3938dae93ab2c17a180c854f01ad452a683b02","modified":1749639552816},{"_id":"public/img/01/02/linker_input.png","hash":"a2e58de8ead07068c91d6d9ca02d90e7340cb237","modified":1749639552816},{"_id":"public/img/01/02/hellowindow2.png","hash":"a3e08e27ea166161e1c08fb3287d5a2444755aa5","modified":1749639552816},{"_id":"public/img/01/02/opengl2.png","hash":"ddb5882fe37f94e182588b62e042b91d8672b4e0","modified":1749639552816},{"_id":"public/img/01/01/opengl1.png","hash":"fd09ddaf5ee287aadc7a870a4a2cd876773fce35","modified":1749639552816},{"_id":"source/_posts/LearnOpenGL-Day3.md","hash":"d37eee4decea882c0090db08939a37a0d280671f","modified":1750996029937},{"_id":"source/img/01/03/hellotriangle2.png","hash":"951bf857d254506357cbc8c681b800a25e60d44d","modified":1741407184000},{"_id":"source/img/01/03/hellotriangle.png","hash":"c4358e3c7389b05b185265d9ba56a20aca3e3edf","modified":1741407184000},{"_id":"source/img/01/03/vertex_array_objects_ebo.png","hash":"5c1cc4cb3647667765781dde1105f05a2cdad80d","modified":1741407184000},{"_id":"source/img/01/03/vertex_array_objects.png","hash":"0f9174034cf42ed5a25069b62d0675132614dfb9","modified":1741407184000},{"_id":"source/img/01/03/ndc.png","hash":"01f3a1a014f062e1129b53cdd1d72e2f00bdc955","modified":1741407184000},{"_id":"source/img/01/03/pipeline.png","hash":"81f2554203435efcf4fd58e53eb365d38b6ab458","modified":1741407184000},{"_id":"source/img/01/03/vertex_attribute_pointer.png","hash":"705abe74942775d1dc09092863f6121070ce2861","modified":1741407184000},{"_id":"source/img/01/03/opengl3.jpg","hash":"81636e78f1f35e2192ea6ab72e7d46470ad4a671","modified":1750995721445},{"_id":"public/2021/06/16/LearnOpenGL-Day2/index.html","hash":"1486d17051d78a1703a5d179a680d0cda52eb889","modified":1750996045012},{"_id":"public/2021/06/13/LearnOpenGL-Day3/index.html","hash":"18bc28d7c26db3345089044e0382ea59ca179c57","modified":1750996045012},{"_id":"public/img/01/03/hellotriangle.png","hash":"c4358e3c7389b05b185265d9ba56a20aca3e3edf","modified":1750995771797},{"_id":"public/img/01/03/hellotriangle2.png","hash":"951bf857d254506357cbc8c681b800a25e60d44d","modified":1750995771797},{"_id":"public/img/01/03/ndc.png","hash":"01f3a1a014f062e1129b53cdd1d72e2f00bdc955","modified":1750995771797},{"_id":"public/img/01/03/pipeline.png","hash":"81f2554203435efcf4fd58e53eb365d38b6ab458","modified":1750995771797},{"_id":"public/img/01/03/vertex_attribute_pointer.png","hash":"705abe74942775d1dc09092863f6121070ce2861","modified":1750995771797},{"_id":"public/img/01/03/vertex_array_objects_ebo.png","hash":"5c1cc4cb3647667765781dde1105f05a2cdad80d","modified":1750995771797},{"_id":"public/img/01/03/vertex_array_objects.png","hash":"0f9174034cf42ed5a25069b62d0675132614dfb9","modified":1750995771797},{"_id":"public/img/01/03/opengl3.jpg","hash":"81636e78f1f35e2192ea6ab72e7d46470ad4a671","modified":1750995771797}],"Category":[{"name":"科学上网","_id":"cmbhbylum0004gkc2bxdzc9e0"},{"name":"云原生","_id":"cmbhbyluo000cgkc243x2375i"},{"name":"数据结构与算法","_id":"cmbhbylup000hgkc2cd9u6vhc"},{"name":"软考基础","_id":"cmbhbyluq000mgkc28sgv0103"},{"name":"Python","_id":"cmbhbylur000rgkc272ltg3fj"},{"name":"辅助工具类","_id":"cmbhbyluu001cgkc2bl3qc25i"},{"name":"日记","_id":"cmbhbyluv001jgkc222uz3gqh"},{"name":"AI工具","_id":"cmbhbyluv001qgkc2fklo28z2"},{"name":"Golang","_id":"cmbhbyluw001wgkc25hjafumm"},{"name":"微服务","_id":"cmbhbylux0029gkc29algf9kr"},{"name":"设计模式","_id":"cmbhbyluy002ggkc29h959sye"},{"name":"数据库","_id":"cmbhbylv3003ogkc240y43grf"},{"name":"异梦录","parent":"cmbhbyluv001jgkc222uz3gqh","_id":"cmbhbylv4003wgkc20l236o90"},{"name":"Redis","_id":"cmbhbylv50046gkc2cvfkaxl3"},{"name":"AI-Tools","parent":"cmbhbyluv001qgkc2fklo28z2","_id":"cmbhbylv6004rgkc2gyn7dsjv"},{"name":"学习笔记","_id":"cmbhbylv7004zgkc2hsnn3u1a"},{"name":"博客","_id":"cmbhbylv80054gkc2cbg22pvo"},{"name":"技术研究","_id":"cmbhbylv9005cgkc2fs7vg73y"},{"name":"实用教程","_id":"cmbhbylva005pgkc21xte6kzx"},{"name":"消息队列","_id":"cmbhbylvc0069gkc2893x440p"},{"name":"DeepSeek","_id":"cmbhbylvc006igkc28mqe5his"},{"name":"FRP","_id":"cmbhbylvd006ygkc2e6n1fxpl"},{"name":"Linux","_id":"cmbhbylve007egkc22ifk7s4u"},{"name":"HPC","_id":"cmbhbylvg009agkc2cqv66cmc"},{"name":"LLM","_id":"cmbhbylvg009egkc2e1m01zc6"},{"name":"LangChain","_id":"cmbhbylvh009ggkc29pzdcrwn"},{"name":"GO语言并发之道","_id":"cmbhbylvh009hgkc2bma77qhy"},{"name":"静态文件服务","_id":"cmbhbylvh009igkc20s5v4mri"},{"name":"Python","parent":"cmbhbylvc0069gkc2893x440p","_id":"cmbhbylvh009kgkc21h1vfwa0"},{"name":"AI","parent":"cmbhbylvc006igkc28mqe5his","_id":"cmbhbylvh009lgkc2cfkj3vbb"},{"name":"网络","parent":"cmbhbylvd006ygkc2e6n1fxpl","_id":"cmbhbylvh009ngkc2gyn5ghnd"},{"name":"Git","parent":"cmbhbylve007egkc22ifk7s4u","_id":"cmbhbylvh009qgkc2272d28gs"},{"name":"容器","parent":"cmbhbylvg009agkc2cqv66cmc","_id":"cmbhbylvh009tgkc2fx2rayir"},{"name":"大模型","parent":"cmbhbylvg009egkc2e1m01zc6","_id":"cmbhbylvh009wgkc28m96bhqn"},{"name":"大语言模型","parent":"cmbhbylvh009ggkc29pzdcrwn","_id":"cmbhbylvh009zgkc2cen1enpk"},{"name":"Python","parent":"cmbhbylvh009igkc20s5v4mri","_id":"cmbhbylvh00a1gkc2a5zn5ne3"},{"name":"MCP","parent":"cmbhbylvh009wgkc28m96bhqn","_id":"cmbhbylvi00a2gkc23mwz1bha"},{"name":"LLM","parent":"cmbhbylvh009zgkc2cen1enpk","_id":"cmbhbylvi00a3gkc2726e4002"},{"name":"Go","parent":"cmbhbylvh00a1gkc2a5zn5ne3","_id":"cmbhbylvi00a4gkc2dtbw6duj"},{"name":"AI","parent":"cmbhbylvi00a2gkc23mwz1bha","_id":"cmbhbylvi00a6gkc2edl9hmse"},{"name":"经济","_id":"cmbhbylvj00aigkc26xtu2f27"}],"Data":[],"Page":[{"title":"About Me","date":"2019-04-16T12:32:54.000Z","type":"about","layout":"about","keywords":["博客","个人博客","Ziang Liu","blog","Ziang Liu's Blog","Alex","我的"],"_content":"","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-04-16 20:32:54\ntype: \"about\"\nlayout: \"about\"\nkeywords:\n  - 博客\n  - 个人博客\n  - Ziang Liu\n  - blog\n  - Ziang Liu's Blog\n  - Alex\n  - 我的\n---\n","updated":"2025-06-04T07:23:58.575Z","path":"about/index.html","_id":"cmbhbyluj0000gkc24urc1kjr","comments":1,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/friends.jpg","excerpt":"","more":""},{"title":"Categories","date":"2019-04-16T10:56:58.000Z","type":"categories","layout":"categories","top_img":"/img/top-category.png","keywords":["博客","个人博客","Ziang Alex","blog","Ziang Alex's Blog","Alex"],"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2019-04-16 18:56:58\ntype: \"categories\"\nlayout: \"categories\"\ntop_img: /img/top-category.png\nkeywords:\n  - 博客\n  - 个人博客\n  - Ziang Alex\n  - blog\n  - Ziang Alex's Blog\n  - Alex\n---\n","updated":"2025-06-04T07:23:58.575Z","path":"categories/index.html","_id":"cmbhbylul0002gkc2e6pt76xk","comments":1,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/friends.jpg","excerpt":"","more":""},{"title":"Tags","date":"2021-04-25T10:59:22.000Z","type":"tags","layout":"tags","top_img":"/img/top-tags.png","keywords":["博客","个人博客","Alex","blog","Alex's Blog"],"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2021-04-25 18:59:22\ntype: tags\nlayout: tags\ntop_img: /img/top-tags.png\nkeywords:\n  - 博客\n  - 个人博客\n  - Alex\n  - blog\n  - Alex's Blog\n---\n","updated":"2025-06-04T07:23:58.582Z","path":"tags/index.html","_id":"cmbhbylun0006gkc2ar9ldcfx","comments":1,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/friends.jpg","excerpt":"","more":""},{"title":"Music","date":"2021-08-10T16:00:00.000Z","keywords":["博客","个人博客","Ziang Liu","blog","Ziang Liu's Blog","Alex"],"_content":"\n<style >\n\n  #aplayer-author{\n    border-bottom: 1px solid #eee;\n    padding-bottom: 16px;\n  }\n  #aplayer-author>.aplayer-btn {\n    display: inline-block;\n    cursor: pointer;\n    color: #777;\n  }\n  #aplayer-author>.aplayer-btn:hover {\n    color: #333\n  }\n  #aplayer-author>.aplayer-btn-active {\n    color: #0077cc\n  }\n    #aplayer-author>.aplayer-btn-active:hover{\n    color: #0077cc\n  }\n\n\n</style>\n<div style=\"display: flex\">\n  <div style=\"width: 100px; min-width: 100px\">所有歌手</div>\n  <div id=\"aplayer-author\"></div>\n</div>\n<img id=\"aplayer-loading\" style=\"heigit: 160px; width: 160px; opacity: 0\" src=\"/img/loading.gif\"></img>\n<div id=\"aplayer\"></div>\n\n<script>\nconst getJSON = function(url) {\n    const promise = new Promise(function(resolve, reject){\n        const handler = function() {\n            if (this.readyState !== 4) {\n                return;\n            }\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        const client = new XMLHttpRequest();\n        client.open(\"GET\", url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n\n    });\n    return promise;\n};\n\n  const dom = document.getElementById('aplayer-loading');\n  setTimeout(() => {\n     if(dom) { dom.style.opacity = 100; }\n  }, 300)\n\ngetJSON(\"https://cdn.emooa.com/output.json\").then(function(json = {}) {\n\n  // 随机排序\n  const shuffle = (arr) => {\n    let i = arr.length;\n    while(i) {\n      let j = Math.floor(Math.random() * i--);\n      [arr[j], arr[i]] = [arr[i], arr[j]]\n    } return arr;\n  }\n\n  let audio = shuffle(json.music).map(music => ({...music, \n    url: `https://cdn.emooa.com/${music.url}`,\n    pic: `https://cdn.emooa.com/${music.pic}`,\n    lrc: `https://cdn.emooa.com/${music.lrc}`\n  }));\n  \n  console.log(1, audio)\n \n\n  // 移除loading\n  const loadingDom = document.getElementById('aplayer-loading');\n  loadingDom.style.display=\"none\"\n\n/** 加载aplayer */\n  const showAplayer = (audio, authorName)=> {\n    audio = audio.filter(item => {\n      if (authorName) {\n        if (authorName === '全部') return true;\n        return item.author === authorName;\n      }\n      return true\n    })\n\n    new APlayer({\n      container: document.getElementById('aplayer'),\n      mini: false,\n      autoplay: false,\n      // theme: '#FADFA3',\n      loop: 'all',\n      order: 'list',\n      preload: 'auto',\n      volume: 0.7,\n      mutex: true,\n      listFolded: false,\n      listMaxHeight: '400px',\n      lrcType: 3,\n      audio: audio,\n    });\n  }\n\n  /** 加载歌手 */\n  const authorDom = document.getElementById('aplayer-author');\n  let author = audio.map(item => item.author);\n\n  var authorTimes = {};\n  for (var i = 0; i < author.length; i++) {\n    var key = author[i];\n    if (authorTimes[key]) {\n      authorTimes[key]++;\n    } else {\n      authorTimes[key] = 1;\n    }\n  }\n\n\n  author = Object.entries(authorTimes).sort((a,b) => b[1]-a[1])\n  author = [['全部', audio.length],...author];\n  author.forEach((item, index) => {\n    const div = document.createElement('div');\n    div.classList.add('aplayer-btn');\n    if(index === 0)  div.classList.add(`aplayer-btn-active`);\n    div.style.marginRight = '16px';\n    // 添加创建好的文本节点\n    div.appendChild(document.createTextNode(`${item[0]}${item[1]=== 1 ?'': `(${item[1]})`}`));\n    authorDom.appendChild(div);\n  });\n  const authorBtn = document.getElementsByClassName(\"aplayer-btn\");\n  const authorBtnActive = document.getElementsByClassName(\"aplayer-btn-active\");\n\n  let authorName;\n  for (let i in authorBtn) {\n    authorBtn[i].onclick = () => {\n      authorName=author[i][0];\n      showAplayer(audio, authorName);\n      if (authorBtnActive[0]) authorBtnActive[0].classList.remove('aplayer-btn-active')\n      authorBtn[i].classList.add('aplayer-btn-active');\n    }\n  }\n  showAplayer(audio);\n})\n\n</script>\n<!--\n{% aplayerlist %}{\"autoplay\": false,\"showlrc\": 3,\"mode\": \"list\", \"listMaxHeight\": \"400px\",\"music\": [\n  {\n    \"theme\": \"#ebd0c2\",\n    \"title\": \"云烟成雨\",\n    \"author\": \"房东的猫\",\n    \"url\": \"https://api.i-meto.com/meting/api?server=tencent&type=url&id=001yYM0I30CzdP&auth=243686f98a14224f0d462fb75e9a3dfe3f3d2b12\",\n    \"pic\": \"https://api.i-meto.com/meting/api?server=tencent&type=pic&id=004NFJ230yX0Nz&auth=f68522433cb19f7cf34ce99cb9cf7c2ba76ce5a9\",\n    \"lrc\": \"https://api.i-meto.com/meting/api?server=tencent&type=lrc&id=001yYM0I30CzdP&auth=0b75a8e1f5dbfaddd65cef905563e0b80a162cb2\"\n  }\n]}{% endaplayerlist %} -->\n","source":"music/index.md","raw":"---\ntitle: Music\ndate: 2021-08-11\n# type: music\n# layout: music\n# top_img: /img/top-tag.jpg\nkeywords:\n  - 博客\n  - 个人博客\n  - Ziang Liu\n  - blog\n  - Ziang Liu's Blog\n  - Alex\n---\n\n<style >\n\n  #aplayer-author{\n    border-bottom: 1px solid #eee;\n    padding-bottom: 16px;\n  }\n  #aplayer-author>.aplayer-btn {\n    display: inline-block;\n    cursor: pointer;\n    color: #777;\n  }\n  #aplayer-author>.aplayer-btn:hover {\n    color: #333\n  }\n  #aplayer-author>.aplayer-btn-active {\n    color: #0077cc\n  }\n    #aplayer-author>.aplayer-btn-active:hover{\n    color: #0077cc\n  }\n\n\n</style>\n<div style=\"display: flex\">\n  <div style=\"width: 100px; min-width: 100px\">所有歌手</div>\n  <div id=\"aplayer-author\"></div>\n</div>\n<img id=\"aplayer-loading\" style=\"heigit: 160px; width: 160px; opacity: 0\" src=\"/img/loading.gif\"></img>\n<div id=\"aplayer\"></div>\n\n<script>\nconst getJSON = function(url) {\n    const promise = new Promise(function(resolve, reject){\n        const handler = function() {\n            if (this.readyState !== 4) {\n                return;\n            }\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        const client = new XMLHttpRequest();\n        client.open(\"GET\", url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n\n    });\n    return promise;\n};\n\n  const dom = document.getElementById('aplayer-loading');\n  setTimeout(() => {\n     if(dom) { dom.style.opacity = 100; }\n  }, 300)\n\ngetJSON(\"https://cdn.emooa.com/output.json\").then(function(json = {}) {\n\n  // 随机排序\n  const shuffle = (arr) => {\n    let i = arr.length;\n    while(i) {\n      let j = Math.floor(Math.random() * i--);\n      [arr[j], arr[i]] = [arr[i], arr[j]]\n    } return arr;\n  }\n\n  let audio = shuffle(json.music).map(music => ({...music, \n    url: `https://cdn.emooa.com/${music.url}`,\n    pic: `https://cdn.emooa.com/${music.pic}`,\n    lrc: `https://cdn.emooa.com/${music.lrc}`\n  }));\n  \n  console.log(1, audio)\n \n\n  // 移除loading\n  const loadingDom = document.getElementById('aplayer-loading');\n  loadingDom.style.display=\"none\"\n\n/** 加载aplayer */\n  const showAplayer = (audio, authorName)=> {\n    audio = audio.filter(item => {\n      if (authorName) {\n        if (authorName === '全部') return true;\n        return item.author === authorName;\n      }\n      return true\n    })\n\n    new APlayer({\n      container: document.getElementById('aplayer'),\n      mini: false,\n      autoplay: false,\n      // theme: '#FADFA3',\n      loop: 'all',\n      order: 'list',\n      preload: 'auto',\n      volume: 0.7,\n      mutex: true,\n      listFolded: false,\n      listMaxHeight: '400px',\n      lrcType: 3,\n      audio: audio,\n    });\n  }\n\n  /** 加载歌手 */\n  const authorDom = document.getElementById('aplayer-author');\n  let author = audio.map(item => item.author);\n\n  var authorTimes = {};\n  for (var i = 0; i < author.length; i++) {\n    var key = author[i];\n    if (authorTimes[key]) {\n      authorTimes[key]++;\n    } else {\n      authorTimes[key] = 1;\n    }\n  }\n\n\n  author = Object.entries(authorTimes).sort((a,b) => b[1]-a[1])\n  author = [['全部', audio.length],...author];\n  author.forEach((item, index) => {\n    const div = document.createElement('div');\n    div.classList.add('aplayer-btn');\n    if(index === 0)  div.classList.add(`aplayer-btn-active`);\n    div.style.marginRight = '16px';\n    // 添加创建好的文本节点\n    div.appendChild(document.createTextNode(`${item[0]}${item[1]=== 1 ?'': `(${item[1]})`}`));\n    authorDom.appendChild(div);\n  });\n  const authorBtn = document.getElementsByClassName(\"aplayer-btn\");\n  const authorBtnActive = document.getElementsByClassName(\"aplayer-btn-active\");\n\n  let authorName;\n  for (let i in authorBtn) {\n    authorBtn[i].onclick = () => {\n      authorName=author[i][0];\n      showAplayer(audio, authorName);\n      if (authorBtnActive[0]) authorBtnActive[0].classList.remove('aplayer-btn-active')\n      authorBtn[i].classList.add('aplayer-btn-active');\n    }\n  }\n  showAplayer(audio);\n})\n\n</script>\n<!--\n{% aplayerlist %}{\"autoplay\": false,\"showlrc\": 3,\"mode\": \"list\", \"listMaxHeight\": \"400px\",\"music\": [\n  {\n    \"theme\": \"#ebd0c2\",\n    \"title\": \"云烟成雨\",\n    \"author\": \"房东的猫\",\n    \"url\": \"https://api.i-meto.com/meting/api?server=tencent&type=url&id=001yYM0I30CzdP&auth=243686f98a14224f0d462fb75e9a3dfe3f3d2b12\",\n    \"pic\": \"https://api.i-meto.com/meting/api?server=tencent&type=pic&id=004NFJ230yX0Nz&auth=f68522433cb19f7cf34ce99cb9cf7c2ba76ce5a9\",\n    \"lrc\": \"https://api.i-meto.com/meting/api?server=tencent&type=lrc&id=001yYM0I30CzdP&auth=0b75a8e1f5dbfaddd65cef905563e0b80a162cb2\"\n  }\n]}{% endaplayerlist %} -->\n","updated":"2025-06-11T06:24:04.086Z","path":"music/index.html","_id":"cmbhbylun0008gkc2ai3w7xh8","comments":1,"layout":"page","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><style >\n\n  #aplayer-author{\n    border-bottom: 1px solid #eee;\n    padding-bottom: 16px;\n  }\n  #aplayer-author>.aplayer-btn {\n    display: inline-block;\n    cursor: pointer;\n    color: #777;\n  }\n  #aplayer-author>.aplayer-btn:hover {\n    color: #333\n  }\n  #aplayer-author>.aplayer-btn-active {\n    color: #0077cc\n  }\n    #aplayer-author>.aplayer-btn-active:hover{\n    color: #0077cc\n  }\n\n\n</style>\n<div style=\"display: flex\">\n  <div style=\"width: 100px; min-width: 100px\">所有歌手</div>\n  <div id=\"aplayer-author\"></div>\n</div>\n<img id=\"aplayer-loading\" style=\"heigit: 160px; width: 160px; opacity: 0\" src=\"/img/loading.gif\"></img>\n<div id=\"aplayer\"></div>\n\n<script>\nconst getJSON = function(url) {\n    const promise = new Promise(function(resolve, reject){\n        const handler = function() {\n            if (this.readyState !== 4) {\n                return;\n            }\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        const client = new XMLHttpRequest();\n        client.open(\"GET\", url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n\n    });\n    return promise;\n};\n\n  const dom = document.getElementById('aplayer-loading');\n  setTimeout(() => {\n     if(dom) { dom.style.opacity = 100; }\n  }, 300)\n\ngetJSON(\"https://cdn.emooa.com/output.json\").then(function(json = {}) {\n\n  // 随机排序\n  const shuffle = (arr) => {\n    let i = arr.length;\n    while(i) {\n      let j = Math.floor(Math.random() * i--);\n      [arr[j], arr[i]] = [arr[i], arr[j]]\n    } return arr;\n  }\n\n  let audio = shuffle(json.music).map(music => ({...music, \n    url: `https://cdn.emooa.com/${music.url}`,\n    pic: `https://cdn.emooa.com/${music.pic}`,\n    lrc: `https://cdn.emooa.com/${music.lrc}`\n  }));\n  \n  console.log(1, audio)\n \n\n  // 移除loading\n  const loadingDom = document.getElementById('aplayer-loading');\n  loadingDom.style.display=\"none\"\n\n/** 加载aplayer */\n  const showAplayer = (audio, authorName)=> {\n    audio = audio.filter(item => {\n      if (authorName) {\n        if (authorName === '全部') return true;\n        return item.author === authorName;\n      }\n      return true\n    })\n\n    new APlayer({\n      container: document.getElementById('aplayer'),\n      mini: false,\n      autoplay: false,\n      // theme: '#FADFA3',\n      loop: 'all',\n      order: 'list',\n      preload: 'auto',\n      volume: 0.7,\n      mutex: true,\n      listFolded: false,\n      listMaxHeight: '400px',\n      lrcType: 3,\n      audio: audio,\n    });\n  }\n\n  /** 加载歌手 */\n  const authorDom = document.getElementById('aplayer-author');\n  let author = audio.map(item => item.author);\n\n  var authorTimes = {};\n  for (var i = 0; i < author.length; i++) {\n    var key = author[i];\n    if (authorTimes[key]) {\n      authorTimes[key]++;\n    } else {\n      authorTimes[key] = 1;\n    }\n  }\n\n\n  author = Object.entries(authorTimes).sort((a,b) => b[1]-a[1])\n  author = [['全部', audio.length],...author];\n  author.forEach((item, index) => {\n    const div = document.createElement('div');\n    div.classList.add('aplayer-btn');\n    if(index === 0)  div.classList.add(`aplayer-btn-active`);\n    div.style.marginRight = '16px';\n    // 添加创建好的文本节点\n    div.appendChild(document.createTextNode(`${item[0]}${item[1]=== 1 ?'': `(${item[1]})`}`));\n    authorDom.appendChild(div);\n  });\n  const authorBtn = document.getElementsByClassName(\"aplayer-btn\");\n  const authorBtnActive = document.getElementsByClassName(\"aplayer-btn-active\");\n\n  let authorName;\n  for (let i in authorBtn) {\n    authorBtn[i].onclick = () => {\n      authorName=author[i][0];\n      showAplayer(audio, authorName);\n      if (authorBtnActive[0]) authorBtnActive[0].classList.remove('aplayer-btn-active')\n      authorBtn[i].classList.add('aplayer-btn-active');\n    }\n  }\n  showAplayer(audio);\n})\n\n</script>\n<!--\n\n        <div id=\"aplayer-pNyiAuGa\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"list\",\"listMaxHeight\":\"400px\",\"music\":[{\"theme\":\"#ebd0c2\",\"title\":\"云烟成雨\",\"author\":\"房东的猫\",\"url\":\"https://api.i-meto.com/meting/api?server=tencent&type=url&id=001yYM0I30CzdP&auth=243686f98a14224f0d462fb75e9a3dfe3f3d2b12\",\"pic\":\"https://api.i-meto.com/meting/api?server=tencent&type=pic&id=004NFJ230yX0Nz&auth=f68522433cb19f7cf34ce99cb9cf7c2ba76ce5a9\",\"lrc\":\"https://api.i-meto.com/meting/api?server=tencent&type=lrc&id=001yYM0I30CzdP&auth=0b75a8e1f5dbfaddd65cef905563e0b80a162cb2\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-pNyiAuGa\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script> -->\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/friends.jpg","excerpt":"","more":"<style >\n\n  #aplayer-author{\n    border-bottom: 1px solid #eee;\n    padding-bottom: 16px;\n  }\n  #aplayer-author>.aplayer-btn {\n    display: inline-block;\n    cursor: pointer;\n    color: #777;\n  }\n  #aplayer-author>.aplayer-btn:hover {\n    color: #333\n  }\n  #aplayer-author>.aplayer-btn-active {\n    color: #0077cc\n  }\n    #aplayer-author>.aplayer-btn-active:hover{\n    color: #0077cc\n  }\n\n\n</style>\n<div style=\"display: flex\">\n  <div style=\"width: 100px; min-width: 100px\">所有歌手</div>\n  <div id=\"aplayer-author\"></div>\n</div>\n<img id=\"aplayer-loading\" style=\"heigit: 160px; width: 160px; opacity: 0\" src=\"/img/loading.gif\"></img>\n<div id=\"aplayer\"></div>\n\n<script>\nconst getJSON = function(url) {\n    const promise = new Promise(function(resolve, reject){\n        const handler = function() {\n            if (this.readyState !== 4) {\n                return;\n            }\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        const client = new XMLHttpRequest();\n        client.open(\"GET\", url);\n        client.onreadystatechange = handler;\n        client.responseType = \"json\";\n        client.setRequestHeader(\"Accept\", \"application/json\");\n        client.send();\n\n    });\n    return promise;\n};\n\n  const dom = document.getElementById('aplayer-loading');\n  setTimeout(() => {\n     if(dom) { dom.style.opacity = 100; }\n  }, 300)\n\ngetJSON(\"https://cdn.emooa.com/output.json\").then(function(json = {}) {\n\n  // 随机排序\n  const shuffle = (arr) => {\n    let i = arr.length;\n    while(i) {\n      let j = Math.floor(Math.random() * i--);\n      [arr[j], arr[i]] = [arr[i], arr[j]]\n    } return arr;\n  }\n\n  let audio = shuffle(json.music).map(music => ({...music, \n    url: `https://cdn.emooa.com/${music.url}`,\n    pic: `https://cdn.emooa.com/${music.pic}`,\n    lrc: `https://cdn.emooa.com/${music.lrc}`\n  }));\n  \n  console.log(1, audio)\n \n\n  // 移除loading\n  const loadingDom = document.getElementById('aplayer-loading');\n  loadingDom.style.display=\"none\"\n\n/** 加载aplayer */\n  const showAplayer = (audio, authorName)=> {\n    audio = audio.filter(item => {\n      if (authorName) {\n        if (authorName === '全部') return true;\n        return item.author === authorName;\n      }\n      return true\n    })\n\n    new APlayer({\n      container: document.getElementById('aplayer'),\n      mini: false,\n      autoplay: false,\n      // theme: '#FADFA3',\n      loop: 'all',\n      order: 'list',\n      preload: 'auto',\n      volume: 0.7,\n      mutex: true,\n      listFolded: false,\n      listMaxHeight: '400px',\n      lrcType: 3,\n      audio: audio,\n    });\n  }\n\n  /** 加载歌手 */\n  const authorDom = document.getElementById('aplayer-author');\n  let author = audio.map(item => item.author);\n\n  var authorTimes = {};\n  for (var i = 0; i < author.length; i++) {\n    var key = author[i];\n    if (authorTimes[key]) {\n      authorTimes[key]++;\n    } else {\n      authorTimes[key] = 1;\n    }\n  }\n\n\n  author = Object.entries(authorTimes).sort((a,b) => b[1]-a[1])\n  author = [['全部', audio.length],...author];\n  author.forEach((item, index) => {\n    const div = document.createElement('div');\n    div.classList.add('aplayer-btn');\n    if(index === 0)  div.classList.add(`aplayer-btn-active`);\n    div.style.marginRight = '16px';\n    // 添加创建好的文本节点\n    div.appendChild(document.createTextNode(`${item[0]}${item[1]=== 1 ?'': `(${item[1]})`}`));\n    authorDom.appendChild(div);\n  });\n  const authorBtn = document.getElementsByClassName(\"aplayer-btn\");\n  const authorBtnActive = document.getElementsByClassName(\"aplayer-btn-active\");\n\n  let authorName;\n  for (let i in authorBtn) {\n    authorBtn[i].onclick = () => {\n      authorName=author[i][0];\n      showAplayer(audio, authorName);\n      if (authorBtnActive[0]) authorBtnActive[0].classList.remove('aplayer-btn-active')\n      authorBtn[i].classList.add('aplayer-btn-active');\n    }\n  }\n  showAplayer(audio);\n})\n\n</script>\n<!--\n\n        <div id=\"aplayer-pNyiAuGa\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"list\",\"listMaxHeight\":\"400px\",\"music\":[{\"theme\":\"#ebd0c2\",\"title\":\"云烟成雨\",\"author\":\"房东的猫\",\"url\":\"https://api.i-meto.com/meting/api?server=tencent&type=url&id=001yYM0I30CzdP&auth=243686f98a14224f0d462fb75e9a3dfe3f3d2b12\",\"pic\":\"https://api.i-meto.com/meting/api?server=tencent&type=pic&id=004NFJ230yX0Nz&auth=f68522433cb19f7cf34ce99cb9cf7c2ba76ce5a9\",\"lrc\":\"https://api.i-meto.com/meting/api?server=tencent&type=lrc&id=001yYM0I30CzdP&auth=0b75a8e1f5dbfaddd65cef905563e0b80a162cb2\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-pNyiAuGa\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script> -->\n"},{"_content":"","source":"css/fps.css","raw":"","date":"2025-06-04T02:27:27.927Z","updated":"2025-05-28T02:58:54.000Z","path":"css/fps.css","layout":"false","title":"","comments":1,"_id":"cmbhbyluo000agkc21qak42zs","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/friends.jpg","excerpt":"","more":""}],"Post":[{"title":"正则表达式","date":"2021-03-02T10:59:22.000Z","cover":"/img/avatar-regex.png","keywords":["博客","blog","正则表达式","RegExp","regex"],"_content":"# 语法\n\n| 字符                                         | 描述                                                                                                                                                                                                                                  |\n| ------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `\\`                                        | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\\\”匹配“\\”而“\\(”则匹配“(”。                                                                                                                                         |\n| `^`                                        | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^也匹配“\\n”或“\\r”之后的位置。                                                                                                                                                                      |\n| `$`                                        | 匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，\\$也匹配“\\n”或“\\r”之前的位置。                                                                                                                                                                     |\n| `*`                                        | 匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。                                                                                                                                                                                        |\n| `+`                                        | 匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。                                                                                                                                                                            |\n| `?`                                        | 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。                                                                                                                                                                       |\n| `{n}`                                      | n 是一个非负整数。匹配确定的 n 次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个 o。                                                                                                                                                                      |\n| `{n,}`                                     | n 是一个非负整数。至少匹配 n 次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有 o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o\\*”。                                                                                                                                    |\n| `{n,m}`                                    | m 和 n 均为非负整数，其中 n<=m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}”将匹配“fooooood”中的前三个 o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。                                                                                                                           |\n| `?`                                        | 当该字符紧跟在任何一个其他限制符（\\*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。                                                                                        |\n| `.`                                        | 匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符，请使用像“(.&#124;\\n)”的模式。                                                                                                                                                                             |\n| `(pattern)`                                | 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用$0…$9 属性。要匹配圆括号字符，请使用“\\(”或“\\)”。                                                                                                             |\n| `(?:pattern)`                              | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(&#124;)”来组合一个模式的各个部分是很有用。例如“industr(?:y&#124;ies)”就是一个比“industry&#124;industries”更简略的表达式。                                                                                     |\n| `(?=pattern)`                              | 正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95&#124;98 &#124;NT&#124;2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |\n| `(?!pattern)`                              | 正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95&#124;98&#124;NT&#124;2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。  |\n| <p style=\"width: 140px\">`(?<=pattern)`</p> | 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“(?<=95&#124;98&#124;NT&#124;2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。                                                                                                      |\n| `(?<!pattern)`                             | 反向否定预查，与正向否定预查类拟，只是方向相反。例如“(?<!95&#124;98&#124;NT&#124;2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。                                                                                                       |\n| `x&#124;y`                                 | 匹配 x 或 y。例如，“z&#124;food”能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”。                                                                                                                                                             |\n| `[xyz]`                                    | 字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。                                                                                                                                                                                       |\n| `[^xyz]`                                   | 负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。                                                                                                                                                                                      |\n| `[a-z]`                                    | 字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。                                                                                                                                                                                |\n| `[^a-z]`                                   | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。                                                                                                                                                                         |\n| `\\b`                                       | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。                                                                                                                                                                |\n| `\\B`                                       | 匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。                                                                                                                                                                                   |\n| `\\cx`                                      | 匹配由 x 指明的控制字符。例如，\\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的“c”字符。                                                                                                                                                  |\n| `\\d`                                       | 匹配一个数字字符。等价于[0-9]。                                                                                                                                                                                                                  |\n| `\\D`                                       | 匹配一个非数字字符。等价于[^0-9]。                                                                                                                                                                                                                |\n| `\\f`                                       | 匹配一个换页符。等价于\\x0c 和\\cL。                                                                                                                                                                                                               |\n| `\\n`                                       | 匹配一个换行符。等价于\\x0a 和\\cJ。                                                                                                                                                                                                               |\n| `\\r`                                       | 匹配一个回车符。等价于\\x0d 和\\cM。                                                                                                                                                                                                               |\n| `\\s`                                       | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。                                                                                                                                                                                           |\n| `\\S`                                       | 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。                                                                                                                                                                                                        |\n| `\\t`                                       | 匹配一个制表符。等价于\\x09 和\\cI。                                                                                                                                                                                                               |\n| `\\v`                                       | 匹配一个垂直制表符。等价于\\x0b 和\\cK。                                                                                                                                                                                                             |\n| `\\w`                                       | 匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。                                                                                                                                                                                                   |\n| `\\W `                                      | 匹配任何非单词字符。等价于“[^a-za-z0-9_]”。                                                                                                                                                                                                       |\n| `\\xn`                                      | 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&1”。正则表达式中可以使用 ASCII 编码。                                                                                                                                       |\n| `\\num`                                     | 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。                                                                                                                                                                              |\n| `\\n`                                       | 标识一个八进制转义值或一个向后引用。如果\\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字（0-7），则 n 为一个八进制转义值。                                                                                                                                                 |\n| `\\nm`                                      | 标识一个八进制转义值或一个向后引用。如果\\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果\\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字（0-7），则\\nm 将匹配八进制转义值 nm。                                                                                       |\n| `\\nml`                                     | 如果 n 为八进制数字（0-3），且 m 和 l 均为八进制数字（0-7），则匹配八进制转义值 nml。                                                                                                                                                                                |\n| `\\un`                                      | 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，\\u00A9 匹配版权符号（©）。                                                                                                                                                                           |\n\n# 常用正则表达式\n\n| 字符                     | 描述                                                                                                                                                                                                                                      |\n| ------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 用户名                   | `/^([a-zA-Z][-a-z0-9A-Z]{0,64})$/` // 必须以字母开头，可含数字、字母（大小写敏感）、连字符组成，0-64 位字符。                                                                                                                             |\n| 密码                     | `/^[a-z0-9_-]{6,18}$/`                                                                                                                                                                                                                    |\n| 十六进制值               | <code>/^#?([a-f0-9]{6}&#124;[a-f0-9]{3})\\$/</code>                                                                                                                                                                                        |\n| 电子邮箱                 | `/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})\\$/` <br> `/^[a-z\\d]+(\\.[a-z\\d]+)\\_@([\\da-z](-[\\da-z])?)+(\\.{1,2}[a-z]+)+$/`                                                                                                              |\n| URL                      | `/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]_)_\\/?$/`                                                                                                                                                                        |\n| IP 地址                  | <code>/((2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)\\.){3}(2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)/</code> <br> <code>/^(?:(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)\\$/</code> |\n| HTML 标签                | <code>/^<([a-z]+)([^<]+)_(?:>(._)<\\/\\1>&#124;\\s+\\/>)\\$/</code>                                                                                                                                                                            |\n| 删除代码 \\\\\\\\注释        | <code>(?\\<!http:&#124;\\S)//.\\*\\$</code>                                                                                                                                                                                                   |\n| Unicode 编码中的汉字范围 | `/^[\\u2E80-\\u9FFF]+$/`                                                                                                                                                                                                                    |\n| git 仓库                 | `/(?<=\\/)[^\\/]+(?=\\.git)/`                                                                                                                                                                                                                |\n","source":"_posts/regexp.md","raw":"---\ntitle: 正则表达式\ndate: 2021-03-02 18:59:22\ncover: /img/avatar-regex.png\ncategories:\n  - 实用教程\ntags:\n  - RegExp\nkeywords:\n  - 博客\n  - blog\n  - 正则表达式\n  - RegExp\n  - regex\n---\n# 语法\n\n| 字符                                         | 描述                                                                                                                                                                                                                                  |\n| ------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `\\`                                        | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\\\”匹配“\\”而“\\(”则匹配“(”。                                                                                                                                         |\n| `^`                                        | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^也匹配“\\n”或“\\r”之后的位置。                                                                                                                                                                      |\n| `$`                                        | 匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，\\$也匹配“\\n”或“\\r”之前的位置。                                                                                                                                                                     |\n| `*`                                        | 匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。                                                                                                                                                                                        |\n| `+`                                        | 匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。                                                                                                                                                                            |\n| `?`                                        | 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。                                                                                                                                                                       |\n| `{n}`                                      | n 是一个非负整数。匹配确定的 n 次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个 o。                                                                                                                                                                      |\n| `{n,}`                                     | n 是一个非负整数。至少匹配 n 次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有 o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o\\*”。                                                                                                                                    |\n| `{n,m}`                                    | m 和 n 均为非负整数，其中 n<=m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}”将匹配“fooooood”中的前三个 o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。                                                                                                                           |\n| `?`                                        | 当该字符紧跟在任何一个其他限制符（\\*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。                                                                                        |\n| `.`                                        | 匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符，请使用像“(.&#124;\\n)”的模式。                                                                                                                                                                             |\n| `(pattern)`                                | 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用$0…$9 属性。要匹配圆括号字符，请使用“\\(”或“\\)”。                                                                                                             |\n| `(?:pattern)`                              | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(&#124;)”来组合一个模式的各个部分是很有用。例如“industr(?:y&#124;ies)”就是一个比“industry&#124;industries”更简略的表达式。                                                                                     |\n| `(?=pattern)`                              | 正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95&#124;98 &#124;NT&#124;2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |\n| `(?!pattern)`                              | 正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95&#124;98&#124;NT&#124;2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。  |\n| <p style=\"width: 140px\">`(?<=pattern)`</p> | 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“(?<=95&#124;98&#124;NT&#124;2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。                                                                                                      |\n| `(?<!pattern)`                             | 反向否定预查，与正向否定预查类拟，只是方向相反。例如“(?<!95&#124;98&#124;NT&#124;2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。                                                                                                       |\n| `x&#124;y`                                 | 匹配 x 或 y。例如，“z&#124;food”能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”。                                                                                                                                                             |\n| `[xyz]`                                    | 字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。                                                                                                                                                                                       |\n| `[^xyz]`                                   | 负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。                                                                                                                                                                                      |\n| `[a-z]`                                    | 字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。                                                                                                                                                                                |\n| `[^a-z]`                                   | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。                                                                                                                                                                         |\n| `\\b`                                       | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。                                                                                                                                                                |\n| `\\B`                                       | 匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。                                                                                                                                                                                   |\n| `\\cx`                                      | 匹配由 x 指明的控制字符。例如，\\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的“c”字符。                                                                                                                                                  |\n| `\\d`                                       | 匹配一个数字字符。等价于[0-9]。                                                                                                                                                                                                                  |\n| `\\D`                                       | 匹配一个非数字字符。等价于[^0-9]。                                                                                                                                                                                                                |\n| `\\f`                                       | 匹配一个换页符。等价于\\x0c 和\\cL。                                                                                                                                                                                                               |\n| `\\n`                                       | 匹配一个换行符。等价于\\x0a 和\\cJ。                                                                                                                                                                                                               |\n| `\\r`                                       | 匹配一个回车符。等价于\\x0d 和\\cM。                                                                                                                                                                                                               |\n| `\\s`                                       | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。                                                                                                                                                                                           |\n| `\\S`                                       | 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。                                                                                                                                                                                                        |\n| `\\t`                                       | 匹配一个制表符。等价于\\x09 和\\cI。                                                                                                                                                                                                               |\n| `\\v`                                       | 匹配一个垂直制表符。等价于\\x0b 和\\cK。                                                                                                                                                                                                             |\n| `\\w`                                       | 匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。                                                                                                                                                                                                   |\n| `\\W `                                      | 匹配任何非单词字符。等价于“[^a-za-z0-9_]”。                                                                                                                                                                                                       |\n| `\\xn`                                      | 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&1”。正则表达式中可以使用 ASCII 编码。                                                                                                                                       |\n| `\\num`                                     | 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。                                                                                                                                                                              |\n| `\\n`                                       | 标识一个八进制转义值或一个向后引用。如果\\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字（0-7），则 n 为一个八进制转义值。                                                                                                                                                 |\n| `\\nm`                                      | 标识一个八进制转义值或一个向后引用。如果\\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果\\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字（0-7），则\\nm 将匹配八进制转义值 nm。                                                                                       |\n| `\\nml`                                     | 如果 n 为八进制数字（0-3），且 m 和 l 均为八进制数字（0-7），则匹配八进制转义值 nml。                                                                                                                                                                                |\n| `\\un`                                      | 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，\\u00A9 匹配版权符号（©）。                                                                                                                                                                           |\n\n# 常用正则表达式\n\n| 字符                     | 描述                                                                                                                                                                                                                                      |\n| ------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 用户名                   | `/^([a-zA-Z][-a-z0-9A-Z]{0,64})$/` // 必须以字母开头，可含数字、字母（大小写敏感）、连字符组成，0-64 位字符。                                                                                                                             |\n| 密码                     | `/^[a-z0-9_-]{6,18}$/`                                                                                                                                                                                                                    |\n| 十六进制值               | <code>/^#?([a-f0-9]{6}&#124;[a-f0-9]{3})\\$/</code>                                                                                                                                                                                        |\n| 电子邮箱                 | `/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})\\$/` <br> `/^[a-z\\d]+(\\.[a-z\\d]+)\\_@([\\da-z](-[\\da-z])?)+(\\.{1,2}[a-z]+)+$/`                                                                                                              |\n| URL                      | `/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]_)_\\/?$/`                                                                                                                                                                        |\n| IP 地址                  | <code>/((2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)\\.){3}(2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)/</code> <br> <code>/^(?:(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)\\$/</code> |\n| HTML 标签                | <code>/^<([a-z]+)([^<]+)_(?:>(._)<\\/\\1>&#124;\\s+\\/>)\\$/</code>                                                                                                                                                                            |\n| 删除代码 \\\\\\\\注释        | <code>(?\\<!http:&#124;\\S)//.\\*\\$</code>                                                                                                                                                                                                   |\n| Unicode 编码中的汉字范围 | `/^[\\u2E80-\\u9FFF]+$/`                                                                                                                                                                                                                    |\n| git 仓库                 | `/(?<=\\/)[^\\/]+(?=\\.git)/`                                                                                                                                                                                                                |\n","slug":"regexp","published":1,"updated":"2025-06-24T06:07:38.679Z","_id":"cmbhbylv70050gkc23qxde8ys","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\</code></td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\”匹配“\\”而“(”则匹配“(”。</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^也匹配“\\n”或“\\r”之后的位置。</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$也匹配“\\n”或“\\r”之前的位置。</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“z”以及“zoo”。</em>等价于{0,}。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个 o。</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>n 是一个非负整数。至少匹配 n 次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有 o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>m 和 n 均为非负整数，其中 n&lt;=m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}”将匹配“fooooood”中的前三个 o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符，请使用像“(.&#124;\\n)”的模式。</td>\n</tr>\n<tr>\n<td><code>(pattern)</code></td>\n<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用$0…$9 属性。要匹配圆括号字符，请使用“(”或“)”。</td>\n</tr>\n<tr>\n<td><code>(?:pattern)</code></td>\n<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(&#124;)”来组合一个模式的各个部分是很有用。例如“industr(?:y&#124;ies)”就是一个比“industry&#124;industries”更简略的表达式。</td>\n</tr>\n<tr>\n<td><code>(?=pattern)</code></td>\n<td>正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95&#124;98 &#124;NT&#124;2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td><code>(?!pattern)</code></td>\n<td>正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95&#124;98&#124;NT&#124;2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td><p style=\"width: 140px\"><code>(?&lt;=pattern)</code></p></td>\n<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“(?&lt;=95&#124;98&#124;NT&#124;2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td>\n</tr>\n<tr>\n<td><code>(?&lt;!pattern)</code></td>\n<td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“(?&lt;!95&#124;98&#124;NT&#124;2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。</td>\n</tr>\n<tr>\n<td><code>x&amp;#124;y</code></td>\n<td>匹配 x 或 y。例如，“z&#124;food”能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td><code>[xyz]</code></td>\n<td>字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td><code>[^xyz]</code></td>\n<td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。</td>\n</tr>\n<tr>\n<td><code>[a-z]</code></td>\n<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td><code>[^a-z]</code></td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td><code>\\cx</code></td>\n<td>匹配由 x 指明的控制字符。例如，\\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的“c”字符。</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>匹配一个换页符。等价于\\x0c 和\\cL。</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>匹配一个换行符。等价于\\x0a 和\\cJ。</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>匹配一个回车符。等价于\\x0d 和\\cM。</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>匹配一个制表符。等价于\\x09 和\\cI。</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>匹配一个垂直制表符。等价于\\x0b 和\\cK。</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。</td>\n</tr>\n<tr>\n<td><code>\\W </code></td>\n<td>匹配任何非单词字符。等价于“[^a-za-z0-9_]”。</td>\n</tr>\n<tr>\n<td><code>\\xn</code></td>\n<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&amp;1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td><code>\\num</code></td>\n<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>标识一个八进制转义值或一个向后引用。如果\\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字（0-7），则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td><code>\\nm</code></td>\n<td>标识一个八进制转义值或一个向后引用。如果\\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果\\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字（0-7），则\\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td><code>\\nml</code></td>\n<td>如果 n 为八进制数字（0-3），且 m 和 l 均为八进制数字（0-7），则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td><code>\\un</code></td>\n<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，\\u00A9 匹配版权符号（©）。</td>\n</tr>\n</tbody></table>\n<h1 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户名</td>\n<td><code>/^([a-zA-Z][-a-z0-9A-Z]&#123;0,64&#125;)$/</code> // 必须以字母开头，可含数字、字母（大小写敏感）、连字符组成，0-64 位字符。</td>\n</tr>\n<tr>\n<td>密码</td>\n<td><code>/^[a-z0-9_-]&#123;6,18&#125;$/</code></td>\n</tr>\n<tr>\n<td>十六进制值</td>\n<td><code>/^#?([a-f0-9]&#123;6&#125;&#124;[a-f0-9]&#123;3&#125;)$/</code></td>\n</tr>\n<tr>\n<td>电子邮箱</td>\n<td><code>/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)\\$/</code> <br> <code>/^[a-z\\d]+(\\.[a-z\\d]+)\\_@([\\da-z](-[\\da-z])?)+(\\.&#123;1,2&#125;[a-z]+)+$/</code></td>\n</tr>\n<tr>\n<td>URL</td>\n<td><code>/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)([\\/\\w \\.-]_)_\\/?$/</code></td>\n</tr>\n<tr>\n<td>IP 地址</td>\n<td><code>/((2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?).)&#123;3&#125;(2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)/</code> <br> <code>/^(?:(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?).)&#123;3&#125;(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)$/</code></td>\n</tr>\n<tr>\n<td>HTML 标签</td>\n<td><code>/^<([a-z]+)([^<]+)<em>(?:>(.</em>)</\\1>&#124;\\s+/>)$/</code></td>\n</tr>\n<tr>\n<td>删除代码 \\\\注释</td>\n<td><code>(?&lt;!http:&#124;\\S)//.*$</code></td>\n</tr>\n<tr>\n<td>Unicode 编码中的汉字范围</td>\n<td><code>/^[\\u2E80-\\u9FFF]+$/</code></td>\n</tr>\n<tr>\n<td>git 仓库</td>\n<td><code>/(?&lt;=\\/)[^\\/]+(?=\\.git)/</code></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\</code></td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\”匹配“\\”而“(”则匹配“(”。</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^也匹配“\\n”或“\\r”之后的位置。</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$也匹配“\\n”或“\\r”之前的位置。</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“z”以及“zoo”。</em>等价于{0,}。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个 o。</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>n 是一个非负整数。至少匹配 n 次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有 o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>m 和 n 均为非负整数，其中 n&lt;=m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}”将匹配“fooooood”中的前三个 o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符，请使用像“(.&#124;\\n)”的模式。</td>\n</tr>\n<tr>\n<td><code>(pattern)</code></td>\n<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用$0…$9 属性。要匹配圆括号字符，请使用“(”或“)”。</td>\n</tr>\n<tr>\n<td><code>(?:pattern)</code></td>\n<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(&#124;)”来组合一个模式的各个部分是很有用。例如“industr(?:y&#124;ies)”就是一个比“industry&#124;industries”更简略的表达式。</td>\n</tr>\n<tr>\n<td><code>(?=pattern)</code></td>\n<td>正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95&#124;98 &#124;NT&#124;2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td><code>(?!pattern)</code></td>\n<td>正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95&#124;98&#124;NT&#124;2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td><p style=\"width: 140px\"><code>(?&lt;=pattern)</code></p></td>\n<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“(?&lt;=95&#124;98&#124;NT&#124;2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td>\n</tr>\n<tr>\n<td><code>(?&lt;!pattern)</code></td>\n<td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“(?&lt;!95&#124;98&#124;NT&#124;2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。</td>\n</tr>\n<tr>\n<td><code>x&amp;#124;y</code></td>\n<td>匹配 x 或 y。例如，“z&#124;food”能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td><code>[xyz]</code></td>\n<td>字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td><code>[^xyz]</code></td>\n<td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。</td>\n</tr>\n<tr>\n<td><code>[a-z]</code></td>\n<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td><code>[^a-z]</code></td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td><code>\\cx</code></td>\n<td>匹配由 x 指明的控制字符。例如，\\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的“c”字符。</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>匹配一个换页符。等价于\\x0c 和\\cL。</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>匹配一个换行符。等价于\\x0a 和\\cJ。</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>匹配一个回车符。等价于\\x0d 和\\cM。</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>匹配一个制表符。等价于\\x09 和\\cI。</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>匹配一个垂直制表符。等价于\\x0b 和\\cK。</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。</td>\n</tr>\n<tr>\n<td><code>\\W </code></td>\n<td>匹配任何非单词字符。等价于“[^a-za-z0-9_]”。</td>\n</tr>\n<tr>\n<td><code>\\xn</code></td>\n<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&amp;1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td><code>\\num</code></td>\n<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>标识一个八进制转义值或一个向后引用。如果\\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字（0-7），则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td><code>\\nm</code></td>\n<td>标识一个八进制转义值或一个向后引用。如果\\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果\\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字（0-7），则\\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td><code>\\nml</code></td>\n<td>如果 n 为八进制数字（0-3），且 m 和 l 均为八进制数字（0-7），则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td><code>\\un</code></td>\n<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，\\u00A9 匹配版权符号（©）。</td>\n</tr>\n</tbody></table>\n<h1 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h1><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户名</td>\n<td><code>/^([a-zA-Z][-a-z0-9A-Z]&#123;0,64&#125;)$/</code> // 必须以字母开头，可含数字、字母（大小写敏感）、连字符组成，0-64 位字符。</td>\n</tr>\n<tr>\n<td>密码</td>\n<td><code>/^[a-z0-9_-]&#123;6,18&#125;$/</code></td>\n</tr>\n<tr>\n<td>十六进制值</td>\n<td><code>/^#?([a-f0-9]&#123;6&#125;&#124;[a-f0-9]&#123;3&#125;)$/</code></td>\n</tr>\n<tr>\n<td>电子邮箱</td>\n<td><code>/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)\\$/</code> <br> <code>/^[a-z\\d]+(\\.[a-z\\d]+)\\_@([\\da-z](-[\\da-z])?)+(\\.&#123;1,2&#125;[a-z]+)+$/</code></td>\n</tr>\n<tr>\n<td>URL</td>\n<td><code>/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)([\\/\\w \\.-]_)_\\/?$/</code></td>\n</tr>\n<tr>\n<td>IP 地址</td>\n<td><code>/((2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?).)&#123;3&#125;(2[0-4]\\d&#124;25[0-5]&#124;[01]?\\d\\d?)/</code> <br> <code>/^(?:(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?).)&#123;3&#125;(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)$/</code></td>\n</tr>\n<tr>\n<td>HTML 标签</td>\n<td><code>/^<([a-z]+)([^<]+)<em>(?:>(.</em>)</\\1>&#124;\\s+/>)$/</code></td>\n</tr>\n<tr>\n<td>删除代码 \\\\注释</td>\n<td><code>(?&lt;!http:&#124;\\S)//.*$</code></td>\n</tr>\n<tr>\n<td>Unicode 编码中的汉字范围</td>\n<td><code>/^[\\u2E80-\\u9FFF]+$/</code></td>\n</tr>\n<tr>\n<td>git 仓库</td>\n<td><code>/(?&lt;=\\/)[^\\/]+(?=\\.git)/</code></td>\n</tr>\n</tbody></table>\n"},{"title":"OpenGL入门第一课：它的核心思维，不是函数，而是状态","date":"2021-06-10T06:34:22.000Z","cover":"/img/01/01/opengl1.png","keywords":["博客","blog","OpenGL","渲染"],"_content":"---\n# OpenGL是什么\n\n凡人的误解：一般它被认为是一个API(Application Programming Interface)，即应用程序编程接口，包含了一系列可以操作图形、图像的函数。\n真实的理解：他仅仅是一个由Khronos组织制定并维护的规范(Specification)。\nOpenGL严格规范了每个函数该如何执行，以及他们的输出值。至于内部的实现，是OpenGL开发者自由发挥的。因此OpenGL给开发者的自由度实际上是很高的，只要遵循他的龟范，即函数的功能和返回值，剩下的FreeStyle。\n实际上的OpenGL库基本都是生产显卡的厂商开发的，普及一个常识，当显示产生BUG的时候通常都会通过升级显卡驱动来解决，这些驱动会让你的显卡支持最新版本的OpenGL，这也是为什么总是建议更新显卡驱动。\n\n---\n# 核心模式与立即渲染模式\n\n早期的OpenGL采用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。但是提供方便的同时肯定是包装过度，牺牲了一部分的自由度。随着时间的推移，规范越来越灵活，开发者对绘图细节有了更多的掌握。因此从**OpenGL3.2**开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式模式（Core-profile）下开发，这个分支的规范完全移除了旧的特性。\n使用OpenGL核心模式，该规范迫使我们使用现代的函数。当试图使用一个已经废弃的函数时，OpenGL会抛出一个错误并终止绘图。然后有舍就有得，当提供更高的灵活性和效率得同时，必定会更难以理解和学习，使用Core-profile会让很难去把握OpenGL具体是如何运作的。\n\n---\n# 拓展\n\nOpenGL的一大特性就是对拓展（Extension）的支持，当一个显卡公司提出一个新特性或者渲染上的大优化，通常会以拓展的方式在驱动中实现。通常，当一个扩展非常流行或者非常有用的时候，它将最终成为未来的OpenGL规范的一部分。拓展就像发布正式版本前的补丁一样。\n使用扩展的代码大多看上去如下：\n```c++\nif (GL_ARB_extension_name)\n{\n    // 使用硬件支持的全新的现代特性\n}\nelse\n{\n    // 不支持此扩展: 用旧的方式去做\n}\n```\n\n---\n# 状态机\n\n当使用OpenGL的时候，会遇到一些状态设置函数(State-changing Function)，这类函数将会改变上下文。以及状态使用函数(State-using Function)，这类函数会根据当前OpenGL的状态执行一些操作。\n1. 例如设置颜色状态\n```c++\nglColor3f(1.0f, 0.0f, 0.0f); // 设置当前颜色为红色\nglBegin(GL_TRIANGLES);\n    glVertex3f(...); // 这个顶点就是红色的\n    ...\nglEnd();\n```\n注意 `glVertex3f` 没有带颜色参数，是因为“当前颜色”已经被设置进 OpenGL 的状态了。\n2. 例如设置绑定纹理状态\n```c++\nglBindTexture(GL_TEXTURE_2D, textureA);\n// 接下来的绘制就用 textureA\n\nglBindTexture(GL_TEXTURE_2D, textureB);\n// 接下来改成用 textureB\n```\n\n---\n# 对象\n\nOpenGL库是用C语言写的，同时也支持多种语言的派生，但其内核仍是一个C库。由于C的一些语言结构不易被翻译到其它的高级语言，因此OpenGL开发的时候引入了一些抽象层。“对象(Object)”就是其中一个。\n在OpenGL中一个对象是指一些选项的集合，它代表OpenGL状态的一个子集。比如，我们可以用一个对象来代表绘图窗口的设置，之后我们就可以设置它的大小、支持的颜色位数等等。可以把对象看做一个C风格的结构体(Struct)：\n```c\nstruct object_name {\n    float  option1;\n    int    option2;\n    char[] name;\n};\n```\n\n---\n# OpenGL工作流\n```c++\n// OpenGL的状态\nstruct OpenGL_Context {\n  \t...\n  \tobject* object_Window_Target;\n  \t...  \t\n};\n```\n\n```c++\n// 创建对象\nunsigned int objectId = 0;\nglGenObject(1, &objectId);\n// 绑定对象至上下文\nglBindObject(GL_WINDOW_TARGET, objectId);\n// 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项\nglSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, 800);\nglSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, 600);\n// 将上下文对象设回默认\nglBindObject(GL_WINDOW_TARGET, 0);\n```\n这一小段代码展现了你以后使用OpenGL时常见的工作流。我们首先创建一个对象，然后用一个id保存它的引用（实际数据被储存在后台）。然后我们将对象绑定至上下文的目标位置（例子中窗口对象目标的位置被定义成<var>GL_WINDOW_TARGET</var>）。接下来我们设置窗口的选项。最后我们将目标位置的对象id设回0，解绑这个对象。设置的选项将被保存在<var>objectId</var>所引用的对象中，一旦我们重新绑定这个对象到<var>GL_WINDOW_TARGET</var>位置，这些选项就会重新生效。","source":"_posts/LearnOpenGL-Day1.md","raw":"---\ntitle: OpenGL入门第一课：它的核心思维，不是函数，而是状态\ndate: 2021-06-10 14:34:22\ncover: /img/01/01/opengl1.png\ncategories:\n  - 实用教程\ntags:\n  - OpenGL\nkeywords:\n  - 博客\n  - blog\n  - OpenGL\n  - 渲染\n---\n---\n# OpenGL是什么\n\n凡人的误解：一般它被认为是一个API(Application Programming Interface)，即应用程序编程接口，包含了一系列可以操作图形、图像的函数。\n真实的理解：他仅仅是一个由Khronos组织制定并维护的规范(Specification)。\nOpenGL严格规范了每个函数该如何执行，以及他们的输出值。至于内部的实现，是OpenGL开发者自由发挥的。因此OpenGL给开发者的自由度实际上是很高的，只要遵循他的龟范，即函数的功能和返回值，剩下的FreeStyle。\n实际上的OpenGL库基本都是生产显卡的厂商开发的，普及一个常识，当显示产生BUG的时候通常都会通过升级显卡驱动来解决，这些驱动会让你的显卡支持最新版本的OpenGL，这也是为什么总是建议更新显卡驱动。\n\n---\n# 核心模式与立即渲染模式\n\n早期的OpenGL采用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。但是提供方便的同时肯定是包装过度，牺牲了一部分的自由度。随着时间的推移，规范越来越灵活，开发者对绘图细节有了更多的掌握。因此从**OpenGL3.2**开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式模式（Core-profile）下开发，这个分支的规范完全移除了旧的特性。\n使用OpenGL核心模式，该规范迫使我们使用现代的函数。当试图使用一个已经废弃的函数时，OpenGL会抛出一个错误并终止绘图。然后有舍就有得，当提供更高的灵活性和效率得同时，必定会更难以理解和学习，使用Core-profile会让很难去把握OpenGL具体是如何运作的。\n\n---\n# 拓展\n\nOpenGL的一大特性就是对拓展（Extension）的支持，当一个显卡公司提出一个新特性或者渲染上的大优化，通常会以拓展的方式在驱动中实现。通常，当一个扩展非常流行或者非常有用的时候，它将最终成为未来的OpenGL规范的一部分。拓展就像发布正式版本前的补丁一样。\n使用扩展的代码大多看上去如下：\n```c++\nif (GL_ARB_extension_name)\n{\n    // 使用硬件支持的全新的现代特性\n}\nelse\n{\n    // 不支持此扩展: 用旧的方式去做\n}\n```\n\n---\n# 状态机\n\n当使用OpenGL的时候，会遇到一些状态设置函数(State-changing Function)，这类函数将会改变上下文。以及状态使用函数(State-using Function)，这类函数会根据当前OpenGL的状态执行一些操作。\n1. 例如设置颜色状态\n```c++\nglColor3f(1.0f, 0.0f, 0.0f); // 设置当前颜色为红色\nglBegin(GL_TRIANGLES);\n    glVertex3f(...); // 这个顶点就是红色的\n    ...\nglEnd();\n```\n注意 `glVertex3f` 没有带颜色参数，是因为“当前颜色”已经被设置进 OpenGL 的状态了。\n2. 例如设置绑定纹理状态\n```c++\nglBindTexture(GL_TEXTURE_2D, textureA);\n// 接下来的绘制就用 textureA\n\nglBindTexture(GL_TEXTURE_2D, textureB);\n// 接下来改成用 textureB\n```\n\n---\n# 对象\n\nOpenGL库是用C语言写的，同时也支持多种语言的派生，但其内核仍是一个C库。由于C的一些语言结构不易被翻译到其它的高级语言，因此OpenGL开发的时候引入了一些抽象层。“对象(Object)”就是其中一个。\n在OpenGL中一个对象是指一些选项的集合，它代表OpenGL状态的一个子集。比如，我们可以用一个对象来代表绘图窗口的设置，之后我们就可以设置它的大小、支持的颜色位数等等。可以把对象看做一个C风格的结构体(Struct)：\n```c\nstruct object_name {\n    float  option1;\n    int    option2;\n    char[] name;\n};\n```\n\n---\n# OpenGL工作流\n```c++\n// OpenGL的状态\nstruct OpenGL_Context {\n  \t...\n  \tobject* object_Window_Target;\n  \t...  \t\n};\n```\n\n```c++\n// 创建对象\nunsigned int objectId = 0;\nglGenObject(1, &objectId);\n// 绑定对象至上下文\nglBindObject(GL_WINDOW_TARGET, objectId);\n// 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项\nglSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, 800);\nglSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, 600);\n// 将上下文对象设回默认\nglBindObject(GL_WINDOW_TARGET, 0);\n```\n这一小段代码展现了你以后使用OpenGL时常见的工作流。我们首先创建一个对象，然后用一个id保存它的引用（实际数据被储存在后台）。然后我们将对象绑定至上下文的目标位置（例子中窗口对象目标的位置被定义成<var>GL_WINDOW_TARGET</var>）。接下来我们设置窗口的选项。最后我们将目标位置的对象id设回0，解绑这个对象。设置的选项将被保存在<var>objectId</var>所引用的对象中，一旦我们重新绑定这个对象到<var>GL_WINDOW_TARGET</var>位置，这些选项就会重新生效。","slug":"LearnOpenGL-Day1","published":1,"updated":"2025-06-11T08:16:02.795Z","_id":"cmbq6oksx0000lgc24f41c2ve","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><hr>\n<h1 id=\"OpenGL是什么\"><a href=\"#OpenGL是什么\" class=\"headerlink\" title=\"OpenGL是什么\"></a>OpenGL是什么</h1><p>凡人的误解：一般它被认为是一个API(Application Programming Interface)，即应用程序编程接口，包含了一系列可以操作图形、图像的函数。<br>真实的理解：他仅仅是一个由Khronos组织制定并维护的规范(Specification)。<br>OpenGL严格规范了每个函数该如何执行，以及他们的输出值。至于内部的实现，是OpenGL开发者自由发挥的。因此OpenGL给开发者的自由度实际上是很高的，只要遵循他的龟范，即函数的功能和返回值，剩下的FreeStyle。<br>实际上的OpenGL库基本都是生产显卡的厂商开发的，普及一个常识，当显示产生BUG的时候通常都会通过升级显卡驱动来解决，这些驱动会让你的显卡支持最新版本的OpenGL，这也是为什么总是建议更新显卡驱动。</p>\n<hr>\n<h1 id=\"核心模式与立即渲染模式\"><a href=\"#核心模式与立即渲染模式\" class=\"headerlink\" title=\"核心模式与立即渲染模式\"></a>核心模式与立即渲染模式</h1><p>早期的OpenGL采用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。但是提供方便的同时肯定是包装过度，牺牲了一部分的自由度。随着时间的推移，规范越来越灵活，开发者对绘图细节有了更多的掌握。因此从<strong>OpenGL3.2</strong>开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式模式（Core-profile）下开发，这个分支的规范完全移除了旧的特性。<br>使用OpenGL核心模式，该规范迫使我们使用现代的函数。当试图使用一个已经废弃的函数时，OpenGL会抛出一个错误并终止绘图。然后有舍就有得，当提供更高的灵活性和效率得同时，必定会更难以理解和学习，使用Core-profile会让很难去把握OpenGL具体是如何运作的。</p>\n<hr>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>OpenGL的一大特性就是对拓展（Extension）的支持，当一个显卡公司提出一个新特性或者渲染上的大优化，通常会以拓展的方式在驱动中实现。通常，当一个扩展非常流行或者非常有用的时候，它将最终成为未来的OpenGL规范的一部分。拓展就像发布正式版本前的补丁一样。<br>使用扩展的代码大多看上去如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (GL_ARB_extension_name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用硬件支持的全新的现代特性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不支持此扩展: 用旧的方式去做</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h1><p>当使用OpenGL的时候，会遇到一些状态设置函数(State-changing Function)，这类函数将会改变上下文。以及状态使用函数(State-using Function)，这类函数会根据当前OpenGL的状态执行一些操作。</p>\n<ol>\n<li>例如设置颜色状态<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glColor3f</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>); <span class=\"comment\">// 设置当前颜色为红色</span></span><br><span class=\"line\"><span class=\"built_in\">glBegin</span>(GL_TRIANGLES);</span><br><span class=\"line\">    <span class=\"built_in\">glVertex3f</span>(...); <span class=\"comment\">// 这个顶点就是红色的</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"built_in\">glEnd</span>();</span><br></pre></td></tr></table></figure>\n注意 <code>glVertex3f</code> 没有带颜色参数，是因为“当前颜色”已经被设置进 OpenGL 的状态了。</li>\n<li>例如设置绑定纹理状态<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, textureA);</span><br><span class=\"line\"><span class=\"comment\">// 接下来的绘制就用 textureA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, textureB);</span><br><span class=\"line\"><span class=\"comment\">// 接下来改成用 textureB</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><p>OpenGL库是用C语言写的，同时也支持多种语言的派生，但其内核仍是一个C库。由于C的一些语言结构不易被翻译到其它的高级语言，因此OpenGL开发的时候引入了一些抽象层。“对象(Object)”就是其中一个。<br>在OpenGL中一个对象是指一些选项的集合，它代表OpenGL状态的一个子集。比如，我们可以用一个对象来代表绘图窗口的设置，之后我们就可以设置它的大小、支持的颜色位数等等。可以把对象看做一个C风格的结构体(Struct)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">object_name</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">float</span>  option1;</span><br><span class=\"line\">    <span class=\"type\">int</span>    option2;</span><br><span class=\"line\">    <span class=\"type\">char</span>[] name;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"OpenGL工作流\"><a href=\"#OpenGL工作流\" class=\"headerlink\" title=\"OpenGL工作流\"></a>OpenGL工作流</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OpenGL的状态</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">OpenGL_Context</span> &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">  \tobject* object_Window_Target;</span><br><span class=\"line\">  \t...  \t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建对象</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> objectId = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">glGenObject</span>(<span class=\"number\">1</span>, &amp;objectId);</span><br><span class=\"line\"><span class=\"comment\">// 绑定对象至上下文</span></span><br><span class=\"line\"><span class=\"built_in\">glBindObject</span>(GL_WINDOW_TARGET, objectId);</span><br><span class=\"line\"><span class=\"comment\">// 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项</span></span><br><span class=\"line\"><span class=\"built_in\">glSetObjectOption</span>(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, <span class=\"number\">800</span>);</span><br><span class=\"line\"><span class=\"built_in\">glSetObjectOption</span>(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, <span class=\"number\">600</span>);</span><br><span class=\"line\"><span class=\"comment\">// 将上下文对象设回默认</span></span><br><span class=\"line\"><span class=\"built_in\">glBindObject</span>(GL_WINDOW_TARGET, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>这一小段代码展现了你以后使用OpenGL时常见的工作流。我们首先创建一个对象，然后用一个id保存它的引用（实际数据被储存在后台）。然后我们将对象绑定至上下文的目标位置（例子中窗口对象目标的位置被定义成<var>GL_WINDOW_TARGET</var>）。接下来我们设置窗口的选项。最后我们将目标位置的对象id设回0，解绑这个对象。设置的选项将被保存在<var>objectId</var>所引用的对象中，一旦我们重新绑定这个对象到<var>GL_WINDOW_TARGET</var>位置，这些选项就会重新生效。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"OpenGL是什么\"><a href=\"#OpenGL是什么\" class=\"headerlink\" title=\"OpenGL是什么\"></a>OpenGL是什么</h1><p>凡人的误解：一般它被认为是一个API(Application Programming Interface)，即应用程序编程接口，包含了一系列可以操作图形、图像的函数。<br>真实的理解：他仅仅是一个由Khronos组织制定并维护的规范(Specification)。<br>OpenGL严格规范了每个函数该如何执行，以及他们的输出值。至于内部的实现，是OpenGL开发者自由发挥的。因此OpenGL给开发者的自由度实际上是很高的，只要遵循他的龟范，即函数的功能和返回值，剩下的FreeStyle。<br>实际上的OpenGL库基本都是生产显卡的厂商开发的，普及一个常识，当显示产生BUG的时候通常都会通过升级显卡驱动来解决，这些驱动会让你的显卡支持最新版本的OpenGL，这也是为什么总是建议更新显卡驱动。</p>\n<hr>\n<h1 id=\"核心模式与立即渲染模式\"><a href=\"#核心模式与立即渲染模式\" class=\"headerlink\" title=\"核心模式与立即渲染模式\"></a>核心模式与立即渲染模式</h1><p>早期的OpenGL采用立即渲染模式（Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。但是提供方便的同时肯定是包装过度，牺牲了一部分的自由度。随着时间的推移，规范越来越灵活，开发者对绘图细节有了更多的掌握。因此从<strong>OpenGL3.2</strong>开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的核心模式模式（Core-profile）下开发，这个分支的规范完全移除了旧的特性。<br>使用OpenGL核心模式，该规范迫使我们使用现代的函数。当试图使用一个已经废弃的函数时，OpenGL会抛出一个错误并终止绘图。然后有舍就有得，当提供更高的灵活性和效率得同时，必定会更难以理解和学习，使用Core-profile会让很难去把握OpenGL具体是如何运作的。</p>\n<hr>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>OpenGL的一大特性就是对拓展（Extension）的支持，当一个显卡公司提出一个新特性或者渲染上的大优化，通常会以拓展的方式在驱动中实现。通常，当一个扩展非常流行或者非常有用的时候，它将最终成为未来的OpenGL规范的一部分。拓展就像发布正式版本前的补丁一样。<br>使用扩展的代码大多看上去如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (GL_ARB_extension_name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用硬件支持的全新的现代特性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不支持此扩展: 用旧的方式去做</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h1><p>当使用OpenGL的时候，会遇到一些状态设置函数(State-changing Function)，这类函数将会改变上下文。以及状态使用函数(State-using Function)，这类函数会根据当前OpenGL的状态执行一些操作。</p>\n<ol>\n<li>例如设置颜色状态<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glColor3f</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>); <span class=\"comment\">// 设置当前颜色为红色</span></span><br><span class=\"line\"><span class=\"built_in\">glBegin</span>(GL_TRIANGLES);</span><br><span class=\"line\">    <span class=\"built_in\">glVertex3f</span>(...); <span class=\"comment\">// 这个顶点就是红色的</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"built_in\">glEnd</span>();</span><br></pre></td></tr></table></figure>\n注意 <code>glVertex3f</code> 没有带颜色参数，是因为“当前颜色”已经被设置进 OpenGL 的状态了。</li>\n<li>例如设置绑定纹理状态<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, textureA);</span><br><span class=\"line\"><span class=\"comment\">// 接下来的绘制就用 textureA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, textureB);</span><br><span class=\"line\"><span class=\"comment\">// 接下来改成用 textureB</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><p>OpenGL库是用C语言写的，同时也支持多种语言的派生，但其内核仍是一个C库。由于C的一些语言结构不易被翻译到其它的高级语言，因此OpenGL开发的时候引入了一些抽象层。“对象(Object)”就是其中一个。<br>在OpenGL中一个对象是指一些选项的集合，它代表OpenGL状态的一个子集。比如，我们可以用一个对象来代表绘图窗口的设置，之后我们就可以设置它的大小、支持的颜色位数等等。可以把对象看做一个C风格的结构体(Struct)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">object_name</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">float</span>  option1;</span><br><span class=\"line\">    <span class=\"type\">int</span>    option2;</span><br><span class=\"line\">    <span class=\"type\">char</span>[] name;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"OpenGL工作流\"><a href=\"#OpenGL工作流\" class=\"headerlink\" title=\"OpenGL工作流\"></a>OpenGL工作流</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OpenGL的状态</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">OpenGL_Context</span> &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">  \tobject* object_Window_Target;</span><br><span class=\"line\">  \t...  \t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建对象</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> objectId = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">glGenObject</span>(<span class=\"number\">1</span>, &amp;objectId);</span><br><span class=\"line\"><span class=\"comment\">// 绑定对象至上下文</span></span><br><span class=\"line\"><span class=\"built_in\">glBindObject</span>(GL_WINDOW_TARGET, objectId);</span><br><span class=\"line\"><span class=\"comment\">// 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项</span></span><br><span class=\"line\"><span class=\"built_in\">glSetObjectOption</span>(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, <span class=\"number\">800</span>);</span><br><span class=\"line\"><span class=\"built_in\">glSetObjectOption</span>(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, <span class=\"number\">600</span>);</span><br><span class=\"line\"><span class=\"comment\">// 将上下文对象设回默认</span></span><br><span class=\"line\"><span class=\"built_in\">glBindObject</span>(GL_WINDOW_TARGET, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>这一小段代码展现了你以后使用OpenGL时常见的工作流。我们首先创建一个对象，然后用一个id保存它的引用（实际数据被储存在后台）。然后我们将对象绑定至上下文的目标位置（例子中窗口对象目标的位置被定义成<var>GL_WINDOW_TARGET</var>）。接下来我们设置窗口的选项。最后我们将目标位置的对象id设回0，解绑这个对象。设置的选项将被保存在<var>objectId</var>所引用的对象中，一旦我们重新绑定这个对象到<var>GL_WINDOW_TARGET</var>位置，这些选项就会重新生效。</p>\n"},{"title":"OpenGL入门第二课：来左边跟我一起画个”龙“","date":"2021-06-16T02:01:58.000Z","cover":"/img/01/02/opengl2.png","keywords":["博客","blog","OpenGL","渲染"],"_content":"---\n# 创建窗口\n\n在画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。\n有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。\n\n---\n## GLAD和GLFW\n\n- **GLFW**：创建窗口、处理输入（键盘鼠标）、管理 OpenGL 上下文的库。\n- **GLAD**：加载 OpenGL 的函数指针（加载器/绑定器），能调用 OpenGL 的函数。。\n---\n## GLFW\n\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，\n### CMake\n\nCMake是一个工程文件生成工具。我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。\n\n![](/img/01/02/cmake.png)\n\n在设置完源代码目录和目标目录之后，点击**Configure(设置)**按钮，让CMake读取设置和源代码。这里我们使用默认设置，并再次点击**Configure(设置)**按钮保存设置。保存之后，点击**Generate(生成)**按钮，生成的工程文件会在你的**build**文件夹中。\n\n### 编译\n\n在**build**文件夹里可以找到**GLFW.sln**文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击**Build Solution(生成解决方案)**按钮，然后在**build/src/Debug**文件夹内就会出现我们编译出的库文件**glfw3.lib**。\n\n库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：\n\n1. 找到IDE或者编译器的**/lib**和**/include**文件夹，添加GLFW的**include**文件夹里的文件到IDE的**/include**文件夹里去。用类似的方法，将**glfw3.lib**添加到**/lib**文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。\n2. 推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含**Libs**和**Include**文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。\n\n完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！\n\n## 第一个工程\n\n首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择**Empty Project(空项目)**（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：\n\n![](/img/01/02/x64.png)\n\n现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！\n\n## 链接\n\n为了使我们的程序使用GLFW，我们需要把GLFW库<def>链接</def>(Link)进工程。这可以通过在链接器的设置里指定我们要使用**glfw3.lib**来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。\n\n要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择**VC++ Directories(VC++ 目录)**选项卡（如下图）。在下面的两栏添加目录：\n\n![](/img/01/02/vc_directories.png)\n\n这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择**<Edit..>**选项，之后会出现类似下面这幅图的界面，图是选择**Include Directories(包含目录)**时的界面：\n\n![](/img/01/02/include_directories.png)\n\n这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的**Include**文件夹加进路径中，你就可以使用`<GLFW/..>`来引用头文件。库文件夹也是一样的。\n\n现在VS可以找到所需的所有文件了。最后需要在**Linker(链接器)**选项卡里的**Input(输入)**选项卡里添加**glfw3.lib**这个文件：\n\n![](/img/01/02/linker_input.png)\n\n要链接一个库我们必须告诉链接器它的文件名。库名字是**glfw3.lib**，我们把它加到**Additional Dependencies(附加依赖项)**字段中(手动或者使用**<Edit..>**选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。\n\n## GLAD\n\n到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法[因平台而异](https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions)，在Windows上会是类似这样：\n\n```c++\n// 定义函数原型\ntypedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);\n// 找到正确的函数并赋值给函数指针\nGL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress(\"glGenBuffers\");\n// 现在函数可以被正常调用了\nGLuint buffer;\nglGenBuffers(1, &buffer);\n```\n\n你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中**GLAD**是目前最新，也是最流行的库。\n\n### 配置GLAD\n\nGLAD是一个[开源](https://github.com/Dav1dde/glad)的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个[在线服务](http://glad.dav1d.de/)。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。\n\n打开GLAD的[在线服务](http://glad.dav1d.de/)，将语言(Language)设置为**C/C++**，在API选项中，选择**3.3**以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为**Core**，并且保证选中了**生成加载器**(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击**生成**(Generate)按钮来生成库文件。\n\nGLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个**glad.c**文件。将两个头文件目录（**glad**和**KHR**）复制到你的**Include**文件夹中（或者增加一个额外的项目指向这些目录），并添加**glad.c**文件到你的工程中。\n\n经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：\n\n```c++\n#include <glad/glad.h> \n```\n\n## 实例化GLFW窗口\n\n初始化库并设置使用OpenGL的版本，并告诉GLFW使用的是OpenGL中的核心渲染模式\n\n```c++\nint main()\n{\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n  \n    return 0;\n}\n```\n\n接下来我们创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。\n\n```c++\nGLFWwindow* window = glfwCreateWindow(800, 600, \"LearnOpenGL\", NULL, NULL);\nif (window == NULL)\n{\n    std::cout << \"Failed to create GLFW window\" << std::endl;\n    glfwTerminate();\n    return -1;\n}\nglfwMakeContextCurrent(window);\n```\n\n<fun>glfwCreateWindow</fun>函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里使用`\"LearnOpenGL\"。\n\n## 使用GLAD管理OpenGL函数指针\n\n在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。\n\n```c++\nif (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n{\n    std::cout << \"Failed to initialize GLAD\" << std::endl;\n    return -1;\n}\n```\n\n给GLAD传入了用来加载系统相关的OpenGL函数指针地址的函数。GLFW给的是`glfwGetProcAddress`，它根据编译的系统定义了正确的函数。\n## 视口\n\n设置OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用<fun>glViewport</fun>函数来设置视口的**尺寸**(Dimension)：\n\n```c++\nglViewport(0, 0, 800, 600);\n```\n\n<fun>glViewport</fun>函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。\n\n### `glfwCreateWindow`和`glViewport`的类比记忆\n\n| 作用阶段     | 函数                 | 类比           |\n| -------- | ------------------ | ------------ |\n| 创建窗口+上下文 | `glfwCreateWindow` | 打开一个画框       |\n| 设置绘图区域   | `glViewport`       | 告诉画家“只画这块区域” |\n\n添加一个while循环，可以把它称之为<def>渲染循环</def>(Render Loop)，它能在GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：\n\n```c++\nwhile(!glfwWindowShouldClose(window))\n{\n    glfwSwapBuffers(window);\n    glfwPollEvents();    \n}\n```\n\n- <fun>glfwWindowShouldClose</fun>函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回`true`，渲染循环将停止运行，之后我们就可以关闭应用程序。\n- <fun>glfwPollEvents</fun>函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。\n- <fun>glfwSwapBuffers</fun>函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。\n\n!!! Important\n\n\t**双缓冲(Double Buffer)**\n\n\t应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。**前**缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在**后**缓冲上绘制。当所有的渲染指令执行完毕后，我们**交换**(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。\n\n## 渲染\n\n我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：\n\n```c++\n// 渲染循环\nwhile(!glfwWindowShouldClose(window))\n{\n    // 输入\n    processInput(window);\n\n    // 渲染指令\n    ...\n\n    // 检查并调用事件，交换缓冲\n\n    /// 处理所有窗口事件（如键盘、鼠标）\n    glfwPollEvents();\n    /// 显示刚刚渲染的画面（双缓冲切换）\n    glfwSwapBuffers(window);\n}\n```\n\n为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用<fun>glClear</fun>函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有<var>GL_COLOR_BUFFER_BIT</var>，<var>GL_DEPTH_BUFFER_BIT</var>和<var>GL_STENCIL_BUFFER_BIT</var>。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。\n\n```c++\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\n```\n\n注意，除了<fun>glClear</fun>之外，我们还调用了<fun>glClearColor</fun>来设置清空屏幕所用的颜色。当调用<fun>glClear</fun>函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为<fun>glClearColor</fun>里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。\n\n### `glfwPollEvents()`函数\n\n**作用：轮询并处理输入/窗口事件，如果不调用它，窗口就会“假死”，你按什么键都没反应。**\n\n- GLFW 会把操作系统收到的事件（如：键盘输入、鼠标点击、窗口大小变化）放入一个事件队列中。\n- `glfwPollEvents()` 会从这个队列中取出事件并处理，让你注册的回调函数（如 `key_callback`）被调用。\n\n### `glfwSwapBuffers(window)`函数\n\n**作用：把你在后缓冲画好的图像“交换”到前缓冲中去，呈现在屏幕上，如果不调用它，永远也看不到画的东西。**\n\nOpenGL 默认使用 **双缓冲机制**：\n\n- **后缓冲区（back buffer）**：我们用 OpenGL 渲染图像的地方。\n- **前缓冲区（front buffer）**：显示在屏幕上的图像。\n\n## 最后一件事\n\n当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在<fun>main</fun>函数的最后调用<fun>glfwTerminate</fun>函数来完成。\n\n```c++\nglfwTerminate();\nreturn 0;\n```\n\n![](/img/01/02/hellowindow2.png)","source":"_posts/LearnOpenGL-Day2.md","raw":"---\ntitle: OpenGL入门第二课：来左边跟我一起画个”龙“\ndate: 2021-06-16 10:01:58\ncover: /img/01/02/opengl2.png\ncategories:\n  - 实用教程\ntags:\n  - OpenGL\nkeywords:\n  - 博客\n  - blog\n  - OpenGL\n  - 渲染\n---\n---\n# 创建窗口\n\n在画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。\n有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。\n\n---\n## GLAD和GLFW\n\n- **GLFW**：创建窗口、处理输入（键盘鼠标）、管理 OpenGL 上下文的库。\n- **GLAD**：加载 OpenGL 的函数指针（加载器/绑定器），能调用 OpenGL 的函数。。\n---\n## GLFW\n\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，\n### CMake\n\nCMake是一个工程文件生成工具。我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。\n\n![](/img/01/02/cmake.png)\n\n在设置完源代码目录和目标目录之后，点击**Configure(设置)**按钮，让CMake读取设置和源代码。这里我们使用默认设置，并再次点击**Configure(设置)**按钮保存设置。保存之后，点击**Generate(生成)**按钮，生成的工程文件会在你的**build**文件夹中。\n\n### 编译\n\n在**build**文件夹里可以找到**GLFW.sln**文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击**Build Solution(生成解决方案)**按钮，然后在**build/src/Debug**文件夹内就会出现我们编译出的库文件**glfw3.lib**。\n\n库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：\n\n1. 找到IDE或者编译器的**/lib**和**/include**文件夹，添加GLFW的**include**文件夹里的文件到IDE的**/include**文件夹里去。用类似的方法，将**glfw3.lib**添加到**/lib**文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。\n2. 推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含**Libs**和**Include**文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。\n\n完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！\n\n## 第一个工程\n\n首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择**Empty Project(空项目)**（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：\n\n![](/img/01/02/x64.png)\n\n现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！\n\n## 链接\n\n为了使我们的程序使用GLFW，我们需要把GLFW库<def>链接</def>(Link)进工程。这可以通过在链接器的设置里指定我们要使用**glfw3.lib**来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。\n\n要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择**VC++ Directories(VC++ 目录)**选项卡（如下图）。在下面的两栏添加目录：\n\n![](/img/01/02/vc_directories.png)\n\n这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择**<Edit..>**选项，之后会出现类似下面这幅图的界面，图是选择**Include Directories(包含目录)**时的界面：\n\n![](/img/01/02/include_directories.png)\n\n这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的**Include**文件夹加进路径中，你就可以使用`<GLFW/..>`来引用头文件。库文件夹也是一样的。\n\n现在VS可以找到所需的所有文件了。最后需要在**Linker(链接器)**选项卡里的**Input(输入)**选项卡里添加**glfw3.lib**这个文件：\n\n![](/img/01/02/linker_input.png)\n\n要链接一个库我们必须告诉链接器它的文件名。库名字是**glfw3.lib**，我们把它加到**Additional Dependencies(附加依赖项)**字段中(手动或者使用**<Edit..>**选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。\n\n## GLAD\n\n到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法[因平台而异](https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions)，在Windows上会是类似这样：\n\n```c++\n// 定义函数原型\ntypedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);\n// 找到正确的函数并赋值给函数指针\nGL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress(\"glGenBuffers\");\n// 现在函数可以被正常调用了\nGLuint buffer;\nglGenBuffers(1, &buffer);\n```\n\n你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中**GLAD**是目前最新，也是最流行的库。\n\n### 配置GLAD\n\nGLAD是一个[开源](https://github.com/Dav1dde/glad)的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个[在线服务](http://glad.dav1d.de/)。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。\n\n打开GLAD的[在线服务](http://glad.dav1d.de/)，将语言(Language)设置为**C/C++**，在API选项中，选择**3.3**以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为**Core**，并且保证选中了**生成加载器**(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击**生成**(Generate)按钮来生成库文件。\n\nGLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个**glad.c**文件。将两个头文件目录（**glad**和**KHR**）复制到你的**Include**文件夹中（或者增加一个额外的项目指向这些目录），并添加**glad.c**文件到你的工程中。\n\n经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：\n\n```c++\n#include <glad/glad.h> \n```\n\n## 实例化GLFW窗口\n\n初始化库并设置使用OpenGL的版本，并告诉GLFW使用的是OpenGL中的核心渲染模式\n\n```c++\nint main()\n{\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n  \n    return 0;\n}\n```\n\n接下来我们创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。\n\n```c++\nGLFWwindow* window = glfwCreateWindow(800, 600, \"LearnOpenGL\", NULL, NULL);\nif (window == NULL)\n{\n    std::cout << \"Failed to create GLFW window\" << std::endl;\n    glfwTerminate();\n    return -1;\n}\nglfwMakeContextCurrent(window);\n```\n\n<fun>glfwCreateWindow</fun>函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里使用`\"LearnOpenGL\"。\n\n## 使用GLAD管理OpenGL函数指针\n\n在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。\n\n```c++\nif (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n{\n    std::cout << \"Failed to initialize GLAD\" << std::endl;\n    return -1;\n}\n```\n\n给GLAD传入了用来加载系统相关的OpenGL函数指针地址的函数。GLFW给的是`glfwGetProcAddress`，它根据编译的系统定义了正确的函数。\n## 视口\n\n设置OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用<fun>glViewport</fun>函数来设置视口的**尺寸**(Dimension)：\n\n```c++\nglViewport(0, 0, 800, 600);\n```\n\n<fun>glViewport</fun>函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。\n\n### `glfwCreateWindow`和`glViewport`的类比记忆\n\n| 作用阶段     | 函数                 | 类比           |\n| -------- | ------------------ | ------------ |\n| 创建窗口+上下文 | `glfwCreateWindow` | 打开一个画框       |\n| 设置绘图区域   | `glViewport`       | 告诉画家“只画这块区域” |\n\n添加一个while循环，可以把它称之为<def>渲染循环</def>(Render Loop)，它能在GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：\n\n```c++\nwhile(!glfwWindowShouldClose(window))\n{\n    glfwSwapBuffers(window);\n    glfwPollEvents();    \n}\n```\n\n- <fun>glfwWindowShouldClose</fun>函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回`true`，渲染循环将停止运行，之后我们就可以关闭应用程序。\n- <fun>glfwPollEvents</fun>函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。\n- <fun>glfwSwapBuffers</fun>函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。\n\n!!! Important\n\n\t**双缓冲(Double Buffer)**\n\n\t应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。**前**缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在**后**缓冲上绘制。当所有的渲染指令执行完毕后，我们**交换**(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。\n\n## 渲染\n\n我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：\n\n```c++\n// 渲染循环\nwhile(!glfwWindowShouldClose(window))\n{\n    // 输入\n    processInput(window);\n\n    // 渲染指令\n    ...\n\n    // 检查并调用事件，交换缓冲\n\n    /// 处理所有窗口事件（如键盘、鼠标）\n    glfwPollEvents();\n    /// 显示刚刚渲染的画面（双缓冲切换）\n    glfwSwapBuffers(window);\n}\n```\n\n为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用<fun>glClear</fun>函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有<var>GL_COLOR_BUFFER_BIT</var>，<var>GL_DEPTH_BUFFER_BIT</var>和<var>GL_STENCIL_BUFFER_BIT</var>。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。\n\n```c++\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\n```\n\n注意，除了<fun>glClear</fun>之外，我们还调用了<fun>glClearColor</fun>来设置清空屏幕所用的颜色。当调用<fun>glClear</fun>函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为<fun>glClearColor</fun>里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。\n\n### `glfwPollEvents()`函数\n\n**作用：轮询并处理输入/窗口事件，如果不调用它，窗口就会“假死”，你按什么键都没反应。**\n\n- GLFW 会把操作系统收到的事件（如：键盘输入、鼠标点击、窗口大小变化）放入一个事件队列中。\n- `glfwPollEvents()` 会从这个队列中取出事件并处理，让你注册的回调函数（如 `key_callback`）被调用。\n\n### `glfwSwapBuffers(window)`函数\n\n**作用：把你在后缓冲画好的图像“交换”到前缓冲中去，呈现在屏幕上，如果不调用它，永远也看不到画的东西。**\n\nOpenGL 默认使用 **双缓冲机制**：\n\n- **后缓冲区（back buffer）**：我们用 OpenGL 渲染图像的地方。\n- **前缓冲区（front buffer）**：显示在屏幕上的图像。\n\n## 最后一件事\n\n当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在<fun>main</fun>函数的最后调用<fun>glfwTerminate</fun>函数来完成。\n\n```c++\nglfwTerminate();\nreturn 0;\n```\n\n![](/img/01/02/hellowindow2.png)","slug":"LearnOpenGL-Day2","published":1,"updated":"2025-06-27T03:46:38.710Z","_id":"cmbrkfes70006s0c212fse43h","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><hr>\n<h1 id=\"创建窗口\"><a href=\"#创建窗口\" class=\"headerlink\" title=\"创建窗口\"></a>创建窗口</h1><p>在画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。<br>有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。</p>\n<hr>\n<h2 id=\"GLAD和GLFW\"><a href=\"#GLAD和GLFW\" class=\"headerlink\" title=\"GLAD和GLFW\"></a>GLAD和GLFW</h2><ul>\n<li><strong>GLFW</strong>：创建窗口、处理输入（键盘鼠标）、管理 OpenGL 上下文的库。</li>\n<li><strong>GLAD</strong>：加载 OpenGL 的函数指针（加载器/绑定器），能调用 OpenGL 的函数。。</li>\n</ul>\n<hr>\n<h2 id=\"GLFW\"><a href=\"#GLFW\" class=\"headerlink\" title=\"GLFW\"></a>GLFW</h2><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，</p>\n<h3 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h3><p>CMake是一个工程文件生成工具。我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。</p>\n<p><img src=\"/img/01/02/cmake.png\"></p>\n<p>在设置完源代码目录和目标目录之后，点击<strong>Configure(设置)<strong>按钮，让CMake读取设置和源代码。这里我们使用默认设置，并再次点击</strong>Configure(设置)<strong>按钮保存设置。保存之后，点击</strong>Generate(生成)<strong>按钮，生成的工程文件会在你的</strong>build</strong>文件夹中。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>在<strong>build</strong>文件夹里可以找到<strong>GLFW.sln</strong>文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击<strong>Build Solution(生成解决方案)<strong>按钮，然后在</strong>build/src/Debug</strong>文件夹内就会出现我们编译出的库文件<strong>glfw3.lib</strong>。</p>\n<p>库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：</p>\n<ol>\n<li>找到IDE或者编译器的**/lib<strong>和</strong>/include<strong>文件夹，添加GLFW的</strong>include<strong>文件夹里的文件到IDE的</strong>/include<strong>文件夹里去。用类似的方法，将</strong>glfw3.lib<strong>添加到</strong>/lib**文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。</li>\n<li>推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含<strong>Libs</strong>和<strong>Include</strong>文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。</li>\n</ol>\n<p>完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！</p>\n<h2 id=\"第一个工程\"><a href=\"#第一个工程\" class=\"headerlink\" title=\"第一个工程\"></a>第一个工程</h2><p>首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择**Empty Project(空项目)**（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：</p>\n<p><img src=\"/img/01/02/x64.png\"></p>\n<p>现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>为了使我们的程序使用GLFW，我们需要把GLFW库<def>链接</def>(Link)进工程。这可以通过在链接器的设置里指定我们要使用<strong>glfw3.lib</strong>来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。</p>\n<p>要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择**VC++ Directories(VC++ 目录)**选项卡（如下图）。在下面的两栏添加目录：</p>\n<p><img src=\"/img/01/02/vc_directories.png\"></p>\n<p>这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择**&lt;Edit..&gt;<strong>选项，之后会出现类似下面这幅图的界面，图是选择</strong>Include Directories(包含目录)**时的界面：</p>\n<p><img src=\"/img/01/02/include_directories.png\"></p>\n<p>这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的<strong>Include</strong>文件夹加进路径中，你就可以使用<code>&lt;GLFW/..&gt;</code>来引用头文件。库文件夹也是一样的。</p>\n<p>现在VS可以找到所需的所有文件了。最后需要在<strong>Linker(链接器)<strong>选项卡里的</strong>Input(输入)<strong>选项卡里添加</strong>glfw3.lib</strong>这个文件：</p>\n<p><img src=\"/img/01/02/linker_input.png\"></p>\n<p>要链接一个库我们必须告诉链接器它的文件名。库名字是<strong>glfw3.lib</strong>，我们把它加到**Additional Dependencies(附加依赖项)<strong>字段中(手动或者使用</strong>&lt;Edit..&gt;**选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。</p>\n<h2 id=\"GLAD\"><a href=\"#GLAD\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法<a href=\"https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions\">因平台而异</a>，在Windows上会是类似这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*GL_GENBUFFERS)</span> <span class=\"params\">(GLsizei, GLuint*)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 找到正确的函数并赋值给函数指针</span></span><br><span class=\"line\">GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)<span class=\"built_in\">wglGetProcAddress</span>(<span class=\"string\">&quot;glGenBuffers&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 现在函数可以被正常调用了</span></span><br><span class=\"line\">GLuint buffer;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中<strong>GLAD</strong>是目前最新，也是最流行的库。</p>\n<h3 id=\"配置GLAD\"><a href=\"#配置GLAD\" class=\"headerlink\" title=\"配置GLAD\"></a>配置GLAD</h3><p>GLAD是一个<a href=\"https://github.com/Dav1dde/glad\">开源</a>的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个<a href=\"http://glad.dav1d.de/\">在线服务</a>。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。</p>\n<p>打开GLAD的<a href=\"http://glad.dav1d.de/\">在线服务</a>，将语言(Language)设置为<strong>C/C++<strong>，在API选项中，选择</strong>3.3</strong>以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为<strong>Core</strong>，并且保证选中了<strong>生成加载器</strong>(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击<strong>生成</strong>(Generate)按钮来生成库文件。</p>\n<p>GLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个<strong>glad.c</strong>文件。将两个头文件目录（<strong>glad</strong>和<strong>KHR</strong>）复制到你的<strong>Include</strong>文件夹中（或者增加一个额外的项目指向这些目录），并添加<strong>glad.c</strong>文件到你的工程中。</p>\n<p>经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span> </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化GLFW窗口\"><a href=\"#实例化GLFW窗口\" class=\"headerlink\" title=\"实例化GLFW窗口\"></a>实例化GLFW窗口</h2><p>初始化库并设置使用OpenGL的版本，并告诉GLFW使用的是OpenGL中的核心渲染模式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glfwCreateWindow</fun>函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里使用`”LearnOpenGL”。</p>\n<h2 id=\"使用GLAD管理OpenGL函数指针\"><a href=\"#使用GLAD管理OpenGL函数指针\" class=\"headerlink\" title=\"使用GLAD管理OpenGL函数指针\"></a>使用GLAD管理OpenGL函数指针</h2><p>在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给GLAD传入了用来加载系统相关的OpenGL函数指针地址的函数。GLFW给的是<code>glfwGetProcAddress</code>，它根据编译的系统定义了正确的函数。</p>\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><p>设置OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用<fun>glViewport</fun>函数来设置视口的<strong>尺寸</strong>(Dimension)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glViewport</fun>函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。</p>\n<h3 id=\"glfwCreateWindow和glViewport的类比记忆\"><a href=\"#glfwCreateWindow和glViewport的类比记忆\" class=\"headerlink\" title=\"glfwCreateWindow和glViewport的类比记忆\"></a><code>glfwCreateWindow</code>和<code>glViewport</code>的类比记忆</h3><table>\n<thead>\n<tr>\n<th>作用阶段</th>\n<th>函数</th>\n<th>类比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建窗口+上下文</td>\n<td><code>glfwCreateWindow</code></td>\n<td>打开一个画框</td>\n</tr>\n<tr>\n<td>设置绘图区域</td>\n<td><code>glViewport</code></td>\n<td>告诉画家“只画这块区域”</td>\n</tr>\n</tbody></table>\n<p>添加一个while循环，可以把它称之为<def>渲染循环</def>(Render Loop)，它能在GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><fun>glfwWindowShouldClose</fun>函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回<code>true</code>，渲染循环将停止运行，之后我们就可以关闭应用程序。</li>\n<li><fun>glfwPollEvents</fun>函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。</li>\n<li><fun>glfwSwapBuffers</fun>函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</li>\n</ul>\n<p>!!! Important</p>\n<pre><code>**双缓冲(Double Buffer)**\n\n应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。**前**缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在**后**缓冲上绘制。当所有的渲染指令执行完毕后，我们**交换**(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。\n</code></pre>\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><p>我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输入</span></span><br><span class=\"line\">    <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渲染指令</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查并调用事件，交换缓冲</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 处理所有窗口事件（如键盘、鼠标）</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    <span class=\"comment\">/// 显示刚刚渲染的画面（双缓冲切换）</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用<fun>glClear</fun>函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有<var>GL_COLOR_BUFFER_BIT</var>，<var>GL_DEPTH_BUFFER_BIT</var>和<var>GL_STENCIL_BUFFER_BIT</var>。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\"><span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure>\n\n<p>注意，除了<fun>glClear</fun>之外，我们还调用了<fun>glClearColor</fun>来设置清空屏幕所用的颜色。当调用<fun>glClear</fun>函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为<fun>glClearColor</fun>里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。</p>\n<h3 id=\"glfwPollEvents-函数\"><a href=\"#glfwPollEvents-函数\" class=\"headerlink\" title=\"glfwPollEvents()函数\"></a><code>glfwPollEvents()</code>函数</h3><p><strong>作用：轮询并处理输入/窗口事件，如果不调用它，窗口就会“假死”，你按什么键都没反应。</strong></p>\n<ul>\n<li>GLFW 会把操作系统收到的事件（如：键盘输入、鼠标点击、窗口大小变化）放入一个事件队列中。</li>\n<li><code>glfwPollEvents()</code> 会从这个队列中取出事件并处理，让你注册的回调函数（如 <code>key_callback</code>）被调用。</li>\n</ul>\n<h3 id=\"glfwSwapBuffers-window-函数\"><a href=\"#glfwSwapBuffers-window-函数\" class=\"headerlink\" title=\"glfwSwapBuffers(window)函数\"></a><code>glfwSwapBuffers(window)</code>函数</h3><p><strong>作用：把你在后缓冲画好的图像“交换”到前缓冲中去，呈现在屏幕上，如果不调用它，永远也看不到画的东西。</strong></p>\n<p>OpenGL 默认使用 <strong>双缓冲机制</strong>：</p>\n<ul>\n<li><strong>后缓冲区（back buffer）</strong>：我们用 OpenGL 渲染图像的地方。</li>\n<li><strong>前缓冲区（front buffer）</strong>：显示在屏幕上的图像。</li>\n</ul>\n<h2 id=\"最后一件事\"><a href=\"#最后一件事\" class=\"headerlink\" title=\"最后一件事\"></a>最后一件事</h2><p>当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在<fun>main</fun>函数的最后调用<fun>glfwTerminate</fun>函数来完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/01/02/hellowindow2.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"创建窗口\"><a href=\"#创建窗口\" class=\"headerlink\" title=\"创建窗口\"></a>创建窗口</h1><p>在画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。<br>有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。</p>\n<hr>\n<h2 id=\"GLAD和GLFW\"><a href=\"#GLAD和GLFW\" class=\"headerlink\" title=\"GLAD和GLFW\"></a>GLAD和GLFW</h2><ul>\n<li><strong>GLFW</strong>：创建窗口、处理输入（键盘鼠标）、管理 OpenGL 上下文的库。</li>\n<li><strong>GLAD</strong>：加载 OpenGL 的函数指针（加载器/绑定器），能调用 OpenGL 的函数。。</li>\n</ul>\n<hr>\n<h2 id=\"GLFW\"><a href=\"#GLFW\" class=\"headerlink\" title=\"GLFW\"></a>GLFW</h2><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，</p>\n<h3 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h3><p>CMake是一个工程文件生成工具。我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。</p>\n<p><img src=\"/img/01/02/cmake.png\"></p>\n<p>在设置完源代码目录和目标目录之后，点击<strong>Configure(设置)<strong>按钮，让CMake读取设置和源代码。这里我们使用默认设置，并再次点击</strong>Configure(设置)<strong>按钮保存设置。保存之后，点击</strong>Generate(生成)<strong>按钮，生成的工程文件会在你的</strong>build</strong>文件夹中。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>在<strong>build</strong>文件夹里可以找到<strong>GLFW.sln</strong>文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击<strong>Build Solution(生成解决方案)<strong>按钮，然后在</strong>build/src/Debug</strong>文件夹内就会出现我们编译出的库文件<strong>glfw3.lib</strong>。</p>\n<p>库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：</p>\n<ol>\n<li>找到IDE或者编译器的**/lib<strong>和</strong>/include<strong>文件夹，添加GLFW的</strong>include<strong>文件夹里的文件到IDE的</strong>/include<strong>文件夹里去。用类似的方法，将</strong>glfw3.lib<strong>添加到</strong>/lib**文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。</li>\n<li>推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含<strong>Libs</strong>和<strong>Include</strong>文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。</li>\n</ol>\n<p>完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！</p>\n<h2 id=\"第一个工程\"><a href=\"#第一个工程\" class=\"headerlink\" title=\"第一个工程\"></a>第一个工程</h2><p>首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择**Empty Project(空项目)**（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：</p>\n<p><img src=\"/img/01/02/x64.png\"></p>\n<p>现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>为了使我们的程序使用GLFW，我们需要把GLFW库<def>链接</def>(Link)进工程。这可以通过在链接器的设置里指定我们要使用<strong>glfw3.lib</strong>来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。</p>\n<p>要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择**VC++ Directories(VC++ 目录)**选项卡（如下图）。在下面的两栏添加目录：</p>\n<p><img src=\"/img/01/02/vc_directories.png\"></p>\n<p>这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择**&lt;Edit..&gt;<strong>选项，之后会出现类似下面这幅图的界面，图是选择</strong>Include Directories(包含目录)**时的界面：</p>\n<p><img src=\"/img/01/02/include_directories.png\"></p>\n<p>这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的<strong>Include</strong>文件夹加进路径中，你就可以使用<code>&lt;GLFW/..&gt;</code>来引用头文件。库文件夹也是一样的。</p>\n<p>现在VS可以找到所需的所有文件了。最后需要在<strong>Linker(链接器)<strong>选项卡里的</strong>Input(输入)<strong>选项卡里添加</strong>glfw3.lib</strong>这个文件：</p>\n<p><img src=\"/img/01/02/linker_input.png\"></p>\n<p>要链接一个库我们必须告诉链接器它的文件名。库名字是<strong>glfw3.lib</strong>，我们把它加到**Additional Dependencies(附加依赖项)<strong>字段中(手动或者使用</strong>&lt;Edit..&gt;**选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。</p>\n<h2 id=\"GLAD\"><a href=\"#GLAD\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法<a href=\"https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions\">因平台而异</a>，在Windows上会是类似这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*GL_GENBUFFERS)</span> <span class=\"params\">(GLsizei, GLuint*)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 找到正确的函数并赋值给函数指针</span></span><br><span class=\"line\">GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)<span class=\"built_in\">wglGetProcAddress</span>(<span class=\"string\">&quot;glGenBuffers&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 现在函数可以被正常调用了</span></span><br><span class=\"line\">GLuint buffer;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中<strong>GLAD</strong>是目前最新，也是最流行的库。</p>\n<h3 id=\"配置GLAD\"><a href=\"#配置GLAD\" class=\"headerlink\" title=\"配置GLAD\"></a>配置GLAD</h3><p>GLAD是一个<a href=\"https://github.com/Dav1dde/glad\">开源</a>的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个<a href=\"http://glad.dav1d.de/\">在线服务</a>。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。</p>\n<p>打开GLAD的<a href=\"http://glad.dav1d.de/\">在线服务</a>，将语言(Language)设置为<strong>C/C++<strong>，在API选项中，选择</strong>3.3</strong>以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为<strong>Core</strong>，并且保证选中了<strong>生成加载器</strong>(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击<strong>生成</strong>(Generate)按钮来生成库文件。</p>\n<p>GLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个<strong>glad.c</strong>文件。将两个头文件目录（<strong>glad</strong>和<strong>KHR</strong>）复制到你的<strong>Include</strong>文件夹中（或者增加一个额外的项目指向这些目录），并添加<strong>glad.c</strong>文件到你的工程中。</p>\n<p>经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span> </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化GLFW窗口\"><a href=\"#实例化GLFW窗口\" class=\"headerlink\" title=\"实例化GLFW窗口\"></a>实例化GLFW窗口</h2><p>初始化库并设置使用OpenGL的版本，并告诉GLFW使用的是OpenGL中的核心渲染模式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glfwCreateWindow</fun>函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里使用`”LearnOpenGL”。</p>\n<h2 id=\"使用GLAD管理OpenGL函数指针\"><a href=\"#使用GLAD管理OpenGL函数指针\" class=\"headerlink\" title=\"使用GLAD管理OpenGL函数指针\"></a>使用GLAD管理OpenGL函数指针</h2><p>在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给GLAD传入了用来加载系统相关的OpenGL函数指针地址的函数。GLFW给的是<code>glfwGetProcAddress</code>，它根据编译的系统定义了正确的函数。</p>\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><p>设置OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用<fun>glViewport</fun>函数来设置视口的<strong>尺寸</strong>(Dimension)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glViewport</fun>函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。</p>\n<h3 id=\"glfwCreateWindow和glViewport的类比记忆\"><a href=\"#glfwCreateWindow和glViewport的类比记忆\" class=\"headerlink\" title=\"glfwCreateWindow和glViewport的类比记忆\"></a><code>glfwCreateWindow</code>和<code>glViewport</code>的类比记忆</h3><table>\n<thead>\n<tr>\n<th>作用阶段</th>\n<th>函数</th>\n<th>类比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建窗口+上下文</td>\n<td><code>glfwCreateWindow</code></td>\n<td>打开一个画框</td>\n</tr>\n<tr>\n<td>设置绘图区域</td>\n<td><code>glViewport</code></td>\n<td>告诉画家“只画这块区域”</td>\n</tr>\n</tbody></table>\n<p>添加一个while循环，可以把它称之为<def>渲染循环</def>(Render Loop)，它能在GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><fun>glfwWindowShouldClose</fun>函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回<code>true</code>，渲染循环将停止运行，之后我们就可以关闭应用程序。</li>\n<li><fun>glfwPollEvents</fun>函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。</li>\n<li><fun>glfwSwapBuffers</fun>函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</li>\n</ul>\n<p>!!! Important</p>\n<pre><code>**双缓冲(Double Buffer)**\n\n应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。**前**缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在**后**缓冲上绘制。当所有的渲染指令执行完毕后，我们**交换**(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。\n</code></pre>\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><p>我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输入</span></span><br><span class=\"line\">    <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渲染指令</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查并调用事件，交换缓冲</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 处理所有窗口事件（如键盘、鼠标）</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    <span class=\"comment\">/// 显示刚刚渲染的画面（双缓冲切换）</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用<fun>glClear</fun>函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有<var>GL_COLOR_BUFFER_BIT</var>，<var>GL_DEPTH_BUFFER_BIT</var>和<var>GL_STENCIL_BUFFER_BIT</var>。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\"><span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure>\n\n<p>注意，除了<fun>glClear</fun>之外，我们还调用了<fun>glClearColor</fun>来设置清空屏幕所用的颜色。当调用<fun>glClear</fun>函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为<fun>glClearColor</fun>里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。</p>\n<h3 id=\"glfwPollEvents-函数\"><a href=\"#glfwPollEvents-函数\" class=\"headerlink\" title=\"glfwPollEvents()函数\"></a><code>glfwPollEvents()</code>函数</h3><p><strong>作用：轮询并处理输入/窗口事件，如果不调用它，窗口就会“假死”，你按什么键都没反应。</strong></p>\n<ul>\n<li>GLFW 会把操作系统收到的事件（如：键盘输入、鼠标点击、窗口大小变化）放入一个事件队列中。</li>\n<li><code>glfwPollEvents()</code> 会从这个队列中取出事件并处理，让你注册的回调函数（如 <code>key_callback</code>）被调用。</li>\n</ul>\n<h3 id=\"glfwSwapBuffers-window-函数\"><a href=\"#glfwSwapBuffers-window-函数\" class=\"headerlink\" title=\"glfwSwapBuffers(window)函数\"></a><code>glfwSwapBuffers(window)</code>函数</h3><p><strong>作用：把你在后缓冲画好的图像“交换”到前缓冲中去，呈现在屏幕上，如果不调用它，永远也看不到画的东西。</strong></p>\n<p>OpenGL 默认使用 <strong>双缓冲机制</strong>：</p>\n<ul>\n<li><strong>后缓冲区（back buffer）</strong>：我们用 OpenGL 渲染图像的地方。</li>\n<li><strong>前缓冲区（front buffer）</strong>：显示在屏幕上的图像。</li>\n</ul>\n<h2 id=\"最后一件事\"><a href=\"#最后一件事\" class=\"headerlink\" title=\"最后一件事\"></a>最后一件事</h2><p>当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在<fun>main</fun>函数的最后调用<fun>glfwTerminate</fun>函数来完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/01/02/hellowindow2.png\"></p>\n"},{"title":"OpenGL入门第三课：原来画个三角形都是这么复杂的操作","date":"2021-06-13T03:14:12.000Z","cover":"/img/01/03/opengl3.jpg","keywords":["博客","blog","OpenGL","渲染"],"_content":"---\n# 划重点\n\n- 顶点数组对象：Vertex Array Object，VAO\n- 顶点缓冲对象：Vertex Buffer Object，VBO\n- 元素缓冲对象：Element Buffer Object，EBO\n- 索引缓冲对象：Index Buffer Object，IBO\n\n---\n\n在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的<def>图形渲染管线</def>（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。\n\n---\n\n图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做<def>着色器</def>(Shader)。\n\n有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用<def>OpenGL着色器语言</def>(OpenGL Shading Language, <def>GLSL</def>)写成的，在下一节中我们再花更多时间研究它。\n\n下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。\n\n![](/img/01/03/pipeline.png)\n\n首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个<def>顶点</def>(Vertex)是一个3D坐标的数据的集合。而这样一个顶点的数据是用<def>顶点属性</def>(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。\n\n图形渲染管线的第一个部分是<def>顶点着色器</def>(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。\n\n顶点着色器阶段的输出可以选择性地传递给<def>几何着色器</def>(Geometry Shader)。几何着色器将一组顶点作为输入，这些顶点形成图元，并且能够通过发出新的顶点来形成新的(或其他)图元来生成其他形状。在这个例子中，它从给定的形状中生成第二个三角形。\n\n<def>图元装配</def>(Primitive Assembly)阶段将顶点着色器（或几何着色器）输出的所有顶点作为输入（如果是<var>GL_POINTS</var>，那么就是一个顶点），并将所有的点装配成指定图元的形状；本节例子中是两个三角形。\n\n图元装配阶段的输出会被传入<def>光栅化阶段</def>(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行<def>裁切</def>(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。\n\n<def>片段着色器</def>的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。\n\n在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做<def>Alpha测试</def>和<def>混合</def>(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查<def>alpha</def>值（alpha值定义了一个物体的透明度）并对物体进行<def>混合</def>(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。\n\n可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。\n\n在现代OpenGL中，我们**必须**定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。\n\n## 顶点输入\n\n开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把**所有的**3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做<def>标准化设备坐标</def>(Normalized Device Coordinates)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。\n\n由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个`float`数组。\n\n```c++\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n};\n```\n\n由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的*深度*(Depth，译注2)都是一样的，从而使它看上去像是2D的。\n\n一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是**标准化设备坐标**了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：\n\n![NDC](../img/01/03/ndc.png \"NDC\")\n\n与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。\n\n通过使用由<fun>glViewport</fun>函数提供的数据，进行<def>视口变换</def>(Viewport Transform)，<def>标准化设备坐标</def>(Normalized Device Coordinates)会变换为<def>屏幕空间坐标</def>(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。\n定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。\n\n我们通过<def>顶点缓冲对象</def>(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。\n\n顶点缓冲对象是我们在[OpenGL](01 OpenGL.md)教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用<fun>glGenBuffers</fun>函数生成一个带有缓冲ID的VBO对象：\n\n```c++\nunsigned int VBO;\nglGenBuffers(1, &VBO);\n```\n\nOpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是<var>GL_ARRAY_BUFFER</var>。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用<fun>glBindBuffer</fun>函数把新创建的缓冲绑定到<var>GL_ARRAY_BUFFER</var>目标上：\n\n```c++\nglBindBuffer(GL_ARRAY_BUFFER, VBO);  \n```\n\n从这一刻起，我们使用的任何（在<var>GL_ARRAY_BUFFER</var>目标上的）缓冲调用都会用来配置当前绑定的缓冲(<var>VBO</var>)。然后我们可以调用<fun>glBufferData</fun>函数，它会把之前定义的顶点数据复制到缓冲的内存中：\n\n```c++\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n```\n\n<fun>glBufferData</fun>是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到<var>GL_ARRAY_BUFFER</var>目标上。第二个参数指定传输数据的大小(以字节为单位)；用一个简单的`sizeof`计算出顶点数据大小就行。第三个参数是我们希望发送的实际数据。\n\n第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：\n\n- <var>GL_STATIC_DRAW</var> ：数据不会或几乎不会改变。\n- <var>GL_DYNAMIC_DRAW</var>：数据会被改变很多。\n- <var>GL_STREAM_DRAW</var> ：数据每次绘制时都会改变。\n\n三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是<var>GL_STATIC_DRAW</var>。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是<var>GL_DYNAMIC_DRAW</var>或<var>GL_STREAM_DRAW</var>，这样就能确保显卡把数据放在能够高速写入的内存部分。\n\n现在我们已经把顶点数据储存在显卡的内存中，用<var>VBO</var>这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。\n\n## 顶点着色器\n\n顶点着色器(Vertex Shader)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个顶点和一个片段着色器。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。\n\n我们需要做的第一件事是用着色器语言GLSL(OpenGL Shading Language)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：\n\n```c++\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nvoid main()\n{\n    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n```\n\n可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。\n\n下一步，使用`in`关键字，在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)。现在我们只关心位置(Position)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个`float`分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个`vec3`输入变量<var>aPos</var>。我们同样也通过`layout (location = 0)`设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。\n\n为了设置顶点着色器的输出，我们必须把位置数据赋值给预定义的<var>gl_Position</var>变量，它在幕后是`vec4`类型的。在<fun>main</fun>函数的最后，我们将<var>gl_Position</var>设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把`vec3`的数据作为`vec4`构造器的参数，同时把`w`分量设置为`1.0f`（我们会在后面解释为什么）来完成这一任务。\n\n当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。\n\n## 编译着色器\n现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：\n\n```c++\nconst char *vertexShaderSource = \"#version 330 core\\n\"\n    \"layout (location = 0) in vec3 aPos;\\n\"\n    \"void main()\\n\"\n    \"{\\n\"\n    \"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n    \"}\\0\";\n```\n\n为了能够让OpenGL使用它，我们必须在运行时动态编译它的源代码。\n\n我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为`unsigned int`，然后用<fun>glCreateShader</fun>创建这个着色器：\n\n```c++\nunsigned int vertexShader;\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\n```\n\n我们把需要创建的着色器类型以参数形式提供给<fun>glCreateShader</fun>。由于我们正在创建一个顶点着色器，传递的参数是<var>GL_VERTEX_SHADER</var>。\n\n下一步我们把这个着色器源码附加到着色器对象上，然后编译它：\n\n```c++\nglShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n```\n\n<fun>glShaderSource</fun>函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为`NULL`。\n\n!!! Important\n\n\t你可能会希望检测在调用<fun>glCompileShader</fun>后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\n\t\n\t    int  success;\n    \tchar infoLog[512];\n    \tglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n\n\t首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用<fun>glGetShaderiv</fun>检查是否编译成功。如果编译失败，我们会用<fun>glGetShaderInfoLog</fun>获取错误消息，然后打印它。\n\n\t\tif(!success)\n\t\t{\n\t\t    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n\t\t    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n\t\t}\n\n如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。\n\n## 片段着色器\n\n片段着色器(Fragment Shader)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。\n\n!!! Important\n\n\t在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\n\n```c++\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n} \n```\n\n片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用`out`关键字，这里我们命名为<var>FragColor</var>。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的`vec4`赋值给颜色输出。\n\n编译片段着色器的过程与顶点着色器类似，只不过我们使用<var>GL_FRAGMENT_SHADER</var>常量作为着色器类型：\n\n```c++\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n```\n\n两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的<def>着色器程序</def>(Shader Program)中。\n\n### 着色器程序\n\n着色器程序对象(Shader Program Object)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们<def>链接</def>(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。\n\n当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。\n\n创建一个程序对象很简单：\n\n```c++\nunsigned int shaderProgram;\nshaderProgram = glCreateProgram();\n```\n\n<fun>glCreateProgram</fun>函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用<fun>glLinkProgram</fun>链接它们：\n\n```c++\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n```\n\n代码应该很清楚，我们把着色器附加到了程序上，然后用<fun>glLinkProgram</fun>链接。\n\n!!! Important\n\n\t就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用<fun>glGetShaderiv</fun>和<fun>glGetShaderInfoLog</fun>，现在我们使用：\n\n\t\tglGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\n\t\tif(!success) {\n\t\t    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n\t\t    ...\n\t\t}\n\n得到的结果就是一个程序对象，我们可以调用<fun>glUseProgram</fun>函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\n\n```c++\nglUseProgram(shaderProgram);\n```\n\n在<fun>glUseProgram</fun>函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。\n\n对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：\n\n```c++\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n```\n\n现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。\n\n## 链接顶点属性\n\n顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。\n\n我们的顶点缓冲数据会被解析为下面这样子：\n\n![](../img/01/03/vertex_attribute_pointer.png)\n\n- 位置数据被储存为32位（4字节）浮点值。\n- 每个位置包含3个这样的值。\n- 在这3个值之间没有空隙（或其他值）。这几个值在数组中<def>紧密排列</def>(Tightly Packed)。\n- 数据中第一个值在缓冲开始的位置。\n\n有了这些信息我们就可以使用<fun>glVertexAttribPointer</fun>函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：\n\n```c++\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n\n<var>glVertexAttribPointer</var>函数的参数非常多，所以我会逐一介绍它们：\n\n- 第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用`layout(location = 0)`定义了<var>position</var>顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为`0`。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入`0`。\n- 第二个参数指定顶点属性的大小。顶点属性是一个`vec3`，它由3个值组成，所以大小是3。\n- 第三个参数指定数据的类型，这里是<var>GL_FLOAT</var>(GLSL中`vec*`都是由浮点数值组成的)。\n- 下个参数定义我们是否希望数据被标准化(Normalize)。如果我们设置为<var>GL_TRUE</var>，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为<var>GL_FALSE</var>。\n- 第五个参数叫做<def>步长</def>(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个`float`之后，我们把步长设置为`3 * sizeof(float)`。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。\n- 最后一个参数的类型是`void*`，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的<def>偏移量</def>(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数。\n\n!!! Important\n\n\t每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用<fun>glVertexAttribPointer</fun>时绑定到<var>GL_ARRAY_BUFFER</var>的VBO决定的。由于在调用<fun>glVertexAttribPointer</fun>之前绑定的是先前定义的<var>VBO</var>对象，顶点属性`0`现在会链接到它的顶点数据。\n\n现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用<fun>glEnableVertexAttribArray</fun>，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：\n\n```c++\n// 0. 复制顶点数组到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 1. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// 2. 当我们渲染一个物体时要使用着色器程序\nglUseProgram(shaderProgram);\n// 3. 绘制物体\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？\n\n### 顶点数组对象\n\n<def>顶点数组对象</def>(Vertex Array Object, <def>VAO</def>)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中\n\n!!! Attention\n\n\tOpenGL的核心模式**要求**我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\n\n一个顶点数组对象会储存以下这些内容：\n\n- <fun>glEnableVertexAttribArray</fun>和<fun>glDisableVertexAttribArray</fun>的调用。\n- 通过<fun>glVertexAttribPointer</fun>设置的顶点属性配置。\n- 通过<fun>glVertexAttribPointer</fun>调用与顶点属性关联的顶点缓冲对象。\n\n![](../img/01/03/vertex_array_objects.png)\n\n创建一个VAO和创建一个VBO很类似：\n\n```c++\nunsigned int VAO;\nglGenVertexArrays(1, &VAO);\n```\n\n要想使用VAO，要做的只是使用<fun>glBindVertexArray</fun>绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：\n\n```c++\n// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..\n// 1. 绑定VAO\nglBindVertexArray(VAO);\n// 2. 把顶点数组复制到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n \n[...]\n \n// ..:: 绘制代码（渲染循环中） :: ..\n// 4. 绘制物体\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n就这么多了！前面做的一切都是等待这一刻，一个储存了我们顶点属性配置和应使用的VBO的顶点数组对象。一般当你打算绘制多个物体时，你首先要生成/配置所有的VAO（和必须的VBO及属性指针)，然后储存它们供后面使用。当我们打算绘制物体的时候就拿出相应的VAO，绑定它，绘制完物体后，再解绑VAO。\n\n### 我们一直期待的三角形\n\n要想绘制我们想要的物体，OpenGL给我们提供了<fun>glDrawArrays</fun>函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。\n\n```c++\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3);\n```\n\n<fun>glDrawArrays</fun>函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递<var>GL_TRIANGLES</var>给它。第二个参数指定了顶点数组的起始索引，我们这里填`0`。最后一个参数指定我们打算绘制多少个顶点，这里是`3`（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。\n\n现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：\n\n![](../img/01/04/hellotriangle.png)\n\n完整的程序源码可以在[这里](https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp)找到。\n\n如果你的输出和这个看起来不一样，你可能做错了什么。去查看一下源码，检查你是否遗漏了什么东西，或者你也可以在评论区提问。\n\n## 元素缓冲对象\n\n在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(Element Buffer Object，EBO)，也叫索引缓冲对象(Index Buffer Object，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：\n\n```c++\nfloat vertices[] = {\n    // 第一个三角形\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, 0.5f, 0.0f,  // 左上角\n    // 第二个三角形\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n```\n\n可以看到，有几个顶点叠加了。我们指定了`右下角`和`左上角`两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？\n\n值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的<def>索引绘制</def>(Indexed Drawing)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：\n\n```c++\nfloat vertices[] = {\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n \nunsigned int indices[] = {\n    // 注意索引从0开始! \n    // 此例的索引(0,1,2,3)就是顶点数组vertices的下标，\n    // 这样可以由下标代表顶点组合成矩形\n\n    0, 1, 3, // 第一个三角形\n    1, 2, 3  // 第二个三角形\n};\n```\n\n你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：\n\n```c++\nunsigned int EBO;\nglGenBuffers(1, &EBO);\n```\n\n与VBO类似，我们先绑定EBO然后用<fun>glBufferData</fun>把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为<var>GL_ELEMENT_ARRAY_BUFFER</var>。\n\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n```\n\n注意：我们传递了<var>GL_ELEMENT_ARRAY_BUFFER</var>当作缓冲目标。最后一件要做的事是用<fun>glDrawElements</fun>来替换<fun>glDrawArrays</fun>函数，表示我们要从索引缓冲区渲染三角形。使用<fun>glDrawElements</fun>时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：\n\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n```\n\n第一个参数指定了我们绘制的模式，这个和<fun>glDrawArrays</fun>的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是<var>GL_UNSIGNED_INT</var>。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。\n\n<fun>glDrawElements</fun>函数从当前绑定到<var>GL_ELEMENT_ARRAY_BUFFER</var>目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。\n\n![](../img/01/03/vertex_array_objects_ebo.png)\n\n!!! Attention\n\n\t当目标是<var>GL_ELEMENT_ARRAY_BUFFER</var>的时候，VAO会储存<fun>glBindBuffer</fun>的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。\n\n最后的初始化和绘制代码现在看起来像这样：\n\n```c++\n// ..:: 初始化代码 :: ..\n// 1. 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// 4. 设定顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n \n[...]\n \n// ..:: 绘制代码（渲染循环中） :: ..\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\nglBindVertexArray(0);\n```\n\n运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用<def>线框模式</def>(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。\n\n![](../img/01/03/hellotriangle2.png)","source":"_posts/LearnOpenGL-Day3.md","raw":"---\ntitle: OpenGL入门第三课：原来画个三角形都是这么复杂的操作\ndate: 2021-06-13 11:14:12\ncover: /img/01/03/opengl3.jpg\ncategories:\n  - 实用教程\ntags:\n  - OpenGL\nkeywords:\n  - 博客\n  - blog\n  - OpenGL\n  - 渲染\n---\n---\n# 划重点\n\n- 顶点数组对象：Vertex Array Object，VAO\n- 顶点缓冲对象：Vertex Buffer Object，VBO\n- 元素缓冲对象：Element Buffer Object，EBO\n- 索引缓冲对象：Index Buffer Object，IBO\n\n---\n\n在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的<def>图形渲染管线</def>（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。\n\n---\n\n图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做<def>着色器</def>(Shader)。\n\n有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用<def>OpenGL着色器语言</def>(OpenGL Shading Language, <def>GLSL</def>)写成的，在下一节中我们再花更多时间研究它。\n\n下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。\n\n![](/img/01/03/pipeline.png)\n\n首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个<def>顶点</def>(Vertex)是一个3D坐标的数据的集合。而这样一个顶点的数据是用<def>顶点属性</def>(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。\n\n图形渲染管线的第一个部分是<def>顶点着色器</def>(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。\n\n顶点着色器阶段的输出可以选择性地传递给<def>几何着色器</def>(Geometry Shader)。几何着色器将一组顶点作为输入，这些顶点形成图元，并且能够通过发出新的顶点来形成新的(或其他)图元来生成其他形状。在这个例子中，它从给定的形状中生成第二个三角形。\n\n<def>图元装配</def>(Primitive Assembly)阶段将顶点着色器（或几何着色器）输出的所有顶点作为输入（如果是<var>GL_POINTS</var>，那么就是一个顶点），并将所有的点装配成指定图元的形状；本节例子中是两个三角形。\n\n图元装配阶段的输出会被传入<def>光栅化阶段</def>(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行<def>裁切</def>(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。\n\n<def>片段着色器</def>的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。\n\n在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做<def>Alpha测试</def>和<def>混合</def>(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查<def>alpha</def>值（alpha值定义了一个物体的透明度）并对物体进行<def>混合</def>(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。\n\n可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。\n\n在现代OpenGL中，我们**必须**定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。\n\n## 顶点输入\n\n开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把**所有的**3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做<def>标准化设备坐标</def>(Normalized Device Coordinates)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。\n\n由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个`float`数组。\n\n```c++\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n};\n```\n\n由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的*深度*(Depth，译注2)都是一样的，从而使它看上去像是2D的。\n\n一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是**标准化设备坐标**了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：\n\n![NDC](../img/01/03/ndc.png \"NDC\")\n\n与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。\n\n通过使用由<fun>glViewport</fun>函数提供的数据，进行<def>视口变换</def>(Viewport Transform)，<def>标准化设备坐标</def>(Normalized Device Coordinates)会变换为<def>屏幕空间坐标</def>(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。\n定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。\n\n我们通过<def>顶点缓冲对象</def>(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。\n\n顶点缓冲对象是我们在[OpenGL](01 OpenGL.md)教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用<fun>glGenBuffers</fun>函数生成一个带有缓冲ID的VBO对象：\n\n```c++\nunsigned int VBO;\nglGenBuffers(1, &VBO);\n```\n\nOpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是<var>GL_ARRAY_BUFFER</var>。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用<fun>glBindBuffer</fun>函数把新创建的缓冲绑定到<var>GL_ARRAY_BUFFER</var>目标上：\n\n```c++\nglBindBuffer(GL_ARRAY_BUFFER, VBO);  \n```\n\n从这一刻起，我们使用的任何（在<var>GL_ARRAY_BUFFER</var>目标上的）缓冲调用都会用来配置当前绑定的缓冲(<var>VBO</var>)。然后我们可以调用<fun>glBufferData</fun>函数，它会把之前定义的顶点数据复制到缓冲的内存中：\n\n```c++\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n```\n\n<fun>glBufferData</fun>是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到<var>GL_ARRAY_BUFFER</var>目标上。第二个参数指定传输数据的大小(以字节为单位)；用一个简单的`sizeof`计算出顶点数据大小就行。第三个参数是我们希望发送的实际数据。\n\n第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：\n\n- <var>GL_STATIC_DRAW</var> ：数据不会或几乎不会改变。\n- <var>GL_DYNAMIC_DRAW</var>：数据会被改变很多。\n- <var>GL_STREAM_DRAW</var> ：数据每次绘制时都会改变。\n\n三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是<var>GL_STATIC_DRAW</var>。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是<var>GL_DYNAMIC_DRAW</var>或<var>GL_STREAM_DRAW</var>，这样就能确保显卡把数据放在能够高速写入的内存部分。\n\n现在我们已经把顶点数据储存在显卡的内存中，用<var>VBO</var>这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。\n\n## 顶点着色器\n\n顶点着色器(Vertex Shader)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个顶点和一个片段着色器。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。\n\n我们需要做的第一件事是用着色器语言GLSL(OpenGL Shading Language)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：\n\n```c++\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nvoid main()\n{\n    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n```\n\n可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。\n\n下一步，使用`in`关键字，在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)。现在我们只关心位置(Position)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个`float`分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个`vec3`输入变量<var>aPos</var>。我们同样也通过`layout (location = 0)`设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。\n\n为了设置顶点着色器的输出，我们必须把位置数据赋值给预定义的<var>gl_Position</var>变量，它在幕后是`vec4`类型的。在<fun>main</fun>函数的最后，我们将<var>gl_Position</var>设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把`vec3`的数据作为`vec4`构造器的参数，同时把`w`分量设置为`1.0f`（我们会在后面解释为什么）来完成这一任务。\n\n当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。\n\n## 编译着色器\n现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：\n\n```c++\nconst char *vertexShaderSource = \"#version 330 core\\n\"\n    \"layout (location = 0) in vec3 aPos;\\n\"\n    \"void main()\\n\"\n    \"{\\n\"\n    \"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n    \"}\\0\";\n```\n\n为了能够让OpenGL使用它，我们必须在运行时动态编译它的源代码。\n\n我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为`unsigned int`，然后用<fun>glCreateShader</fun>创建这个着色器：\n\n```c++\nunsigned int vertexShader;\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\n```\n\n我们把需要创建的着色器类型以参数形式提供给<fun>glCreateShader</fun>。由于我们正在创建一个顶点着色器，传递的参数是<var>GL_VERTEX_SHADER</var>。\n\n下一步我们把这个着色器源码附加到着色器对象上，然后编译它：\n\n```c++\nglShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n```\n\n<fun>glShaderSource</fun>函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为`NULL`。\n\n!!! Important\n\n\t你可能会希望检测在调用<fun>glCompileShader</fun>后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\n\t\n\t    int  success;\n    \tchar infoLog[512];\n    \tglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n\n\t首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用<fun>glGetShaderiv</fun>检查是否编译成功。如果编译失败，我们会用<fun>glGetShaderInfoLog</fun>获取错误消息，然后打印它。\n\n\t\tif(!success)\n\t\t{\n\t\t    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n\t\t    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n\t\t}\n\n如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。\n\n## 片段着色器\n\n片段着色器(Fragment Shader)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。\n\n!!! Important\n\n\t在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\n\n```c++\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n} \n```\n\n片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用`out`关键字，这里我们命名为<var>FragColor</var>。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的`vec4`赋值给颜色输出。\n\n编译片段着色器的过程与顶点着色器类似，只不过我们使用<var>GL_FRAGMENT_SHADER</var>常量作为着色器类型：\n\n```c++\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n```\n\n两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的<def>着色器程序</def>(Shader Program)中。\n\n### 着色器程序\n\n着色器程序对象(Shader Program Object)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们<def>链接</def>(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。\n\n当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。\n\n创建一个程序对象很简单：\n\n```c++\nunsigned int shaderProgram;\nshaderProgram = glCreateProgram();\n```\n\n<fun>glCreateProgram</fun>函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用<fun>glLinkProgram</fun>链接它们：\n\n```c++\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n```\n\n代码应该很清楚，我们把着色器附加到了程序上，然后用<fun>glLinkProgram</fun>链接。\n\n!!! Important\n\n\t就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用<fun>glGetShaderiv</fun>和<fun>glGetShaderInfoLog</fun>，现在我们使用：\n\n\t\tglGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\n\t\tif(!success) {\n\t\t    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n\t\t    ...\n\t\t}\n\n得到的结果就是一个程序对象，我们可以调用<fun>glUseProgram</fun>函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\n\n```c++\nglUseProgram(shaderProgram);\n```\n\n在<fun>glUseProgram</fun>函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。\n\n对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：\n\n```c++\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n```\n\n现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。\n\n## 链接顶点属性\n\n顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。\n\n我们的顶点缓冲数据会被解析为下面这样子：\n\n![](../img/01/03/vertex_attribute_pointer.png)\n\n- 位置数据被储存为32位（4字节）浮点值。\n- 每个位置包含3个这样的值。\n- 在这3个值之间没有空隙（或其他值）。这几个值在数组中<def>紧密排列</def>(Tightly Packed)。\n- 数据中第一个值在缓冲开始的位置。\n\n有了这些信息我们就可以使用<fun>glVertexAttribPointer</fun>函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：\n\n```c++\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n\n<var>glVertexAttribPointer</var>函数的参数非常多，所以我会逐一介绍它们：\n\n- 第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用`layout(location = 0)`定义了<var>position</var>顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为`0`。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入`0`。\n- 第二个参数指定顶点属性的大小。顶点属性是一个`vec3`，它由3个值组成，所以大小是3。\n- 第三个参数指定数据的类型，这里是<var>GL_FLOAT</var>(GLSL中`vec*`都是由浮点数值组成的)。\n- 下个参数定义我们是否希望数据被标准化(Normalize)。如果我们设置为<var>GL_TRUE</var>，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为<var>GL_FALSE</var>。\n- 第五个参数叫做<def>步长</def>(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个`float`之后，我们把步长设置为`3 * sizeof(float)`。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。\n- 最后一个参数的类型是`void*`，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的<def>偏移量</def>(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数。\n\n!!! Important\n\n\t每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用<fun>glVertexAttribPointer</fun>时绑定到<var>GL_ARRAY_BUFFER</var>的VBO决定的。由于在调用<fun>glVertexAttribPointer</fun>之前绑定的是先前定义的<var>VBO</var>对象，顶点属性`0`现在会链接到它的顶点数据。\n\n现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用<fun>glEnableVertexAttribArray</fun>，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：\n\n```c++\n// 0. 复制顶点数组到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 1. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// 2. 当我们渲染一个物体时要使用着色器程序\nglUseProgram(shaderProgram);\n// 3. 绘制物体\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？\n\n### 顶点数组对象\n\n<def>顶点数组对象</def>(Vertex Array Object, <def>VAO</def>)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中\n\n!!! Attention\n\n\tOpenGL的核心模式**要求**我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\n\n一个顶点数组对象会储存以下这些内容：\n\n- <fun>glEnableVertexAttribArray</fun>和<fun>glDisableVertexAttribArray</fun>的调用。\n- 通过<fun>glVertexAttribPointer</fun>设置的顶点属性配置。\n- 通过<fun>glVertexAttribPointer</fun>调用与顶点属性关联的顶点缓冲对象。\n\n![](../img/01/03/vertex_array_objects.png)\n\n创建一个VAO和创建一个VBO很类似：\n\n```c++\nunsigned int VAO;\nglGenVertexArrays(1, &VAO);\n```\n\n要想使用VAO，要做的只是使用<fun>glBindVertexArray</fun>绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：\n\n```c++\n// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..\n// 1. 绑定VAO\nglBindVertexArray(VAO);\n// 2. 把顶点数组复制到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n \n[...]\n \n// ..:: 绘制代码（渲染循环中） :: ..\n// 4. 绘制物体\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n就这么多了！前面做的一切都是等待这一刻，一个储存了我们顶点属性配置和应使用的VBO的顶点数组对象。一般当你打算绘制多个物体时，你首先要生成/配置所有的VAO（和必须的VBO及属性指针)，然后储存它们供后面使用。当我们打算绘制物体的时候就拿出相应的VAO，绑定它，绘制完物体后，再解绑VAO。\n\n### 我们一直期待的三角形\n\n要想绘制我们想要的物体，OpenGL给我们提供了<fun>glDrawArrays</fun>函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。\n\n```c++\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3);\n```\n\n<fun>glDrawArrays</fun>函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递<var>GL_TRIANGLES</var>给它。第二个参数指定了顶点数组的起始索引，我们这里填`0`。最后一个参数指定我们打算绘制多少个顶点，这里是`3`（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。\n\n现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：\n\n![](../img/01/04/hellotriangle.png)\n\n完整的程序源码可以在[这里](https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp)找到。\n\n如果你的输出和这个看起来不一样，你可能做错了什么。去查看一下源码，检查你是否遗漏了什么东西，或者你也可以在评论区提问。\n\n## 元素缓冲对象\n\n在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(Element Buffer Object，EBO)，也叫索引缓冲对象(Index Buffer Object，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：\n\n```c++\nfloat vertices[] = {\n    // 第一个三角形\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, 0.5f, 0.0f,  // 左上角\n    // 第二个三角形\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n```\n\n可以看到，有几个顶点叠加了。我们指定了`右下角`和`左上角`两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？\n\n值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的<def>索引绘制</def>(Indexed Drawing)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：\n\n```c++\nfloat vertices[] = {\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n \nunsigned int indices[] = {\n    // 注意索引从0开始! \n    // 此例的索引(0,1,2,3)就是顶点数组vertices的下标，\n    // 这样可以由下标代表顶点组合成矩形\n\n    0, 1, 3, // 第一个三角形\n    1, 2, 3  // 第二个三角形\n};\n```\n\n你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：\n\n```c++\nunsigned int EBO;\nglGenBuffers(1, &EBO);\n```\n\n与VBO类似，我们先绑定EBO然后用<fun>glBufferData</fun>把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为<var>GL_ELEMENT_ARRAY_BUFFER</var>。\n\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n```\n\n注意：我们传递了<var>GL_ELEMENT_ARRAY_BUFFER</var>当作缓冲目标。最后一件要做的事是用<fun>glDrawElements</fun>来替换<fun>glDrawArrays</fun>函数，表示我们要从索引缓冲区渲染三角形。使用<fun>glDrawElements</fun>时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：\n\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n```\n\n第一个参数指定了我们绘制的模式，这个和<fun>glDrawArrays</fun>的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是<var>GL_UNSIGNED_INT</var>。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。\n\n<fun>glDrawElements</fun>函数从当前绑定到<var>GL_ELEMENT_ARRAY_BUFFER</var>目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。\n\n![](../img/01/03/vertex_array_objects_ebo.png)\n\n!!! Attention\n\n\t当目标是<var>GL_ELEMENT_ARRAY_BUFFER</var>的时候，VAO会储存<fun>glBindBuffer</fun>的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。\n\n最后的初始化和绘制代码现在看起来像这样：\n\n```c++\n// ..:: 初始化代码 :: ..\n// 1. 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// 4. 设定顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n \n[...]\n \n// ..:: 绘制代码（渲染循环中） :: ..\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\nglBindVertexArray(0);\n```\n\n运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用<def>线框模式</def>(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。\n\n![](../img/01/03/hellotriangle2.png)","slug":"LearnOpenGL-Day3","published":1,"updated":"2025-06-27T03:47:09.937Z","_id":"cmce9o9vx000054c2de4hb1u5","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><hr>\n<h1 id=\"划重点\"><a href=\"#划重点\" class=\"headerlink\" title=\"划重点\"></a>划重点</h1><ul>\n<li>顶点数组对象：Vertex Array Object，VAO</li>\n<li>顶点缓冲对象：Vertex Buffer Object，VBO</li>\n<li>元素缓冲对象：Element Buffer Object，EBO</li>\n<li>索引缓冲对象：Index Buffer Object，IBO</li>\n</ul>\n<hr>\n<p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的<def>图形渲染管线</def>（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。</p>\n<hr>\n<p>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做<def>着色器</def>(Shader)。</p>\n<p>有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用<def>OpenGL着色器语言</def>(OpenGL Shading Language, <def>GLSL</def>)写成的，在下一节中我们再花更多时间研究它。</p>\n<p>下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。</p>\n<p><img src=\"/img/01/03/pipeline.png\"></p>\n<p>首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个<def>顶点</def>(Vertex)是一个3D坐标的数据的集合。而这样一个顶点的数据是用<def>顶点属性</def>(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。</p>\n<p>图形渲染管线的第一个部分是<def>顶点着色器</def>(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。</p>\n<p>顶点着色器阶段的输出可以选择性地传递给<def>几何着色器</def>(Geometry Shader)。几何着色器将一组顶点作为输入，这些顶点形成图元，并且能够通过发出新的顶点来形成新的(或其他)图元来生成其他形状。在这个例子中，它从给定的形状中生成第二个三角形。</p>\n<p><def>图元装配</def>(Primitive Assembly)阶段将顶点着色器（或几何着色器）输出的所有顶点作为输入（如果是<var>GL_POINTS</var>，那么就是一个顶点），并将所有的点装配成指定图元的形状；本节例子中是两个三角形。</p>\n<p>图元装配阶段的输出会被传入<def>光栅化阶段</def>(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行<def>裁切</def>(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</p>\n<p><def>片段着色器</def>的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。</p>\n<p>在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做<def>Alpha测试</def>和<def>混合</def>(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查<def>alpha</def>值（alpha值定义了一个物体的透明度）并对物体进行<def>混合</def>(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。</p>\n<p>可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。</p>\n<p>在现代OpenGL中，我们<strong>必须</strong>定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。</p>\n<h2 id=\"顶点输入\"><a href=\"#顶点输入\" class=\"headerlink\" title=\"顶点输入\"></a>顶点输入</h2><p>开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把<strong>所有的</strong>3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做<def>标准化设备坐标</def>(Normalized Device Coordinates)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。</p>\n<p>由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个<code>float</code>数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的<em>深度</em>(Depth，译注2)都是一样的，从而使它看上去像是2D的。</p>\n<p>一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是<strong>标准化设备坐标</strong>了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：</p>\n<p><img src=\"../img/01/03/ndc.png\" alt=\"NDC\" title=\"NDC\"></p>\n<p>与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。</p>\n<p>通过使用由<fun>glViewport</fun>函数提供的数据，进行<def>视口变换</def>(Viewport Transform)，<def>标准化设备坐标</def>(Normalized Device Coordinates)会变换为<def>屏幕空间坐标</def>(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。<br>定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p>\n<p>我们通过<def>顶点缓冲对象</def>(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p>\n<p>顶点缓冲对象是我们在[OpenGL](01 OpenGL.md)教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用<fun>glGenBuffers</fun>函数生成一个带有缓冲ID的VBO对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VBO;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br></pre></td></tr></table></figure>\n\n<p>OpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是<var>GL_ARRAY_BUFFER</var>。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用<fun>glBindBuffer</fun>函数把新创建的缓冲绑定到<var>GL_ARRAY_BUFFER</var>目标上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);  </span><br></pre></td></tr></table></figure>\n\n<p>从这一刻起，我们使用的任何（在<var>GL_ARRAY_BUFFER</var>目标上的）缓冲调用都会用来配置当前绑定的缓冲(<var>VBO</var>)。然后我们可以调用<fun>glBufferData</fun>函数，它会把之前定义的顶点数据复制到缓冲的内存中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glBufferData</fun>是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到<var>GL_ARRAY_BUFFER</var>目标上。第二个参数指定传输数据的大小(以字节为单位)；用一个简单的<code>sizeof</code>计算出顶点数据大小就行。第三个参数是我们希望发送的实际数据。</p>\n<p>第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：</p>\n<ul>\n<li><var>GL_STATIC_DRAW</var> ：数据不会或几乎不会改变。</li>\n<li><var>GL_DYNAMIC_DRAW</var>：数据会被改变很多。</li>\n<li><var>GL_STREAM_DRAW</var> ：数据每次绘制时都会改变。</li>\n</ul>\n<p>三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是<var>GL_STATIC_DRAW</var>。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是<var>GL_DYNAMIC_DRAW</var>或<var>GL_STREAM_DRAW</var>，这样就能确保显卡把数据放在能够高速写入的内存部分。</p>\n<p>现在我们已经把顶点数据储存在显卡的内存中，用<var>VBO</var>这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。</p>\n<h2 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h2><p>顶点着色器(Vertex Shader)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个顶点和一个片段着色器。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。</p>\n<p>我们需要做的第一件事是用着色器语言GLSL(OpenGL Shading Language)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"built_in\">layout</span> (location = <span class=\"number\">0</span>) in vec3 aPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    gl_Position = <span class=\"built_in\">vec4</span>(aPos.x, aPos.y, aPos.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。</p>\n<p>下一步，使用<code>in</code>关键字，在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)。现在我们只关心位置(Position)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个<code>float</code>分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个<code>vec3</code>输入变量<var>aPos</var>。我们同样也通过<code>layout (location = 0)</code>设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。</p>\n<p>为了设置顶点着色器的输出，我们必须把位置数据赋值给预定义的<var>gl_Position</var>变量，它在幕后是<code>vec4</code>类型的。在<fun>main</fun>函数的最后，我们将<var>gl_Position</var>设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把<code>vec3</code>的数据作为<code>vec4</code>构造器的参数，同时把<code>w</code>分量设置为<code>1.0f</code>（我们会在后面解释为什么）来完成这一任务。</p>\n<p>当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。</p>\n<h2 id=\"编译着色器\"><a href=\"#编译着色器\" class=\"headerlink\" title=\"编译着色器\"></a>编译着色器</h2><p>现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *vertexShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;layout (location = 0) in vec3 aPos;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#125;\\0&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>为了能够让OpenGL使用它，我们必须在运行时动态编译它的源代码。</p>\n<p>我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为<code>unsigned int</code>，然后用<fun>glCreateShader</fun>创建这个着色器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> vertexShader;</span><br><span class=\"line\">vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br></pre></td></tr></table></figure>\n\n<p>我们把需要创建的着色器类型以参数形式提供给<fun>glCreateShader</fun>。由于我们正在创建一个顶点着色器，传递的参数是<var>GL_VERTEX_SHADER</var>。</p>\n<p>下一步我们把这个着色器源码附加到着色器对象上，然后编译它：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glShaderSource</fun>函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为<code>NULL</code>。</p>\n<p>!!! Important</p>\n<pre><code>你可能会希望检测在调用&lt;fun&gt;glCompileShader&lt;/fun&gt;后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\n\n    int  success;\n    char infoLog[512];\n    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);\n\n首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用&lt;fun&gt;glGetShaderiv&lt;/fun&gt;检查是否编译成功。如果编译失败，我们会用&lt;fun&gt;glGetShaderInfoLog&lt;/fun&gt;获取错误消息，然后打印它。\n\n    if(!success)\n    &#123;\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout &lt;&lt; &quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;\n    &#125;\n</code></pre>\n<p>如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。</p>\n<h2 id=\"片段着色器\"><a href=\"#片段着色器\" class=\"headerlink\" title=\"片段着色器\"></a>片段着色器</h2><p>片段着色器(Fragment Shader)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。</p>\n<p>!!! Important</p>\n<pre><code>在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\n</code></pre>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">out vec4 FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FragColor = <span class=\"built_in\">vec4</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用<code>out</code>关键字，这里我们命名为<var>FragColor</var>。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的<code>vec4</code>赋值给颜色输出。</p>\n<p>编译片段着色器的过程与顶点着色器类似，只不过我们使用<var>GL_FRAGMENT_SHADER</var>常量作为着色器类型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> fragmentShader;</span><br><span class=\"line\">fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n\n<p>两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的<def>着色器程序</def>(Shader Program)中。</p>\n<h3 id=\"着色器程序\"><a href=\"#着色器程序\" class=\"headerlink\" title=\"着色器程序\"></a>着色器程序</h3><p>着色器程序对象(Shader Program Object)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们<def>链接</def>(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。</p>\n<p>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。</p>\n<p>创建一个程序对象很简单：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> shaderProgram;</span><br><span class=\"line\">shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br></pre></td></tr></table></figure>\n\n<p><fun>glCreateProgram</fun>函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用<fun>glLinkProgram</fun>链接它们：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class=\"line\"><span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n\n<p>代码应该很清楚，我们把着色器附加到了程序上，然后用<fun>glLinkProgram</fun>链接。</p>\n<p>!!! Important</p>\n<pre><code>就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用&lt;fun&gt;glGetShaderiv&lt;/fun&gt;和&lt;fun&gt;glGetShaderInfoLog&lt;/fun&gt;，现在我们使用：\n\n    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);\n    if(!success) &#123;\n        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n        ...\n    &#125;\n</code></pre>\n<p>得到的结果就是一个程序对象，我们可以调用<fun>glUseProgram</fun>函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n\n<p>在<fun>glUseProgram</fun>函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。</p>\n<p>对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。</p>\n<h2 id=\"链接顶点属性\"><a href=\"#链接顶点属性\" class=\"headerlink\" title=\"链接顶点属性\"></a>链接顶点属性</h2><p>顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。</p>\n<p>我们的顶点缓冲数据会被解析为下面这样子：</p>\n<p><img src=\"../img/01/03/vertex_attribute_pointer.png\"></p>\n<ul>\n<li>位置数据被储存为32位（4字节）浮点值。</li>\n<li>每个位置包含3个这样的值。</li>\n<li>在这3个值之间没有空隙（或其他值）。这几个值在数组中<def>紧密排列</def>(Tightly Packed)。</li>\n<li>数据中第一个值在缓冲开始的位置。</li>\n</ul>\n<p>有了这些信息我们就可以使用<fun>glVertexAttribPointer</fun>函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><var>glVertexAttribPointer</var>函数的参数非常多，所以我会逐一介绍它们：</p>\n<ul>\n<li>第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用<code>layout(location = 0)</code>定义了<var>position</var>顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为<code>0</code>。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入<code>0</code>。</li>\n<li>第二个参数指定顶点属性的大小。顶点属性是一个<code>vec3</code>，它由3个值组成，所以大小是3。</li>\n<li>第三个参数指定数据的类型，这里是<var>GL_FLOAT</var>(GLSL中<code>vec*</code>都是由浮点数值组成的)。</li>\n<li>下个参数定义我们是否希望数据被标准化(Normalize)。如果我们设置为<var>GL_TRUE</var>，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为<var>GL_FALSE</var>。</li>\n<li>第五个参数叫做<def>步长</def>(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个<code>float</code>之后，我们把步长设置为<code>3 * sizeof(float)</code>。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。</li>\n<li>最后一个参数的类型是<code>void*</code>，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的<def>偏移量</def>(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数。</li>\n</ul>\n<p>!!! Important</p>\n<pre><code>每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用&lt;fun&gt;glVertexAttribPointer&lt;/fun&gt;时绑定到&lt;var&gt;GL_ARRAY_BUFFER&lt;/var&gt;的VBO决定的。由于在调用&lt;fun&gt;glVertexAttribPointer&lt;/fun&gt;之前绑定的是先前定义的&lt;var&gt;VBO&lt;/var&gt;对象，顶点属性`0`现在会链接到它的顶点数据。\n</code></pre>\n<p>现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用<fun>glEnableVertexAttribArray</fun>，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0. 复制顶点数组到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 1. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. 当我们渲染一个物体时要使用着色器程序</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 3. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<p>每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？</p>\n<h3 id=\"顶点数组对象\"><a href=\"#顶点数组对象\" class=\"headerlink\" title=\"顶点数组对象\"></a>顶点数组对象</h3><p><def>顶点数组对象</def>(Vertex Array Object, <def>VAO</def>)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p>\n<p>!!! Attention</p>\n<pre><code>OpenGL的核心模式**要求**我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\n</code></pre>\n<p>一个顶点数组对象会储存以下这些内容：</p>\n<ul>\n<li><fun>glEnableVertexAttribArray</fun>和<fun>glDisableVertexAttribArray</fun>的调用。</li>\n<li>通过<fun>glVertexAttribPointer</fun>设置的顶点属性配置。</li>\n<li>通过<fun>glVertexAttribPointer</fun>调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n<p><img src=\"../img/01/03/vertex_array_objects.png\"></p>\n<p>创建一个VAO和创建一个VBO很类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VAO;</span><br><span class=\"line\"><span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br></pre></td></tr></table></figure>\n\n<p>要想使用VAO，要做的只是使用<fun>glBindVertexArray</fun>绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定VAO</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把顶点数组复制到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">[...]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<p>就这么多了！前面做的一切都是等待这一刻，一个储存了我们顶点属性配置和应使用的VBO的顶点数组对象。一般当你打算绘制多个物体时，你首先要生成/配置所有的VAO（和必须的VBO及属性指针)，然后储存它们供后面使用。当我们打算绘制物体的时候就拿出相应的VAO，绑定它，绘制完物体后，再解绑VAO。</p>\n<h3 id=\"我们一直期待的三角形\"><a href=\"#我们一直期待的三角形\" class=\"headerlink\" title=\"我们一直期待的三角形\"></a>我们一直期待的三角形</h3><p>要想绘制我们想要的物体，OpenGL给我们提供了<fun>glDrawArrays</fun>函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glDrawArrays</fun>函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递<var>GL_TRIANGLES</var>给它。第二个参数指定了顶点数组的起始索引，我们这里填<code>0</code>。最后一个参数指定我们打算绘制多少个顶点，这里是<code>3</code>（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。</p>\n<p>现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：</p>\n<p><img src=\"../img/01/04/hellotriangle.png\"></p>\n<p>完整的程序源码可以在<a href=\"https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp\">这里</a>找到。</p>\n<p>如果你的输出和这个看起来不一样，你可能做错了什么。去查看一下源码，检查你是否遗漏了什么东西，或者你也可以在评论区提问。</p>\n<h2 id=\"元素缓冲对象\"><a href=\"#元素缓冲对象\" class=\"headerlink\" title=\"元素缓冲对象\"></a>元素缓冲对象</h2><p>在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(Element Buffer Object，EBO)，也叫索引缓冲对象(Index Buffer Object，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，有几个顶点叠加了。我们指定了<code>右下角</code>和<code>左上角</code>两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？</p>\n<p>值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的<def>索引绘制</def>(Indexed Drawing)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> indices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"comment\">// 此例的索引(0,1,2,3)就是顶点数组vertices的下标，</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样可以由下标代表顶点组合成矩形</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> EBO;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br></pre></td></tr></table></figure>\n\n<p>与VBO类似，我们先绑定EBO然后用<fun>glBufferData</fun>把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为<var>GL_ELEMENT_ARRAY_BUFFER</var>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n\n<p>注意：我们传递了<var>GL_ELEMENT_ARRAY_BUFFER</var>当作缓冲目标。最后一件要做的事是用<fun>glDrawElements</fun>来替换<fun>glDrawArrays</fun>函数，表示我们要从索引缓冲区渲染三角形。使用<fun>glDrawElements</fun>时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数指定了我们绘制的模式，这个和<fun>glDrawArrays</fun>的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是<var>GL_UNSIGNED_INT</var>。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。</p>\n<p><fun>glDrawElements</fun>函数从当前绑定到<var>GL_ELEMENT_ARRAY_BUFFER</var>目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。</p>\n<p><img src=\"../img/01/03/vertex_array_objects_ebo.png\"></p>\n<p>!!! Attention</p>\n<pre><code>当目标是&lt;var&gt;GL_ELEMENT_ARRAY_BUFFER&lt;/var&gt;的时候，VAO会储存&lt;fun&gt;glBindBuffer&lt;/fun&gt;的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。\n</code></pre>\n<p>最后的初始化和绘制代码现在看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码 :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定顶点数组对象</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 4. 设定顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">[...]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用<def>线框模式</def>(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。</p>\n<p><img src=\"../img/01/03/hellotriangle2.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"划重点\"><a href=\"#划重点\" class=\"headerlink\" title=\"划重点\"></a>划重点</h1><ul>\n<li>顶点数组对象：Vertex Array Object，VAO</li>\n<li>顶点缓冲对象：Vertex Buffer Object，VBO</li>\n<li>元素缓冲对象：Element Buffer Object，EBO</li>\n<li>索引缓冲对象：Index Buffer Object，IBO</li>\n</ul>\n<hr>\n<p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的<def>图形渲染管线</def>（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。</p>\n<hr>\n<p>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做<def>着色器</def>(Shader)。</p>\n<p>有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用<def>OpenGL着色器语言</def>(OpenGL Shading Language, <def>GLSL</def>)写成的，在下一节中我们再花更多时间研究它。</p>\n<p>下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。</p>\n<p><img src=\"/img/01/03/pipeline.png\"></p>\n<p>首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个<def>顶点</def>(Vertex)是一个3D坐标的数据的集合。而这样一个顶点的数据是用<def>顶点属性</def>(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。</p>\n<p>图形渲染管线的第一个部分是<def>顶点着色器</def>(Vertex Shader)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。</p>\n<p>顶点着色器阶段的输出可以选择性地传递给<def>几何着色器</def>(Geometry Shader)。几何着色器将一组顶点作为输入，这些顶点形成图元，并且能够通过发出新的顶点来形成新的(或其他)图元来生成其他形状。在这个例子中，它从给定的形状中生成第二个三角形。</p>\n<p><def>图元装配</def>(Primitive Assembly)阶段将顶点着色器（或几何着色器）输出的所有顶点作为输入（如果是<var>GL_POINTS</var>，那么就是一个顶点），并将所有的点装配成指定图元的形状；本节例子中是两个三角形。</p>\n<p>图元装配阶段的输出会被传入<def>光栅化阶段</def>(Rasterization Stage)，这里它会把图元映射为最终屏幕上相应的像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。在片段着色器运行之前会执行<def>裁切</def>(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</p>\n<p><def>片段着色器</def>的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。</p>\n<p>在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做<def>Alpha测试</def>和<def>混合</def>(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查<def>alpha</def>值（alpha值定义了一个物体的透明度）并对物体进行<def>混合</def>(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。</p>\n<p>可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。</p>\n<p>在现代OpenGL中，我们<strong>必须</strong>定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。</p>\n<h2 id=\"顶点输入\"><a href=\"#顶点输入\" class=\"headerlink\" title=\"顶点输入\"></a>顶点输入</h2><p>开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把<strong>所有的</strong>3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做<def>标准化设备坐标</def>(Normalized Device Coordinates)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。</p>\n<p>由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个<code>float</code>数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的<em>深度</em>(Depth，译注2)都是一样的，从而使它看上去像是2D的。</p>\n<p>一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是<strong>标准化设备坐标</strong>了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：</p>\n<p><img src=\"../img/01/03/ndc.png\" alt=\"NDC\" title=\"NDC\"></p>\n<p>与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。</p>\n<p>通过使用由<fun>glViewport</fun>函数提供的数据，进行<def>视口变换</def>(Viewport Transform)，<def>标准化设备坐标</def>(Normalized Device Coordinates)会变换为<def>屏幕空间坐标</def>(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。<br>定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p>\n<p>我们通过<def>顶点缓冲对象</def>(Vertex Buffer Objects, VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p>\n<p>顶点缓冲对象是我们在[OpenGL](01 OpenGL.md)教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用<fun>glGenBuffers</fun>函数生成一个带有缓冲ID的VBO对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VBO;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br></pre></td></tr></table></figure>\n\n<p>OpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是<var>GL_ARRAY_BUFFER</var>。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用<fun>glBindBuffer</fun>函数把新创建的缓冲绑定到<var>GL_ARRAY_BUFFER</var>目标上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);  </span><br></pre></td></tr></table></figure>\n\n<p>从这一刻起，我们使用的任何（在<var>GL_ARRAY_BUFFER</var>目标上的）缓冲调用都会用来配置当前绑定的缓冲(<var>VBO</var>)。然后我们可以调用<fun>glBufferData</fun>函数，它会把之前定义的顶点数据复制到缓冲的内存中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glBufferData</fun>是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到<var>GL_ARRAY_BUFFER</var>目标上。第二个参数指定传输数据的大小(以字节为单位)；用一个简单的<code>sizeof</code>计算出顶点数据大小就行。第三个参数是我们希望发送的实际数据。</p>\n<p>第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：</p>\n<ul>\n<li><var>GL_STATIC_DRAW</var> ：数据不会或几乎不会改变。</li>\n<li><var>GL_DYNAMIC_DRAW</var>：数据会被改变很多。</li>\n<li><var>GL_STREAM_DRAW</var> ：数据每次绘制时都会改变。</li>\n</ul>\n<p>三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是<var>GL_STATIC_DRAW</var>。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是<var>GL_DYNAMIC_DRAW</var>或<var>GL_STREAM_DRAW</var>，这样就能确保显卡把数据放在能够高速写入的内存部分。</p>\n<p>现在我们已经把顶点数据储存在显卡的内存中，用<var>VBO</var>这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。</p>\n<h2 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h2><p>顶点着色器(Vertex Shader)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个顶点和一个片段着色器。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。</p>\n<p>我们需要做的第一件事是用着色器语言GLSL(OpenGL Shading Language)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"built_in\">layout</span> (location = <span class=\"number\">0</span>) in vec3 aPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    gl_Position = <span class=\"built_in\">vec4</span>(aPos.x, aPos.y, aPos.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。</p>\n<p>下一步，使用<code>in</code>关键字，在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)。现在我们只关心位置(Position)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个<code>float</code>分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个<code>vec3</code>输入变量<var>aPos</var>。我们同样也通过<code>layout (location = 0)</code>设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。</p>\n<p>为了设置顶点着色器的输出，我们必须把位置数据赋值给预定义的<var>gl_Position</var>变量，它在幕后是<code>vec4</code>类型的。在<fun>main</fun>函数的最后，我们将<var>gl_Position</var>设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把<code>vec3</code>的数据作为<code>vec4</code>构造器的参数，同时把<code>w</code>分量设置为<code>1.0f</code>（我们会在后面解释为什么）来完成这一任务。</p>\n<p>当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。</p>\n<h2 id=\"编译着色器\"><a href=\"#编译着色器\" class=\"headerlink\" title=\"编译着色器\"></a>编译着色器</h2><p>现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *vertexShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;layout (location = 0) in vec3 aPos;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#125;\\0&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>为了能够让OpenGL使用它，我们必须在运行时动态编译它的源代码。</p>\n<p>我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为<code>unsigned int</code>，然后用<fun>glCreateShader</fun>创建这个着色器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> vertexShader;</span><br><span class=\"line\">vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br></pre></td></tr></table></figure>\n\n<p>我们把需要创建的着色器类型以参数形式提供给<fun>glCreateShader</fun>。由于我们正在创建一个顶点着色器，传递的参数是<var>GL_VERTEX_SHADER</var>。</p>\n<p>下一步我们把这个着色器源码附加到着色器对象上，然后编译它：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glShaderSource</fun>函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为<code>NULL</code>。</p>\n<p>!!! Important</p>\n<pre><code>你可能会希望检测在调用&lt;fun&gt;glCompileShader&lt;/fun&gt;后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\n\n    int  success;\n    char infoLog[512];\n    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);\n\n首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用&lt;fun&gt;glGetShaderiv&lt;/fun&gt;检查是否编译成功。如果编译失败，我们会用&lt;fun&gt;glGetShaderInfoLog&lt;/fun&gt;获取错误消息，然后打印它。\n\n    if(!success)\n    &#123;\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout &lt;&lt; &quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;\n    &#125;\n</code></pre>\n<p>如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。</p>\n<h2 id=\"片段着色器\"><a href=\"#片段着色器\" class=\"headerlink\" title=\"片段着色器\"></a>片段着色器</h2><p>片段着色器(Fragment Shader)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。</p>\n<p>!!! Important</p>\n<pre><code>在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\n</code></pre>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">out vec4 FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FragColor = <span class=\"built_in\">vec4</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用<code>out</code>关键字，这里我们命名为<var>FragColor</var>。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的<code>vec4</code>赋值给颜色输出。</p>\n<p>编译片段着色器的过程与顶点着色器类似，只不过我们使用<var>GL_FRAGMENT_SHADER</var>常量作为着色器类型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> fragmentShader;</span><br><span class=\"line\">fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n\n<p>两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的<def>着色器程序</def>(Shader Program)中。</p>\n<h3 id=\"着色器程序\"><a href=\"#着色器程序\" class=\"headerlink\" title=\"着色器程序\"></a>着色器程序</h3><p>着色器程序对象(Shader Program Object)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们<def>链接</def>(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。</p>\n<p>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。</p>\n<p>创建一个程序对象很简单：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> shaderProgram;</span><br><span class=\"line\">shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br></pre></td></tr></table></figure>\n\n<p><fun>glCreateProgram</fun>函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用<fun>glLinkProgram</fun>链接它们：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class=\"line\"><span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n\n<p>代码应该很清楚，我们把着色器附加到了程序上，然后用<fun>glLinkProgram</fun>链接。</p>\n<p>!!! Important</p>\n<pre><code>就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用&lt;fun&gt;glGetShaderiv&lt;/fun&gt;和&lt;fun&gt;glGetShaderInfoLog&lt;/fun&gt;，现在我们使用：\n\n    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);\n    if(!success) &#123;\n        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n        ...\n    &#125;\n</code></pre>\n<p>得到的结果就是一个程序对象，我们可以调用<fun>glUseProgram</fun>函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n\n<p>在<fun>glUseProgram</fun>函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。</p>\n<p>对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。</p>\n<h2 id=\"链接顶点属性\"><a href=\"#链接顶点属性\" class=\"headerlink\" title=\"链接顶点属性\"></a>链接顶点属性</h2><p>顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。</p>\n<p>我们的顶点缓冲数据会被解析为下面这样子：</p>\n<p><img src=\"../img/01/03/vertex_attribute_pointer.png\"></p>\n<ul>\n<li>位置数据被储存为32位（4字节）浮点值。</li>\n<li>每个位置包含3个这样的值。</li>\n<li>在这3个值之间没有空隙（或其他值）。这几个值在数组中<def>紧密排列</def>(Tightly Packed)。</li>\n<li>数据中第一个值在缓冲开始的位置。</li>\n</ul>\n<p>有了这些信息我们就可以使用<fun>glVertexAttribPointer</fun>函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><var>glVertexAttribPointer</var>函数的参数非常多，所以我会逐一介绍它们：</p>\n<ul>\n<li>第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用<code>layout(location = 0)</code>定义了<var>position</var>顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为<code>0</code>。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入<code>0</code>。</li>\n<li>第二个参数指定顶点属性的大小。顶点属性是一个<code>vec3</code>，它由3个值组成，所以大小是3。</li>\n<li>第三个参数指定数据的类型，这里是<var>GL_FLOAT</var>(GLSL中<code>vec*</code>都是由浮点数值组成的)。</li>\n<li>下个参数定义我们是否希望数据被标准化(Normalize)。如果我们设置为<var>GL_TRUE</var>，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为<var>GL_FALSE</var>。</li>\n<li>第五个参数叫做<def>步长</def>(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个<code>float</code>之后，我们把步长设置为<code>3 * sizeof(float)</code>。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。</li>\n<li>最后一个参数的类型是<code>void*</code>，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的<def>偏移量</def>(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数。</li>\n</ul>\n<p>!!! Important</p>\n<pre><code>每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用&lt;fun&gt;glVertexAttribPointer&lt;/fun&gt;时绑定到&lt;var&gt;GL_ARRAY_BUFFER&lt;/var&gt;的VBO决定的。由于在调用&lt;fun&gt;glVertexAttribPointer&lt;/fun&gt;之前绑定的是先前定义的&lt;var&gt;VBO&lt;/var&gt;对象，顶点属性`0`现在会链接到它的顶点数据。\n</code></pre>\n<p>现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用<fun>glEnableVertexAttribArray</fun>，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0. 复制顶点数组到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 1. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. 当我们渲染一个物体时要使用着色器程序</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 3. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<p>每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？</p>\n<h3 id=\"顶点数组对象\"><a href=\"#顶点数组对象\" class=\"headerlink\" title=\"顶点数组对象\"></a>顶点数组对象</h3><p><def>顶点数组对象</def>(Vertex Array Object, <def>VAO</def>)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p>\n<p>!!! Attention</p>\n<pre><code>OpenGL的核心模式**要求**我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\n</code></pre>\n<p>一个顶点数组对象会储存以下这些内容：</p>\n<ul>\n<li><fun>glEnableVertexAttribArray</fun>和<fun>glDisableVertexAttribArray</fun>的调用。</li>\n<li>通过<fun>glVertexAttribPointer</fun>设置的顶点属性配置。</li>\n<li>通过<fun>glVertexAttribPointer</fun>调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n<p><img src=\"../img/01/03/vertex_array_objects.png\"></p>\n<p>创建一个VAO和创建一个VBO很类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VAO;</span><br><span class=\"line\"><span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br></pre></td></tr></table></figure>\n\n<p>要想使用VAO，要做的只是使用<fun>glBindVertexArray</fun>绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定VAO</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把顶点数组复制到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">[...]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<p>就这么多了！前面做的一切都是等待这一刻，一个储存了我们顶点属性配置和应使用的VBO的顶点数组对象。一般当你打算绘制多个物体时，你首先要生成/配置所有的VAO（和必须的VBO及属性指针)，然后储存它们供后面使用。当我们打算绘制物体的时候就拿出相应的VAO，绑定它，绘制完物体后，再解绑VAO。</p>\n<h3 id=\"我们一直期待的三角形\"><a href=\"#我们一直期待的三角形\" class=\"headerlink\" title=\"我们一直期待的三角形\"></a>我们一直期待的三角形</h3><p>要想绘制我们想要的物体，OpenGL给我们提供了<fun>glDrawArrays</fun>函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><fun>glDrawArrays</fun>函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递<var>GL_TRIANGLES</var>给它。第二个参数指定了顶点数组的起始索引，我们这里填<code>0</code>。最后一个参数指定我们打算绘制多少个顶点，这里是<code>3</code>（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。</p>\n<p>现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：</p>\n<p><img src=\"../img/01/04/hellotriangle.png\"></p>\n<p>完整的程序源码可以在<a href=\"https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp\">这里</a>找到。</p>\n<p>如果你的输出和这个看起来不一样，你可能做错了什么。去查看一下源码，检查你是否遗漏了什么东西，或者你也可以在评论区提问。</p>\n<h2 id=\"元素缓冲对象\"><a href=\"#元素缓冲对象\" class=\"headerlink\" title=\"元素缓冲对象\"></a>元素缓冲对象</h2><p>在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(Element Buffer Object，EBO)，也叫索引缓冲对象(Index Buffer Object，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，有几个顶点叠加了。我们指定了<code>右下角</code>和<code>左上角</code>两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？</p>\n<p>值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的<def>索引绘制</def>(Indexed Drawing)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> indices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"comment\">// 此例的索引(0,1,2,3)就是顶点数组vertices的下标，</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样可以由下标代表顶点组合成矩形</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> EBO;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br></pre></td></tr></table></figure>\n\n<p>与VBO类似，我们先绑定EBO然后用<fun>glBufferData</fun>把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为<var>GL_ELEMENT_ARRAY_BUFFER</var>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n\n<p>注意：我们传递了<var>GL_ELEMENT_ARRAY_BUFFER</var>当作缓冲目标。最后一件要做的事是用<fun>glDrawElements</fun>来替换<fun>glDrawArrays</fun>函数，表示我们要从索引缓冲区渲染三角形。使用<fun>glDrawElements</fun>时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数指定了我们绘制的模式，这个和<fun>glDrawArrays</fun>的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是<var>GL_UNSIGNED_INT</var>。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。</p>\n<p><fun>glDrawElements</fun>函数从当前绑定到<var>GL_ELEMENT_ARRAY_BUFFER</var>目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。</p>\n<p><img src=\"../img/01/03/vertex_array_objects_ebo.png\"></p>\n<p>!!! Attention</p>\n<pre><code>当目标是&lt;var&gt;GL_ELEMENT_ARRAY_BUFFER&lt;/var&gt;的时候，VAO会储存&lt;fun&gt;glBindBuffer&lt;/fun&gt;的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。\n</code></pre>\n<p>最后的初始化和绘制代码现在看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码 :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定顶点数组对象</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 4. 设定顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">[...]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用<def>线框模式</def>(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。</p>\n<p><img src=\"../img/01/03/hellotriangle2.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmbhbylv70050gkc23qxde8ys","category_id":"cmbhbylva005pgkc21xte6kzx","_id":"cmbhbylvg0098gkc2dvo3g61m"},{"post_id":"cmbq6oksx0000lgc24f41c2ve","category_id":"cmbhbylva005pgkc21xte6kzx","_id":"cmbq6oksy0002lgc2323006tt"},{"post_id":"cmbrkfes70006s0c212fse43h","category_id":"cmbhbylva005pgkc21xte6kzx","_id":"cmbrkfes70008s0c29i6p6y7g"},{"post_id":"cmce9o9vx000054c2de4hb1u5","category_id":"cmbhbylva005pgkc21xte6kzx","_id":"cmce9o9vy000254c2exdj5zx3"}],"PostTag":[{"post_id":"cmbhbylv70050gkc23qxde8ys","tag_id":"cmbhbylvf008igkc213myevc6","_id":"cmbhbylvf008ngkc2doqubq0y"},{"post_id":"cmbq6oksx0000lgc24f41c2ve","tag_id":"cmbq6oksy0001lgc25jxf91i2","_id":"cmbq6oksy0003lgc2affi0yoq"},{"post_id":"cmbrkfes70006s0c212fse43h","tag_id":"cmbq6oksy0001lgc25jxf91i2","_id":"cmbrkfes70007s0c23jdn552o"},{"post_id":"cmce9o9vx000054c2de4hb1u5","tag_id":"cmbq6oksy0001lgc25jxf91i2","_id":"cmce9o9vy000154c240mg4qzc"}],"Tag":[{"name":"Cloudflare","_id":"cmbhbylum0005gkc2c84i8buu"},{"name":"科学上网","_id":"cmbhbyluo000dgkc2giyj5if3"},{"name":"workers","_id":"cmbhbylup000igkc2hxy0h2a3"},{"name":"pages","_id":"cmbhbyluq000ngkc21xx19b0k"},{"name":"服务器","_id":"cmbhbylur000sgkc2bfqc1qh3"},{"name":"vless","_id":"cmbhbylus000zgkc2700wftvo"},{"name":"某墙","_id":"cmbhbylut0014gkc24etq22ld"},{"name":"Clash","_id":"cmbhbylut0019gkc241n94ey7"},{"name":"玄犬","_id":"cmbhbyluu001egkc2cjbra39q"},{"name":"悬楼","_id":"cmbhbyluv001mgkc21zlx37d9"},{"name":"Babel","_id":"cmbhbylux0021gkc26tnwa50q"},{"name":"Blog","_id":"cmbhbylux0028gkc207cmf7p6"},{"name":"Canvas","_id":"cmbhbyluy002fgkc24uwpehms"},{"name":"GeoJSON","_id":"cmbhbyluz002lgkc26z3o5sqh"},{"name":"反代节点","_id":"cmbhbylv0002zgkc2e17i27pt"},{"name":"Google","_id":"cmbhbylv10038gkc23zcfhxe8"},{"name":"Mac","_id":"cmbhbylv2003egkc28o83g704"},{"name":"VS Code","_id":"cmbhbylv3003lgkc2c2zd597y"},{"name":"Git","_id":"cmbhbylv3003sgkc2b5u98bf7"},{"name":"commitizen","_id":"cmbhbylv40041gkc2fq7n6ps3"},{"name":"cz","_id":"cmbhbylv5004agkc297nh9anv"},{"name":"Docker","_id":"cmbhbylv6004ggkc28wrochdv"},{"name":"Rebase","_id":"cmbhbylv9005egkc2a6pp4s1n"},{"name":"Webhook","_id":"cmbhbylvb0060gkc2eor7d298"},{"name":"git","_id":"cmbhbylvc006dgkc2fcn28w65"},{"name":"Go","_id":"cmbhbylvc006lgkc219bfa0n2"},{"name":"Hash","_id":"cmbhbylvd006sgkc2a217btes"},{"name":"Homebrew","_id":"cmbhbylvd0070gkc2btefa6ne"},{"name":"Lerna","_id":"cmbhbylvd0075gkc24jfwg7ww"},{"name":"Linux","_id":"cmbhbylvd0079gkc2g0x037mq"},{"name":"Node","_id":"cmbhbylve007hgkc2gydx7t3x"},{"name":"二进制","_id":"cmbhbylve007kgkc29wf78gup"},{"name":"n","_id":"cmbhbylve007mgkc2bezh3i8k"},{"name":"Nginx","_id":"cmbhbylve007vgkc23k317f18"},{"name":"Ubuntu","_id":"cmbhbylvf0082gkc24rescz06"},{"name":"Oauth2.0","_id":"cmbhbylvf0088gkc27g3w9rzf"},{"name":"pm2","_id":"cmbhbylvf008dgkc2g9mhef1m"},{"name":"RegExp","_id":"cmbhbylvf008igkc213myevc6"},{"name":"Serverless","_id":"cmbhbylvf008mgkc215ht2qei"},{"name":"CSS","_id":"cmbhbylvg008qgkc2aurtftgk"},{"name":"WebGL","_id":"cmbhbylvg0092gkc21jxo9gyb"},{"name":"OpenGL","_id":"cmbq6oksy0001lgc25jxf91i2"}]}}